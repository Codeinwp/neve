"use strict";(self.webpackChunkneve=self.webpackChunkneve||[]).push([[865],{"./stories/customizer-controls/Number.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,SingleUnit:()=>SingleUnit,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _assets_apps_components_src_components__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./assets/apps/components/src/components.js"),_components_decorators__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./stories/components/decorators.js"),_wordpress_element__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Customizer/Controls/Number",component:_assets_apps_components_src_components__WEBPACK_IMPORTED_MODULE_0__.XT,args:{units:["px","em","%"],label:"Accordion Label",min:0,max:100,defaultValue:{desktop:30,tablet:20,mobile:10,desktopUnit:"px",tabletUnit:"px",mobileUnit:"px"},hasResponsive:!0},decorators:[_components_decorators__WEBPACK_IMPORTED_MODULE_1__.$,_components_decorators__WEBPACK_IMPORTED_MODULE_1__.x]},Template=args=>{const[currentValue,setCurrentValue]=(0,_wordpress_element__WEBPACK_IMPORTED_MODULE_3__.useState)({...args.defaultValue}),[device,setDevice]=(0,_wordpress_element__WEBPACK_IMPORTED_MODULE_3__.useState)("desktop");return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_assets_apps_components_src_components__WEBPACK_IMPORTED_MODULE_0__.XT,{className:"font-size",label:"Control Label",step:1,...args,onReset:()=>{setCurrentValue(args.defaultValue)},onUnitChange:unit=>{const nextValue={...currentValue};nextValue[`${device}Unit`]=unit,setCurrentValue(nextValue)},onChangedDevice:setDevice,onChange:value=>{const nextValue={...currentValue};nextValue[device]=value,setCurrentValue(nextValue)},value:currentValue[device],default:args.defaultValue[device],activeUnit:currentValue[`${device}Unit`]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div",{className:"value-previewer",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("strong",{children:"Device:"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("pre",{children:device}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("strong",{children:"Value:"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("pre",{children:JSON.stringify(currentValue,null," ")})]})]})},Default=Template.bind({}),SingleUnit=Template.bind({});SingleUnit.args={units:["px"]},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => {\n  const [currentValue, setCurrentValue] = useState({\n    ...args.defaultValue\n  });\n  const [device, setDevice] = useState('desktop');\n  const reset = () => {\n    setCurrentValue(args.defaultValue);\n  };\n  const updateValue = value => {\n    const nextValue = {\n      ...currentValue\n    };\n    nextValue[device] = value;\n    setCurrentValue(nextValue);\n  };\n  const updateUnit = unit => {\n    const nextValue = {\n      ...currentValue\n    };\n    nextValue[`${device}Unit`] = unit;\n    setCurrentValue(nextValue);\n  };\n  return <>\n            <NumberControl className=\"font-size\" label={'Control Label'} step={1} {...args} onReset={reset} onUnitChange={updateUnit} onChangedDevice={setDevice} onChange={updateValue} value={currentValue[device]} default={args.defaultValue[device]} activeUnit={currentValue[`${device}Unit`]} />\n\n            <div className=\"value-previewer\">\n                <strong>Device:</strong>\n                <pre>{device}</pre>\n                <strong>Value:</strong>\n                <pre>{JSON.stringify(currentValue, null, ' ')}</pre>\n            </div>\n        </>;\n}",...Default.parameters?.docs?.source}}},SingleUnit.parameters={...SingleUnit.parameters,docs:{...SingleUnit.parameters?.docs,source:{originalSource:"args => {\n  const [currentValue, setCurrentValue] = useState({\n    ...args.defaultValue\n  });\n  const [device, setDevice] = useState('desktop');\n  const reset = () => {\n    setCurrentValue(args.defaultValue);\n  };\n  const updateValue = value => {\n    const nextValue = {\n      ...currentValue\n    };\n    nextValue[device] = value;\n    setCurrentValue(nextValue);\n  };\n  const updateUnit = unit => {\n    const nextValue = {\n      ...currentValue\n    };\n    nextValue[`${device}Unit`] = unit;\n    setCurrentValue(nextValue);\n  };\n  return <>\n            <NumberControl className=\"font-size\" label={'Control Label'} step={1} {...args} onReset={reset} onUnitChange={updateUnit} onChangedDevice={setDevice} onChange={updateValue} value={currentValue[device]} default={args.defaultValue[device]} activeUnit={currentValue[`${device}Unit`]} />\n\n            <div className=\"value-previewer\">\n                <strong>Device:</strong>\n                <pre>{device}</pre>\n                <strong>Value:</strong>\n                <pre>{JSON.stringify(currentValue, null, ' ')}</pre>\n            </div>\n        </>;\n}",...SingleUnit.parameters?.docs?.source}}};const __namedExportsOrder=["Default","SingleUnit"]}}]);