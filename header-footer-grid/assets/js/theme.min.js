!function(){"use strict";var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},t=function(e){return e&&e.Math===Math&&e},n=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof e&&e)||function(){return this}()||e||Function("return this")(),r={},o=function(e){try{return!!e()}catch(e){return!0}},i=!o((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]})),a=!o((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")})),u=a,c=Function.prototype.call,s=u?c.bind(c):function(){return c.apply(c,arguments)},l={},d={}.propertyIsEnumerable,f=Object.getOwnPropertyDescriptor,p=f&&!d.call({1:2},1);l.f=p?function(e){var t=f(this,e);return!!t&&t.enumerable}:d;var m,h,g=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},v=a,y=Function.prototype,b=y.call,w=v&&y.bind.bind(b,b),S=v?w:function(e){return function(){return b.apply(e,arguments)}},E=S,x=E({}.toString),O=E("".slice),L=function(e){return O(x(e),8,-1)},_=o,T=L,M=Object,I=S("".split),j=_((function(){return!M("z").propertyIsEnumerable(0)}))?function(e){return"String"===T(e)?I(e,""):M(e)}:M,A=function(e){return null==e},C=A,N=TypeError,P=function(e){if(C(e))throw new N("Can't call method on "+e);return e},D=j,R=P,k=function(e){return D(R(e))},B="object"==typeof document&&document.all,F={all:B,IS_HTMLDDA:void 0===B&&void 0!==B},$=F.all,q=F.IS_HTMLDDA?function(e){return"function"==typeof e||e===$}:function(e){return"function"==typeof e},U=q,z=F.all,H=F.IS_HTMLDDA?function(e){return"object"==typeof e?null!==e:U(e)||e===z}:function(e){return"object"==typeof e?null!==e:U(e)},W=n,G=q,K=function(e,t){return arguments.length<2?(n=W[e],G(n)?n:void 0):W[e]&&W[e][t];var n},Y=S({}.isPrototypeOf),J=n,X="undefined"!=typeof navigator&&String(navigator.userAgent)||"",V=J.process,Q=J.Deno,Z=V&&V.versions||Q&&Q.version,ee=Z&&Z.v8;ee&&(h=(m=ee.split("."))[0]>0&&m[0]<4?1:+(m[0]+m[1])),!h&&X&&(!(m=X.match(/Edge\/(\d+)/))||m[1]>=74)&&(m=X.match(/Chrome\/(\d+)/))&&(h=+m[1]);var te=h,ne=o,re=n.String,oe=!!Object.getOwnPropertySymbols&&!ne((function(){var e=Symbol("symbol detection");return!re(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&te&&te<41})),ie=oe&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,ae=K,ue=q,ce=Y,se=Object,le=ie?function(e){return"symbol"==typeof e}:function(e){var t=ae("Symbol");return ue(t)&&ce(t.prototype,se(e))},de=String,fe=q,pe=function(e){try{return de(e)}catch(e){return"Object"}},me=TypeError,he=function(e){if(fe(e))return e;throw new me(pe(e)+" is not a function")},ge=A,ve=function(e,t){var n=e[t];return ge(n)?void 0:he(n)},ye=s,be=q,we=H,Se=TypeError,Ee={exports:{}},xe=n,Oe=Object.defineProperty,Le=function(e,t){try{Oe(xe,e,{value:t,configurable:!0,writable:!0})}catch(n){xe[e]=t}return t},_e=Le,Te="__core-js_shared__",Me=n[Te]||_e(Te,{}),Ie=Me;(Ee.exports=function(e,t){return Ie[e]||(Ie[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.33.2",mode:"global",copyright:"Â© 2014-2023 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.33.2/LICENSE",source:"https://github.com/zloirock/core-js"});var je=Ee.exports,Ae=P,Ce=Object,Ne=function(e){return Ce(Ae(e))},Pe=Ne,De=S({}.hasOwnProperty),Re=Object.hasOwn||function(e,t){return De(Pe(e),t)},ke=S,Be=0,Fe=Math.random(),$e=ke(1..toString),qe=function(e){return"Symbol("+(void 0===e?"":e)+")_"+$e(++Be+Fe,36)},Ue=je,ze=Re,He=qe,We=oe,Ge=ie,Ke=n.Symbol,Ye=Ue("wks"),Je=Ge?Ke.for||Ke:Ke&&Ke.withoutSetter||He,Xe=function(e){return ze(Ye,e)||(Ye[e]=We&&ze(Ke,e)?Ke[e]:Je("Symbol."+e)),Ye[e]},Ve=s,Qe=H,Ze=le,et=ve,tt=function(e,t){var n,r;if("string"===t&&be(n=e.toString)&&!we(r=ye(n,e)))return r;if(be(n=e.valueOf)&&!we(r=ye(n,e)))return r;if("string"!==t&&be(n=e.toString)&&!we(r=ye(n,e)))return r;throw new Se("Can't convert object to primitive value")},nt=TypeError,rt=Xe("toPrimitive"),ot=function(e,t){if(!Qe(e)||Ze(e))return e;var n,r=et(e,rt);if(r){if(void 0===t&&(t="default"),n=Ve(r,e,t),!Qe(n)||Ze(n))return n;throw new nt("Can't convert object to primitive value")}return void 0===t&&(t="number"),tt(e,t)},it=le,at=function(e){var t=ot(e,"string");return it(t)?t:t+""},ut=H,ct=n.document,st=ut(ct)&&ut(ct.createElement),lt=function(e){return st?ct.createElement(e):{}},dt=lt,ft=!i&&!o((function(){return 7!==Object.defineProperty(dt("div"),"a",{get:function(){return 7}}).a})),pt=i,mt=s,ht=l,gt=g,vt=k,yt=at,bt=Re,wt=ft,St=Object.getOwnPropertyDescriptor;r.f=pt?St:function(e,t){if(e=vt(e),t=yt(t),wt)try{return St(e,t)}catch(e){}if(bt(e,t))return gt(!mt(ht.f,e,t),e[t])};var Et={},xt=i&&o((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype})),Ot=H,Lt=String,_t=TypeError,Tt=function(e){if(Ot(e))return e;throw new _t(Lt(e)+" is not an object")},Mt=i,It=ft,jt=xt,At=Tt,Ct=at,Nt=TypeError,Pt=Object.defineProperty,Dt=Object.getOwnPropertyDescriptor,Rt="enumerable",kt="configurable",Bt="writable";Et.f=Mt?jt?function(e,t,n){if(At(e),t=Ct(t),At(n),"function"==typeof e&&"prototype"===t&&"value"in n&&Bt in n&&!n[Bt]){var r=Dt(e,t);r&&r[Bt]&&(e[t]=n.value,n={configurable:kt in n?n[kt]:r[kt],enumerable:Rt in n?n[Rt]:r[Rt],writable:!1})}return Pt(e,t,n)}:Pt:function(e,t,n){if(At(e),t=Ct(t),At(n),It)try{return Pt(e,t,n)}catch(e){}if("get"in n||"set"in n)throw new Nt("Accessors not supported");return"value"in n&&(e[t]=n.value),e};var Ft=Et,$t=g,qt=i?function(e,t,n){return Ft.f(e,t,$t(1,n))}:function(e,t,n){return e[t]=n,e},Ut={exports:{}},zt=i,Ht=Re,Wt=Function.prototype,Gt=zt&&Object.getOwnPropertyDescriptor,Kt=Ht(Wt,"name"),Yt={EXISTS:Kt,PROPER:Kt&&"something"===function(){}.name,CONFIGURABLE:Kt&&(!zt||zt&&Gt(Wt,"name").configurable)},Jt=q,Xt=Me,Vt=S(Function.toString);Jt(Xt.inspectSource)||(Xt.inspectSource=function(e){return Vt(e)});var Qt,Zt,en,tn=Xt.inspectSource,nn=q,rn=n.WeakMap,on=nn(rn)&&/native code/.test(String(rn)),an=qe,un=je("keys"),cn=function(e){return un[e]||(un[e]=an(e))},sn={},ln=on,dn=n,fn=H,pn=qt,mn=Re,hn=Me,gn=cn,vn=sn,yn="Object already initialized",bn=dn.TypeError,wn=dn.WeakMap;if(ln||hn.state){var Sn=hn.state||(hn.state=new wn);Sn.get=Sn.get,Sn.has=Sn.has,Sn.set=Sn.set,Qt=function(e,t){if(Sn.has(e))throw new bn(yn);return t.facade=e,Sn.set(e,t),t},Zt=function(e){return Sn.get(e)||{}},en=function(e){return Sn.has(e)}}else{var En=gn("state");vn[En]=!0,Qt=function(e,t){if(mn(e,En))throw new bn(yn);return t.facade=e,pn(e,En,t),t},Zt=function(e){return mn(e,En)?e[En]:{}},en=function(e){return mn(e,En)}}var xn={set:Qt,get:Zt,has:en,enforce:function(e){return en(e)?Zt(e):Qt(e,{})},getterFor:function(e){return function(t){var n;if(!fn(t)||(n=Zt(t)).type!==e)throw new bn("Incompatible receiver, "+e+" required");return n}}},On=S,Ln=o,_n=q,Tn=Re,Mn=i,In=Yt.CONFIGURABLE,jn=tn,An=xn.enforce,Cn=xn.get,Nn=String,Pn=Object.defineProperty,Dn=On("".slice),Rn=On("".replace),kn=On([].join),Bn=Mn&&!Ln((function(){return 8!==Pn((function(){}),"length",{value:8}).length})),Fn=String(String).split("String"),$n=Ut.exports=function(e,t,n){"Symbol("===Dn(Nn(t),0,7)&&(t="["+Rn(Nn(t),/^Symbol\(([^)]*)\)/,"$1")+"]"),n&&n.getter&&(t="get "+t),n&&n.setter&&(t="set "+t),(!Tn(e,"name")||In&&e.name!==t)&&(Mn?Pn(e,"name",{value:t,configurable:!0}):e.name=t),Bn&&n&&Tn(n,"arity")&&e.length!==n.arity&&Pn(e,"length",{value:n.arity});try{n&&Tn(n,"constructor")&&n.constructor?Mn&&Pn(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var r=An(e);return Tn(r,"source")||(r.source=kn(Fn,"string"==typeof t?t:"")),e};Function.prototype.toString=$n((function(){return _n(this)&&Cn(this).source||jn(this)}),"toString");var qn=Ut.exports,Un=q,zn=Et,Hn=qn,Wn=Le,Gn=function(e,t,n,r){r||(r={});var o=r.enumerable,i=void 0!==r.name?r.name:t;if(Un(n)&&Hn(n,i,r),r.global)o?e[t]=n:Wn(t,n);else{try{r.unsafe?e[t]&&(o=!0):delete e[t]}catch(e){}o?e[t]=n:zn.f(e,t,{value:n,enumerable:!1,configurable:!r.nonConfigurable,writable:!r.nonWritable})}return e},Kn={},Yn=Math.ceil,Jn=Math.floor,Xn=Math.trunc||function(e){var t=+e;return(t>0?Jn:Yn)(t)},Vn=function(e){var t=+e;return t!=t||0===t?0:Xn(t)},Qn=Vn,Zn=Math.max,er=Math.min,tr=Vn,nr=Math.min,rr=function(e){return e>0?nr(tr(e),9007199254740991):0},or=rr,ir=k,ar=function(e,t){var n=Qn(e);return n<0?Zn(n+t,0):er(n,t)},ur=function(e){return or(e.length)},cr=function(e){return function(t,n,r){var o,i=ir(t),a=ur(i),u=ar(r,a);if(e&&n!=n){for(;a>u;)if((o=i[u++])!=o)return!0}else for(;a>u;u++)if((e||u in i)&&i[u]===n)return e||u||0;return!e&&-1}},sr={includes:cr(!0),indexOf:cr(!1)},lr=Re,dr=k,fr=sr.indexOf,pr=sn,mr=S([].push),hr=function(e,t){var n,r=dr(e),o=0,i=[];for(n in r)!lr(pr,n)&&lr(r,n)&&mr(i,n);for(;t.length>o;)lr(r,n=t[o++])&&(~fr(i,n)||mr(i,n));return i},gr=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],vr=hr,yr=gr.concat("length","prototype");Kn.f=Object.getOwnPropertyNames||function(e){return vr(e,yr)};var br={};br.f=Object.getOwnPropertySymbols;var wr=K,Sr=Kn,Er=br,xr=Tt,Or=S([].concat),Lr=wr("Reflect","ownKeys")||function(e){var t=Sr.f(xr(e)),n=Er.f;return n?Or(t,n(e)):t},_r=Re,Tr=Lr,Mr=r,Ir=Et,jr=o,Ar=q,Cr=/#|\.prototype\./,Nr=function(e,t){var n=Dr[Pr(e)];return n===kr||n!==Rr&&(Ar(t)?jr(t):!!t)},Pr=Nr.normalize=function(e){return String(e).replace(Cr,".").toLowerCase()},Dr=Nr.data={},Rr=Nr.NATIVE="N",kr=Nr.POLYFILL="P",Br=Nr,Fr=n,$r=r.f,qr=qt,Ur=Gn,zr=Le,Hr=function(e,t,n){for(var r=Tr(t),o=Ir.f,i=Mr.f,a=0;a<r.length;a++){var u=r[a];_r(e,u)||n&&_r(n,u)||o(e,u,i(t,u))}},Wr=Br,Gr=function(e,t){var n,r,o,i,a,u=e.target,c=e.global,s=e.stat;if(n=c?Fr:s?Fr[u]||zr(u,{}):(Fr[u]||{}).prototype)for(r in t){if(i=t[r],o=e.dontCallGetSet?(a=$r(n,r))&&a.value:n[r],!Wr(c?r:u+(s?".":"#")+r,e.forced)&&void 0!==o){if(typeof i==typeof o)continue;Hr(i,o)}(e.sham||o&&o.sham)&&qr(i,"sham",!0),Ur(n,r,i,e)}},Kr={};Kr[Xe("toStringTag")]="z";var Yr="[object z]"===String(Kr),Jr=q,Xr=L,Vr=Xe("toStringTag"),Qr=Object,Zr="Arguments"===Xr(function(){return arguments}()),eo=Yr?Xr:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Qr(e),Vr))?n:Zr?Xr(t):"Object"===(r=Xr(t))&&Jr(t.callee)?"Arguments":r},to=String,no=function(e){if("Symbol"===eo(e))throw new TypeError("Cannot convert a Symbol value to a string");return to(e)},ro=Tt,oo=o,io=n.RegExp,ao=oo((function(){var e=io("a","y");return e.lastIndex=2,null!==e.exec("abcd")})),uo=ao||oo((function(){return!io("a","y").sticky})),co={BROKEN_CARET:ao||oo((function(){var e=io("^r","gy");return e.lastIndex=2,null!==e.exec("str")})),MISSED_STICKY:uo,UNSUPPORTED_Y:ao},so={},lo=hr,fo=gr,po=Object.keys||function(e){return lo(e,fo)},mo=i,ho=xt,go=Et,vo=Tt,yo=k,bo=po;so.f=mo&&!ho?Object.defineProperties:function(e,t){vo(e);for(var n,r=yo(t),o=bo(t),i=o.length,a=0;i>a;)go.f(e,n=o[a++],r[n]);return e};var wo,So=K("document","documentElement"),Eo=Tt,xo=so,Oo=gr,Lo=sn,_o=So,To=lt,Mo="prototype",Io="script",jo=cn("IE_PROTO"),Ao=function(){},Co=function(e){return"<"+Io+">"+e+"</"+Io+">"},No=function(e){e.write(Co("")),e.close();var t=e.parentWindow.Object;return e=null,t},Po=function(){try{wo=new ActiveXObject("htmlfile")}catch(e){}var e,t,n;Po="undefined"!=typeof document?document.domain&&wo?No(wo):(t=To("iframe"),n="java"+Io+":",t.style.display="none",_o.appendChild(t),t.src=String(n),(e=t.contentWindow.document).open(),e.write(Co("document.F=Object")),e.close(),e.F):No(wo);for(var r=Oo.length;r--;)delete Po[Mo][Oo[r]];return Po()};Lo[jo]=!0;var Do,Ro,ko=Object.create||function(e,t){var n;return null!==e?(Ao[Mo]=Eo(e),n=new Ao,Ao[Mo]=null,n[jo]=e):n=Po(),void 0===t?n:xo.f(n,t)},Bo=o,Fo=n.RegExp,$o=Bo((function(){var e=Fo(".","s");return!(e.dotAll&&e.test("\n")&&"s"===e.flags)})),qo=o,Uo=n.RegExp,zo=qo((function(){var e=Uo("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")})),Ho=s,Wo=S,Go=no,Ko=function(){var e=ro(this),t="";return e.hasIndices&&(t+="d"),e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.unicodeSets&&(t+="v"),e.sticky&&(t+="y"),t},Yo=co,Jo=ko,Xo=xn.get,Vo=$o,Qo=zo,Zo=je("native-string-replace",String.prototype.replace),ei=RegExp.prototype.exec,ti=ei,ni=Wo("".charAt),ri=Wo("".indexOf),oi=Wo("".replace),ii=Wo("".slice),ai=(Ro=/b*/g,Ho(ei,Do=/a/,"a"),Ho(ei,Ro,"a"),0!==Do.lastIndex||0!==Ro.lastIndex),ui=Yo.BROKEN_CARET,ci=void 0!==/()??/.exec("")[1];(ai||ci||ui||Vo||Qo)&&(ti=function(e){var t,n,r,o,i,a,u,c=this,s=Xo(c),l=Go(e),d=s.raw;if(d)return d.lastIndex=c.lastIndex,t=Ho(ti,d,l),c.lastIndex=d.lastIndex,t;var f=s.groups,p=ui&&c.sticky,m=Ho(Ko,c),h=c.source,g=0,v=l;if(p&&(m=oi(m,"y",""),-1===ri(m,"g")&&(m+="g"),v=ii(l,c.lastIndex),c.lastIndex>0&&(!c.multiline||c.multiline&&"\n"!==ni(l,c.lastIndex-1))&&(h="(?: "+h+")",v=" "+v,g++),n=new RegExp("^(?:"+h+")",m)),ci&&(n=new RegExp("^"+h+"$(?!\\s)",m)),ai&&(r=c.lastIndex),o=Ho(ei,p?n:c,v),p?o?(o.input=ii(o.input,g),o[0]=ii(o[0],g),o.index=c.lastIndex,c.lastIndex+=o[0].length):c.lastIndex=0:ai&&o&&(c.lastIndex=c.global?o.index+o[0].length:r),ci&&o&&o.length>1&&Ho(Zo,o[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0)})),o&&f)for(o.groups=a=Jo(null),i=0;i<f.length;i++)a[(u=f[i])[0]]=o[u[1]];return o});var si=ti;Gr({target:"RegExp",proto:!0,forced:/./.exec!==si},{exec:si});var li=L,di=S,fi=function(e){if("Function"===li(e))return di(e)},pi=fi,mi=Gn,hi=si,gi=o,vi=Xe,yi=qt,bi=vi("species"),wi=RegExp.prototype,Si=function(e,t,n,r){var o=vi(e),i=!gi((function(){var t={};return t[o]=function(){return 7},7!==""[e](t)})),a=i&&!gi((function(){var t=!1,n=/a/;return"split"===e&&((n={}).constructor={},n.constructor[bi]=function(){return n},n.flags="",n[o]=/./[o]),n.exec=function(){return t=!0,null},n[o](""),!t}));if(!i||!a||n){var u=pi(/./[o]),c=t(o,""[e],(function(e,t,n,r,o){var a=pi(e),c=t.exec;return c===hi||c===wi.exec?i&&!o?{done:!0,value:u(t,n,r)}:{done:!0,value:a(n,t,r)}:{done:!1}}));mi(String.prototype,e,c[0]),mi(wi,o,c[1])}r&&yi(wi[o],"sham",!0)},Ei=S,xi=Vn,Oi=no,Li=P,_i=Ei("".charAt),Ti=Ei("".charCodeAt),Mi=Ei("".slice),Ii=function(e){return function(t,n){var r,o,i=Oi(Li(t)),a=xi(n),u=i.length;return a<0||a>=u?e?"":void 0:(r=Ti(i,a))<55296||r>56319||a+1===u||(o=Ti(i,a+1))<56320||o>57343?e?_i(i,a):r:e?Mi(i,a,a+2):o-56320+(r-55296<<10)+65536}},ji={codeAt:Ii(!1),charAt:Ii(!0)}.charAt,Ai=function(e,t,n){return t+(n?ji(e,t).length:1)},Ci=s,Ni=Tt,Pi=q,Di=L,Ri=si,ki=TypeError,Bi=function(e,t){var n=e.exec;if(Pi(n)){var r=Ci(n,e,t);return null!==r&&Ni(r),r}if("RegExp"===Di(e))return Ci(Ri,e,t);throw new ki("RegExp#exec called on incompatible receiver")},Fi=s,$i=Tt,qi=A,Ui=rr,zi=no,Hi=P,Wi=ve,Gi=Ai,Ki=Bi;Si("match",(function(e,t,n){return[function(t){var n=Hi(this),r=qi(t)?void 0:Wi(t,e);return r?Fi(r,t,n):new RegExp(t)[e](zi(n))},function(e){var r=$i(this),o=zi(e),i=n(t,r,o);if(i.done)return i.value;if(!r.global)return Ki(r,o);var a=r.unicode;r.lastIndex=0;for(var u,c=[],s=0;null!==(u=Ki(r,o));){var l=zi(u[0]);c[s]=l,""===l&&(r.lastIndex=Gi(o,Ui(r.lastIndex),a)),s++}return 0===s?null:c}]}));var Yi=o,Ji=Gr,Xi=sr.indexOf,Vi=function(e,t){var n=[][e];return!!n&&Yi((function(){n.call(null,t||function(){return 1},1)}))},Qi=fi([].indexOf),Zi=!!Qi&&1/Qi([1],1,-0)<0;Ji({target:"Array",proto:!0,forced:Zi||!Vi("indexOf")},{indexOf:function(e){var t=arguments.length>1?arguments[1]:void 0;return Zi?Qi(this,e,t)||0:Xi(this,e,t)}});var ea,ta=a,na=Function.prototype,ra=na.apply,oa=na.call,ia="object"==typeof Reflect&&Reflect.apply||(ta?oa.bind(ra):function(){return oa.apply(ra,arguments)}),aa=S,ua=Ne,ca=Math.floor,sa=aa("".charAt),la=aa("".replace),da=aa("".slice),fa=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,pa=/\$([$&'`]|\d{1,2})/g,ma=ia,ha=s,ga=S,va=Si,ya=o,ba=Tt,wa=q,Sa=A,Ea=Vn,xa=rr,Oa=no,La=P,_a=Ai,Ta=ve,Ma=function(e,t,n,r,o,i){var a=n+e.length,u=r.length,c=pa;return void 0!==o&&(o=ua(o),c=fa),la(i,c,(function(i,c){var s;switch(sa(c,0)){case"$":return"$";case"&":return e;case"`":return da(t,0,n);case"'":return da(t,a);case"<":s=o[da(c,1,-1)];break;default:var l=+c;if(0===l)return i;if(l>u){var d=ca(l/10);return 0===d?i:d<=u?void 0===r[d-1]?sa(c,1):r[d-1]+sa(c,1):i}s=r[l-1]}return void 0===s?"":s}))},Ia=Bi,ja=Xe("replace"),Aa=Math.max,Ca=Math.min,Na=ga([].concat),Pa=ga([].push),Da=ga("".indexOf),Ra=ga("".slice),ka="$0"==="a".replace(/./,"$0"),Ba=!!/./[ja]&&""===/./[ja]("a","$0");va("replace",(function(e,t,n){var r=Ba?"$":"$0";return[function(e,n){var r=La(this),o=Sa(e)?void 0:Ta(e,ja);return o?ha(o,e,r,n):ha(t,Oa(r),e,n)},function(e,o){var i=ba(this),a=Oa(e);if("string"==typeof o&&-1===Da(o,r)&&-1===Da(o,"$<")){var u=n(t,i,a,o);if(u.done)return u.value}var c=wa(o);c||(o=Oa(o));var s,l=i.global;l&&(s=i.unicode,i.lastIndex=0);for(var d,f=[];null!==(d=Ia(i,a))&&(Pa(f,d),l);){""===Oa(d[0])&&(i.lastIndex=_a(a,xa(i.lastIndex),s))}for(var p,m="",h=0,g=0;g<f.length;g++){for(var v,y=Oa((d=f[g])[0]),b=Aa(Ca(Ea(d.index),a.length),0),w=[],S=1;S<d.length;S++)Pa(w,void 0===(p=d[S])?p:String(p));var E=d.groups;if(c){var x=Na([y],w,b,a);void 0!==E&&Pa(x,E),v=Oa(ma(o,void 0,x))}else v=Ma(y,a,b,w,E,o);b>=h&&(m+=Ra(a,h,b)+v,h=b+y.length)}return m+Ra(a,h)}]}),!!ya((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}))||!ka||Ba),Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector),Element.prototype.closest||(Element.prototype.closest=function(e){var t=this;if(!document.documentElement.contains(t))return null;do{if(t.matches(e))return t;t=t.parentElement||t.parentNode}while(null!==t&&1===t.nodeType);return null}),(ea=function(){this.options={menuToggleDuration:300},this.init()}).prototype.checkTouchScreen=function(){"ontouchstart"in document.documentElement?document.body.classList.add("ontouch-screen"):document.body.classList.add("not-touch-screen")},ea.prototype.isMobile=function(){return!!(navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/webOS/i)||navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)||navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/Windows Phone/i))},ea.prototype.initMenuSidebar=function(){document.addEventListener("customize_control_sidebar",function(e){"open"===e.detail&&this.toggleMenuSidebar(!1),"close"===e.detail&&this.closeMenuSidebar()}.bind(this)),document.addEventListener("customize_section_opened",function(e){"header_sidebar"===e.detail&&this.toggleMenuSidebar(!1)}.bind(this));var e=document.querySelectorAll(".menu-mobile-toggle");this.addEvent(e,"click",function(e){e.preventDefault(),this.toggleMenuSidebar()}.bind(this));var t=document.querySelectorAll("#header-menu-sidebar .close-panel, .close-sidebar-panel");this.addEvent(t,"click",function(e){e.preventDefault(),this.closeMenuSidebar()}.bind(this)),this.addEvent(document,"click",function(e){if(document.body.classList.contains("is-menu-sidebar")){var t=document.getElementById("header-menu-sidebar"),n=document.querySelectorAll(".menu-mobile-toggle"),r=!1;e.target.closest("#header-menu-sidebar")||e.target===t||(r=!0);var o=!1;if(n.length)for(var i=0;i<n.length;i++)(e.target.closest(".menu-mobile-toggle")||e.target===n[i])&&(o=!0);r&&!o&&this.closeMenuSidebar()}}.bind(this)),this.addEvent(document,"keyup",function(e){27===e.keyCode&&this.closeMenuSidebar()}.bind(this))},ea.prototype.toggleMobileSubmenu=function(e){e.preventDefault();var t=e.target.closest("li"),n=t.querySelectorAll(":scope  > .sub-menu, .sub-lv-0");if(t.classList.contains("open-sub")){if(n.length)for(var r=0;r<n.length;r++)this.slideUp(n[r],this.options.menuToggleDuration,(function(){t.classList.remove("open-sub")}))}else if(t.classList.add("open-sub"),n.length)for(var o=0;o<n.length;o++)this.slideDown(n[o],this.options.menuToggleDuration,(function(){t.classList.add("open-sub")}))},ea.prototype.toggleMobileSubmenuEvents=function(e){e.addEventListener("click",this.toggleMobileSubmenu.bind(this))},ea.prototype.initMobileSubMenu=function(){var e=document.querySelectorAll("#header-menu-sidebar .nav-menu-mobile .menu-item-has-children");if(e.length)for(var t=0;t<e.length;t++){var n=e[t];if(!n.classList.contains("toggle--added")){n.classList.add("toggle--added");var r=n.querySelector(":scope > a"),o=r.cloneNode(!0),i=document.createElement("span");i.classList.add("nav-toggle-icon"),i.innerHTML='<i class="nav-icon-angle"></i>',r.parentNode.insertBefore(i,r);var a=n.querySelector(":scope > .sub-menu");"1"!==HFG_JS.sidebar_menu_no_duplicator&&a.prepend(o);var u=n.querySelectorAll(":scope  > .sub-menu, .sub-lv-0");if(u.length)for(var c=0;c<u.length;c++)this.slideUp(u[c],0);if("1"!==HFG_JS.sidebar_menu_no_duplicator){var s=document.createElement("li");o.parentNode.prepend(s),s.appendChild(o)}this.toggleMobileSubmenuEvents(i)}}},ea.prototype.slideUp=function(e,t,n){"number"!=typeof t&&(t=0),e._slideDownTimeOut&&(clearTimeout(e._slideDownTimeOut),e._slideDownTimeOut=!1);var r=e.getBoundingClientRect();e.style.overflow="hidden",e.style.height=r.height+"px",e.style.transition="height "+t+"ms linear",setTimeout((function(){e.style.height="0px"}),20),e._sideUpTimeOut=setTimeout((function(){e.style.transition="","function"==typeof n&&n.call(this)}),t+20)},ea.prototype.slideDown=function(e,t,n){"number"!=typeof t&&(t=0),e._sideUpTimeOut&&(clearTimeout(e._sideUpTimeOut),e._sideUpTimeOut=!1),e.style.height="initial",e.style.overflow="initial",e.style.transition="";var r=e.getBoundingClientRect();e.style.height="0px",e.style.overflow="hidden",e.style.transition="height "+t+"ms linear",setTimeout((function(){e.style.height=r.height+"px"}),50),e._sideUpTimeOut=setTimeout((function(){e.style.height="",e.style.overflow="",e.style.transition="","function"==typeof n&&n.call(this)}),t)},ea.prototype.insertMenuOverlayClass=function(){var e=document.querySelector(".nav-menu-mobile");e&&(document.body.classList.contains("menu_sidebar_slide_overlay")?e.classList.add("nav-menu-overlay"):e.classList.remove("nav-menu-overlay"))},ea.prototype.toggleClass=function(e,t){if(e instanceof NodeList)for(var n=0;n<e.length;n++)e[n].classList.contains(t)?e[n].classList.remove(t):e[n].classList.add(t);else(e instanceof Node||e instanceof Element)&&(e.classList.contains(t)?e.classList.remove(t):e.classList.add(t))},ea.prototype.addClass=function(e,t){if(e instanceof NodeList)for(var n=0;n<e.length;n++)e[n].classList.add(t);else(e instanceof Node||e instanceof Element)&&e.classList.add(t)},ea.prototype.removeClass=function(e,t){var n=t.split(" ");if(e instanceof NodeList)for(var r=0;r<e.length;r++)for(var o=0;o<n.length;o++)e[r].classList.remove(n[o]);else if(e instanceof Node||e instanceof Element)for(var i=0;i<n.length;i++)e.classList.remove(n[i])},ea.prototype.addEvent=function(e,t,n){if(e instanceof NodeList)for(var r=0;r<e.length;r++)e[r].addEventListener(t,n);else(e instanceof Node||e instanceof Element)&&e.addEventListener(t,n)},ea.prototype.closeMenuSidebar=function(){document.body.classList.add("hiding-header-menu-sidebar"),document.body.classList.remove("is-menu-sidebar");var e=document.querySelectorAll(".menu-mobile-toggle, .menu-mobile-toggle .hamburger");if(this.removeClass(e,"is-active"),document.body.classList.contains("menu_sidebar_dropdown")){this.removeClass(document.body,"hiding-header-menu-sidebar");var t=document.getElementById("header-menu-sidebar");this.slideUp(t,300,function(){t.style.height=0,t.style.display="block"}.bind(this))}else setTimeout(function(){this.removeClass(document.body,"hiding-header-menu-sidebar")}.bind(this),1e3)},ea.prototype.toggleMenuSidebar=function(e){if(void 0===e&&(e=!0),document.body.classList.remove("hiding-header-menu-sidebar"),e?this.toggleClass(document.body,"is-menu-sidebar"):document.body.classList.add("is-menu-sidebar"),document.body.classList.contains("menu_sidebar_dropdown")){var t=document.querySelectorAll(".menu-mobile-toggle, .menu-mobile-toggle .hamburger");if(e?this.toggleClass(t,"is-active"):this.addClass(t,"is-active"),document.body.classList.contains("is-menu-sidebar")){var n=document.getElementById("header-menu-sidebar"),r=document.getElementById("header-menu-sidebar-inner").getBoundingClientRect().height;this.slideDown(n,300,(function(){n.style.height=r+"px"}))}else e&&this.closeMenuSidebar()}},ea.prototype.wrapper=function(e,t){void 0===t&&(t="div");var n=document.createElement(t);return e.parentNode.replaceChild(n,e),n.appendChild(e),n},ea.prototype.init=function(){this.checkTouchScreen(),this.insertMenuOverlayClass(),this.initMenuSidebar(),document.addEventListener("header_builder_panel_changed",function(){this.initMenuSidebar(),this.initMobileSubMenu(),this.insertMenuOverlayClass()}.bind(this)),window.addEventListener("resize",function(){this.removeClass(document.querySelectorAll(".header-search_icon-item"),"active")}.bind(this))},window.hfg_is_mobile=function(){return ea.isMobile()},window.HFG=new ea,function(){if(window.HFG.isMobile()){var e=.01*window.innerHeight,t=.01*window.innerWidth;document.documentElement.style.setProperty("--vh",e+"px"),document.documentElement.style.setProperty("--vw",t+"px"),window.addEventListener("resize",(function(){var e=.01*window.innerHeight,t=.01*window.innerWidth;document.documentElement.style.setProperty("--vh",e+"px"),document.documentElement.style.setProperty("--vw",t+"px")}))}}(),function(){var e,t,n,r,o;if((e=document.getElementById("site-navigation-main-desktop"))&&void 0!==(t=e.getElementsByTagName("ul")[0])){for(t.setAttribute("aria-expanded","false"),-1===t.className.indexOf("nav-menu")&&(t.className+=" nav-menu"),r=0,o=(n=t.getElementsByTagName("a")).length;r<o;r++)n[r].addEventListener("focus",i,!0),n[r].addEventListener("blur",i,!0);!function(e){var t,n,r=e.querySelectorAll(".menu-item-has-children > a, .page_item_has_children > a");if("ontouchstart"in window)for(t=function(e){var t,n=this.parentNode;if(n.classList.contains("focus"))n.classList.remove("focus");else{for(e.preventDefault(),t=0;t<n.parentNode.children.length;++t)n!==n.parentNode.children[t]&&n.parentNode.children[t].classList.remove("focus");n.classList.add("focus")}},n=0;n<r.length;++n)r[n].addEventListener("touchstart",t,!1)}(e)}function i(){for(var e=this;-1===e.className.indexOf("nav-menu");)"li"===e.tagName.toLowerCase()&&(-1!==e.className.indexOf("focus")?e.className=e.className.replace(" focus",""):e.className+=" focus"),e=e.parentElement}}(),/(trident|msie)/i.test(navigator.userAgent)&&document.getElementById&&window.addEventListener&&window.addEventListener("hashchange",(function(){var e,t=location.hash.substring(1);/^[A-z0-9_-]+$/.test(t)&&(e=document.getElementById(t))&&(/^(?:a|select|input|button|textarea)$/i.test(e.tagName)||(e.tabIndex=-1),e.focus())}),!1)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
