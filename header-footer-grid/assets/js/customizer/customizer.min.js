!function(){"use strict";var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},t=function(e){return e&&e.Math===Math&&e},n=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof e&&e)||function(){return this}()||e||Function("return this")(),r={},o=function(e){try{return!!e()}catch(e){return!0}},i=!o((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]})),u=!o((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")})),a=u,c=Function.prototype.call,s=a?c.bind(c):function(){return c.apply(c,arguments)},f={},l={}.propertyIsEnumerable,d=Object.getOwnPropertyDescriptor,p=d&&!l.call({1:2},1);f.f=p?function(e){var t=d(this,e);return!!t&&t.enumerable}:l;var b,m,h=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},v=u,y=Function.prototype,g=y.call,w=v&&y.bind.bind(g,g),O=v?w:function(e){return function(){return g.apply(e,arguments)}},S=O,j=S({}.toString),E=S("".slice),P=function(e){return E(j(e),8,-1)},z=o,C=P,x=Object,T=O("".split),k=z((function(){return!x("z").propertyIsEnumerable(0)}))?function(e){return"String"===C(e)?T(e,""):x(e)}:x,D=function(e){return null==e},M=D,I=TypeError,F=function(e){if(M(e))throw new I("Can't call method on "+e);return e},L=k,A=F,R=function(e){return L(A(e))},N="object"==typeof document&&document.all,U={all:N,IS_HTMLDDA:void 0===N&&void 0!==N},G=U.all,H=U.IS_HTMLDDA?function(e){return"function"==typeof e||e===G}:function(e){return"function"==typeof e},K=H,W=U.all,q=U.IS_HTMLDDA?function(e){return"object"==typeof e?null!==e:K(e)||e===W}:function(e){return"object"==typeof e?null!==e:K(e)},B=n,Q=H,V=function(e,t){return arguments.length<2?(n=B[e],Q(n)?n:void 0):B[e]&&B[e][t];var n},X=O({}.isPrototypeOf),Y=n,$="undefined"!=typeof navigator&&String(navigator.userAgent)||"",J=Y.process,Z=Y.Deno,ee=J&&J.versions||Z&&Z.version,te=ee&&ee.v8;te&&(m=(b=te.split("."))[0]>0&&b[0]<4?1:+(b[0]+b[1])),!m&&$&&(!(b=$.match(/Edge\/(\d+)/))||b[1]>=74)&&(b=$.match(/Chrome\/(\d+)/))&&(m=+b[1]);var ne=m,re=o,oe=n.String,ie=!!Object.getOwnPropertySymbols&&!re((function(){var e=Symbol("symbol detection");return!oe(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&ne&&ne<41})),ue=ie&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,ae=V,ce=H,se=X,fe=Object,le=ue?function(e){return"symbol"==typeof e}:function(e){var t=ae("Symbol");return ce(t)&&se(t.prototype,fe(e))},de=String,pe=H,be=function(e){try{return de(e)}catch(e){return"Object"}},me=TypeError,he=function(e){if(pe(e))return e;throw new me(be(e)+" is not a function")},ve=D,ye=s,ge=H,we=q,_e=TypeError,Oe={exports:{}},Se=n,je=Object.defineProperty,Ee=function(e,t){try{je(Se,e,{value:t,configurable:!0,writable:!0})}catch(n){Se[e]=t}return t},Pe=Ee,ze="__core-js_shared__",Ce=n[ze]||Pe(ze,{}),xe=Ce;(Oe.exports=function(e,t){return xe[e]||(xe[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.33.2",mode:"global",copyright:"Â© 2014-2023 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.33.2/LICENSE",source:"https://github.com/zloirock/core-js"});var Te=Oe.exports,ke=F,De=Object,Me=function(e){return De(ke(e))},Ie=O({}.hasOwnProperty),Fe=Object.hasOwn||function(e,t){return Ie(Me(e),t)},Le=O,Ae=0,Re=Math.random(),Ne=Le(1..toString),Ue=function(e){return"Symbol("+(void 0===e?"":e)+")_"+Ne(++Ae+Re,36)},Ge=Te,He=Fe,Ke=Ue,We=ie,qe=ue,Be=n.Symbol,Qe=Ge("wks"),Ve=qe?Be.for||Be:Be&&Be.withoutSetter||Ke,Xe=s,Ye=q,$e=le,Je=function(e,t){var n=e[t];return ve(n)?void 0:he(n)},Ze=function(e,t){var n,r;if("string"===t&&ge(n=e.toString)&&!we(r=ye(n,e)))return r;if(ge(n=e.valueOf)&&!we(r=ye(n,e)))return r;if("string"!==t&&ge(n=e.toString)&&!we(r=ye(n,e)))return r;throw new _e("Can't convert object to primitive value")},et=TypeError,tt=function(e){return He(Qe,e)||(Qe[e]=We&&He(Be,e)?Be[e]:Ve("Symbol."+e)),Qe[e]}("toPrimitive"),nt=function(e,t){if(!Ye(e)||$e(e))return e;var n,r=Je(e,tt);if(r){if(void 0===t&&(t="default"),n=Xe(r,e,t),!Ye(n)||$e(n))return n;throw new et("Can't convert object to primitive value")}return void 0===t&&(t="number"),Ze(e,t)},rt=le,ot=function(e){var t=nt(e,"string");return rt(t)?t:t+""},it=q,ut=n.document,at=it(ut)&&it(ut.createElement),ct=function(e){return at?ut.createElement(e):{}},st=!i&&!o((function(){return 7!==Object.defineProperty(ct("div"),"a",{get:function(){return 7}}).a})),ft=i,lt=s,dt=f,pt=h,bt=R,mt=ot,ht=Fe,vt=st,yt=Object.getOwnPropertyDescriptor;r.f=ft?yt:function(e,t){if(e=bt(e),t=mt(t),vt)try{return yt(e,t)}catch(e){}if(ht(e,t))return pt(!lt(dt.f,e,t),e[t])};var gt={},wt=i&&o((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype})),_t=q,Ot=String,St=TypeError,jt=function(e){if(_t(e))return e;throw new St(Ot(e)+" is not an object")},Et=i,Pt=st,zt=wt,Ct=jt,xt=ot,Tt=TypeError,kt=Object.defineProperty,Dt=Object.getOwnPropertyDescriptor,Mt="enumerable",It="configurable",Ft="writable";gt.f=Et?zt?function(e,t,n){if(Ct(e),t=xt(t),Ct(n),"function"==typeof e&&"prototype"===t&&"value"in n&&Ft in n&&!n[Ft]){var r=Dt(e,t);r&&r[Ft]&&(e[t]=n.value,n={configurable:It in n?n[It]:r[It],enumerable:Mt in n?n[Mt]:r[Mt],writable:!1})}return kt(e,t,n)}:kt:function(e,t,n){if(Ct(e),t=xt(t),Ct(n),Pt)try{return kt(e,t,n)}catch(e){}if("get"in n||"set"in n)throw new Tt("Accessors not supported");return"value"in n&&(e[t]=n.value),e};var Lt=gt,At=h,Rt=i?function(e,t,n){return Lt.f(e,t,At(1,n))}:function(e,t,n){return e[t]=n,e},Nt={exports:{}},Ut=i,Gt=Fe,Ht=Function.prototype,Kt=Ut&&Object.getOwnPropertyDescriptor,Wt=Gt(Ht,"name"),qt={EXISTS:Wt,PROPER:Wt&&"something"===function(){}.name,CONFIGURABLE:Wt&&(!Ut||Ut&&Kt(Ht,"name").configurable)},Bt=H,Qt=Ce,Vt=O(Function.toString);Bt(Qt.inspectSource)||(Qt.inspectSource=function(e){return Vt(e)});var Xt,Yt,$t,Jt=Qt.inspectSource,Zt=H,en=n.WeakMap,tn=Zt(en)&&/native code/.test(String(en)),nn=Ue,rn=Te("keys"),on={},un=tn,an=n,cn=q,sn=Rt,fn=Fe,ln=Ce,dn=function(e){return rn[e]||(rn[e]=nn(e))},pn=on,bn="Object already initialized",mn=an.TypeError,hn=an.WeakMap;if(un||ln.state){var vn=ln.state||(ln.state=new hn);vn.get=vn.get,vn.has=vn.has,vn.set=vn.set,Xt=function(e,t){if(vn.has(e))throw new mn(bn);return t.facade=e,vn.set(e,t),t},Yt=function(e){return vn.get(e)||{}},$t=function(e){return vn.has(e)}}else{var yn=dn("state");pn[yn]=!0,Xt=function(e,t){if(fn(e,yn))throw new mn(bn);return t.facade=e,sn(e,yn,t),t},Yt=function(e){return fn(e,yn)?e[yn]:{}},$t=function(e){return fn(e,yn)}}var gn={set:Xt,get:Yt,has:$t,enforce:function(e){return $t(e)?Yt(e):Xt(e,{})},getterFor:function(e){return function(t){var n;if(!cn(t)||(n=Yt(t)).type!==e)throw new mn("Incompatible receiver, "+e+" required");return n}}},wn=O,_n=o,On=H,Sn=Fe,jn=i,En=qt.CONFIGURABLE,Pn=Jt,zn=gn.enforce,Cn=gn.get,xn=String,Tn=Object.defineProperty,kn=wn("".slice),Dn=wn("".replace),Mn=wn([].join),In=jn&&!_n((function(){return 8!==Tn((function(){}),"length",{value:8}).length})),Fn=String(String).split("String"),Ln=Nt.exports=function(e,t,n){"Symbol("===kn(xn(t),0,7)&&(t="["+Dn(xn(t),/^Symbol\(([^)]*)\)/,"$1")+"]"),n&&n.getter&&(t="get "+t),n&&n.setter&&(t="set "+t),(!Sn(e,"name")||En&&e.name!==t)&&(jn?Tn(e,"name",{value:t,configurable:!0}):e.name=t),In&&n&&Sn(n,"arity")&&e.length!==n.arity&&Tn(e,"length",{value:n.arity});try{n&&Sn(n,"constructor")&&n.constructor?jn&&Tn(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var r=zn(e);return Sn(r,"source")||(r.source=Mn(Fn,"string"==typeof t?t:"")),e};Function.prototype.toString=Ln((function(){return On(this)&&Cn(this).source||Pn(this)}),"toString");var An=Nt.exports,Rn=H,Nn=gt,Un=An,Gn=Ee,Hn={},Kn=Math.ceil,Wn=Math.floor,qn=Math.trunc||function(e){var t=+e;return(t>0?Wn:Kn)(t)},Bn=function(e){var t=+e;return t!=t||0===t?0:qn(t)},Qn=Bn,Vn=Math.max,Xn=Math.min,Yn=Bn,$n=Math.min,Jn=function(e){return e>0?$n(Yn(e),9007199254740991):0},Zn=R,er=function(e,t){var n=Qn(e);return n<0?Vn(n+t,0):Xn(n,t)},tr=function(e){return Jn(e.length)},nr=function(e){return function(t,n,r){var o,i=Zn(t),u=tr(i),a=er(r,u);if(e&&n!=n){for(;u>a;)if((o=i[a++])!=o)return!0}else for(;u>a;a++)if((e||a in i)&&i[a]===n)return e||a||0;return!e&&-1}},rr={includes:nr(!0),indexOf:nr(!1)},or=Fe,ir=R,ur=rr.indexOf,ar=on,cr=O([].push),sr=function(e,t){var n,r=ir(e),o=0,i=[];for(n in r)!or(ar,n)&&or(r,n)&&cr(i,n);for(;t.length>o;)or(r,n=t[o++])&&(~ur(i,n)||cr(i,n));return i},fr=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"].concat("length","prototype");Hn.f=Object.getOwnPropertyNames||function(e){return sr(e,fr)};var lr={};lr.f=Object.getOwnPropertySymbols;var dr=V,pr=Hn,br=lr,mr=jt,hr=O([].concat),vr=dr("Reflect","ownKeys")||function(e){var t=pr.f(mr(e)),n=br.f;return n?hr(t,n(e)):t},yr=Fe,gr=vr,wr=r,_r=gt,Or=o,Sr=H,jr=/#|\.prototype\./,Er=function(e,t){var n=zr[Pr(e)];return n===xr||n!==Cr&&(Sr(t)?Or(t):!!t)},Pr=Er.normalize=function(e){return String(e).replace(jr,".").toLowerCase()},zr=Er.data={},Cr=Er.NATIVE="N",xr=Er.POLYFILL="P",Tr=Er,kr=n,Dr=r.f,Mr=Rt,Ir=function(e,t,n,r){r||(r={});var o=r.enumerable,i=void 0!==r.name?r.name:t;if(Rn(n)&&Un(n,i,r),r.global)o?e[t]=n:Gn(t,n);else{try{r.unsafe?e[t]&&(o=!0):delete e[t]}catch(e){}o?e[t]=n:Nn.f(e,t,{value:n,enumerable:!1,configurable:!r.nonConfigurable,writable:!r.nonWritable})}return e},Fr=Ee,Lr=function(e,t,n){for(var r=gr(t),o=_r.f,i=wr.f,u=0;u<r.length;u++){var a=r[u];yr(e,a)||n&&yr(n,a)||o(e,a,i(t,a))}},Ar=Tr,Rr=P,Nr=O,Ur=o,Gr=function(e,t){var n,r,o,i,u,a=e.target,c=e.global,s=e.stat;if(n=c?kr:s?kr[a]||Fr(a,{}):(kr[a]||{}).prototype)for(r in t){if(i=t[r],o=e.dontCallGetSet?(u=Dr(n,r))&&u.value:n[r],!Ar(c?r:a+(s?".":"#")+r,e.forced)&&void 0!==o){if(typeof i==typeof o)continue;Lr(i,o)}(e.sham||o&&o.sham)&&Mr(i,"sham",!0),Ir(n,r,i,e)}},Hr=rr.indexOf,Kr=function(e,t){var n=[][e];return!!n&&Ur((function(){n.call(null,t||function(){return 1},1)}))},Wr=function(e){if("Function"===Rr(e))return Nr(e)}([].indexOf),qr=!!Wr&&1/Wr([1],1,-0)<0;Gr({target:"Array",proto:!0,forced:qr||!Kr("indexOf")},{indexOf:function(e){var t=arguments.length>1?arguments[1]:void 0;return qr?Wr(this,e,t)||0:Hr(this,e,t)}}),function(e,t){var n=e(document),r=function(e,t,n){var r;window.CustomEvent?r=new CustomEvent(t,n):(r=document.createEvent("CustomEvent")).initCustomEvent(t,!0,!0,n),e.dispatchEvent(r)},o=function(t,n){if(_.isUndefined(n)&&(n=!1),"header_builder_panel"===t||"hfg_customize_render_header"===t){var o=e("body").hasClass("menu_sidebar_dropdown");e(".close-sidebar-panel").not(":last").remove(),o||e(".header-menu-sidebar").not(":last").remove(),n&&e("body > .header-menu-sidebar, #page > .header-menu-sidebar").remove(),o?(e("#masthead").append(e("#header-menu-sidebar")),e("body").hasClass("is-menu-sidebar")&&e("#header-menu-sidebar").css({display:"block",height:"auto"})):e("body").prepend(e("#header-menu-sidebar"))}var i=e("#masthead");if(e(".search-form--mobile",i).length){n&&e(".mobile-search-form-sidebar").remove();var u=e(".search-form--mobile").eq(0);u.addClass("mobile-search-form-sidebar").removeClass("hide-on-mobile hide-on-tablet"),e("body").prepend(u)}r(document,"header_builder_panel_changed",{bubbles:!0,detail:{partial_id:t}})};wp.customize("header_textcolor",(function(t){t.bind((function(t){"blank"===t?e(".site-title, .site-description").css({clip:"rect(1px, 1px, 1px, 1px)",position:"absolute"}):(e(".site-title, .site-description").css({clip:"auto",position:"relative"}),e(".site-title a, .site-description").css({color:t}))}))})),t.bind("preview-ready",(function(){t.preview.bind("header_builder_panel_changed",(function(){r(document,"header_builder_panel_changed",{bubbles:!0,detail:"open"})})),t.preview.bind("header_sidebar_open",(function(){r(document,"customize_control_sidebar",{bubbles:!0,detail:"open"})})),t.preview.bind("header_sidebar_close",(function(){r(document,"customize_control_sidebar",{bubbles:!0,detail:"close"})}))})),wp.customize("header_sidebar_animate",(function(t){console.log("header_sidebar_animate -- triggered"),t.bind((function(t){o("header_builder_panel",!1),r(document,"customize_section_opened",{bubbles:!0,detail:"header_sidebar"}),t.indexOf("menu_sidebar_dropdown")>1?e(".menu-mobile-toggle, .menu-mobile-toggle .hamburger").addClass("is-active"):e(".menu-mobile-toggle, .menu-mobile-toggle .hamburger").removeClass("is-active")}))})),t.bind("preview-ready",(function(){var t=window.parent===window?null:window.parent;t.wp.customize.state("expandedSection").bind((function(e){e&&!_.isUndefined(e.id)?r(document,"customize_section_opened",{bubbles:!0,detail:e.id}):r(document,"customize_section_opened",{bubbles:!0,detail:"__no_section_selected"})})),n.on("click","#masthead .customize-partial-edit-shortcut-header_panel",(function(e){e.preventDefault(),t.wp.customize.panel("header_settings").focus()})),n.on("click",".builder-item-focus .item--preview-name, .builder-item-focus .edit-row-action",(function(n){n.preventDefault(),n.stopPropagation();var r=e(this).closest(".builder-item-focus").attr("data-section")||"";r&&t.wp.customize.section(r)&&t.wp.customize.section(r).focus()})),n.on("click",".navbar-toggle",(function(e){wp.customize.preview.send("neve-toggle-navbar",{status:document.body.classList.contains("is-menu-sidebar")})})),n.on("click",".builder-item-focus",(function(n){if(!n.shiftKey)return!1;n.preventDefault(),n.stopPropagation();var r=e(this).closest(".builder-item-focus").attr("data-section")||"";if(!r)return!1;t.wp.customize.section(r).focus()})),wp.customize.selectiveRefresh.bind("partial-content-rendered",(function(e){r(document,"selective-refresh-content-rendered",{bubbles:!0,detail:e.partial.id}),o(e.partial.id)}))}));var i={hfg_customize_render_header:1,hfg_customize_render_footer:1};wp.customize.selectiveRefresh.Partial.prototype.ready=function(){var t=this;_.isUndefined(i[t.id])&&(_.each(t.placements(),(function(n){e(n.container).attr("title",wp.customize.selectiveRefresh.data.l10n.shiftClickToEdit),t.createEditShortcutForPlacement(n)})),e(document).on("click",t.params.selector,(function(n){n.shiftKey&&(n.preventDefault(),_.each(t.placements(),(function(r){e(r.container).is(n.currentTarget)&&t.showControl()})))})))}}(jQuery,wp.customize)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
