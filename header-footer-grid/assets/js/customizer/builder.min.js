!function(){"use strict";function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t(e)}var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},n=function(t){return t&&t.Math===Math&&t},r=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof e&&e)||function(){return this}()||e||Function("return this")(),i={},o=function(t){try{return!!t()}catch(t){return!0}},a=!o((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]})),c=!o((function(){var t=function(){}.bind();return"function"!=typeof t||t.hasOwnProperty("prototype")})),s=c,l=Function.prototype.call,f=s?l.bind(l):function(){return l.apply(l,arguments)},u={},d={}.propertyIsEnumerable,g=Object.getOwnPropertyDescriptor,v=g&&!d.call({1:2},1);u.f=v?function(t){var e=g(this,t);return!!e&&e.enumerable}:d;var h,p,m=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}},b=c,w=Function.prototype,y=w.call,x=b&&w.bind.bind(y,y),S=b?x:function(t){return function(){return y.apply(t,arguments)}},C=S,O=C({}.toString),I=C("".slice),A=function(t){return I(O(t),8,-1)},k=o,P=A,j=Object,E=S("".split),D=k((function(){return!j("z").propertyIsEnumerable(0)}))?function(t){return"String"===P(t)?E(t,""):j(t)}:j,T=function(t){return null==t},R=T,F=TypeError,z=function(t){if(R(t))throw new F("Can't call method on "+t);return t},M=D,W=z,L=function(t){return M(W(t))},N="object"==typeof document&&document.all,G={all:N,IS_HTMLDDA:void 0===N&&void 0!==N},$=G.all,U=G.IS_HTMLDDA?function(t){return"function"==typeof t||t===$}:function(t){return"function"==typeof t},B=U,H=G.all,X=G.IS_HTMLDDA?function(t){return"object"==typeof t?null!==t:B(t)||t===H}:function(t){return"object"==typeof t?null!==t:B(t)},V=r,J=U,K=function(t,e){return arguments.length<2?(n=V[t],J(n)?n:void 0):V[t]&&V[t][e];var n},Q=S({}.isPrototypeOf),Y="undefined"!=typeof navigator&&String(navigator.userAgent)||"",q=r,Z=Y,tt=q.process,et=q.Deno,nt=tt&&tt.versions||et&&et.version,rt=nt&&nt.v8;rt&&(p=(h=rt.split("."))[0]>0&&h[0]<4?1:+(h[0]+h[1])),!p&&Z&&(!(h=Z.match(/Edge\/(\d+)/))||h[1]>=74)&&(h=Z.match(/Chrome\/(\d+)/))&&(p=+h[1]);var it=p,ot=it,at=o,ct=r.String,st=!!Object.getOwnPropertySymbols&&!at((function(){var t=Symbol("symbol detection");return!ct(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&ot&&ot<41})),lt=st&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,ft=K,ut=U,dt=Q,gt=Object,vt=lt?function(t){return"symbol"==typeof t}:function(t){var e=ft("Symbol");return ut(e)&&dt(e.prototype,gt(t))},ht=String,pt=function(t){try{return ht(t)}catch(t){return"Object"}},mt=U,bt=pt,wt=TypeError,yt=function(t){if(mt(t))return t;throw new wt(bt(t)+" is not a function")},xt=yt,_t=T,St=function(t,e){var n=t[e];return _t(n)?void 0:xt(n)},Ct=f,Ot=U,It=X,At=TypeError,kt={exports:{}},Pt=r,jt=Object.defineProperty,Et=function(t,e){try{jt(Pt,t,{value:e,configurable:!0,writable:!0})}catch(n){Pt[t]=e}return e},Dt=Et,Tt="__core-js_shared__",Rt=r[Tt]||Dt(Tt,{}),Ft=Rt;(kt.exports=function(t,e){return Ft[t]||(Ft[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.33.2",mode:"global",copyright:"Â© 2014-2023 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.33.2/LICENSE",source:"https://github.com/zloirock/core-js"});var zt=kt.exports,Mt=z,Wt=Object,Lt=function(t){return Wt(Mt(t))},Nt=Lt,Gt=S({}.hasOwnProperty),$t=Object.hasOwn||function(t,e){return Gt(Nt(t),e)},Ut=S,Bt=0,Ht=Math.random(),Xt=Ut(1..toString),Vt=function(t){return"Symbol("+(void 0===t?"":t)+")_"+Xt(++Bt+Ht,36)},Jt=zt,Kt=$t,Qt=Vt,Yt=st,qt=lt,Zt=r.Symbol,te=Jt("wks"),ee=qt?Zt.for||Zt:Zt&&Zt.withoutSetter||Qt,ne=function(t){return Kt(te,t)||(te[t]=Yt&&Kt(Zt,t)?Zt[t]:ee("Symbol."+t)),te[t]},re=f,ie=X,oe=vt,ae=St,ce=function(t,e){var n,r;if("string"===e&&Ot(n=t.toString)&&!It(r=Ct(n,t)))return r;if(Ot(n=t.valueOf)&&!It(r=Ct(n,t)))return r;if("string"!==e&&Ot(n=t.toString)&&!It(r=Ct(n,t)))return r;throw new At("Can't convert object to primitive value")},se=TypeError,le=ne("toPrimitive"),fe=function(t,e){if(!ie(t)||oe(t))return t;var n,r=ae(t,le);if(r){if(void 0===e&&(e="default"),n=re(r,t,e),!ie(n)||oe(n))return n;throw new se("Can't convert object to primitive value")}return void 0===e&&(e="number"),ce(t,e)},ue=vt,de=function(t){var e=fe(t,"string");return ue(e)?e:e+""},ge=X,ve=r.document,he=ge(ve)&&ge(ve.createElement),pe=function(t){return he?ve.createElement(t):{}},me=pe,be=!a&&!o((function(){return 7!==Object.defineProperty(me("div"),"a",{get:function(){return 7}}).a})),we=a,ye=f,xe=u,_e=m,Se=L,Ce=de,Oe=$t,Ie=be,Ae=Object.getOwnPropertyDescriptor;i.f=we?Ae:function(t,e){if(t=Se(t),e=Ce(e),Ie)try{return Ae(t,e)}catch(t){}if(Oe(t,e))return _e(!ye(xe.f,t,e),t[e])};var ke={},Pe=a&&o((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype})),je=X,Ee=String,De=TypeError,Te=function(t){if(je(t))return t;throw new De(Ee(t)+" is not an object")},Re=a,Fe=be,ze=Pe,Me=Te,We=de,Le=TypeError,Ne=Object.defineProperty,Ge=Object.getOwnPropertyDescriptor,$e="enumerable",Ue="configurable",Be="writable";ke.f=Re?ze?function(t,e,n){if(Me(t),e=We(e),Me(n),"function"==typeof t&&"prototype"===e&&"value"in n&&Be in n&&!n[Be]){var r=Ge(t,e);r&&r[Be]&&(t[e]=n.value,n={configurable:Ue in n?n[Ue]:r[Ue],enumerable:$e in n?n[$e]:r[$e],writable:!1})}return Ne(t,e,n)}:Ne:function(t,e,n){if(Me(t),e=We(e),Me(n),Fe)try{return Ne(t,e,n)}catch(t){}if("get"in n||"set"in n)throw new Le("Accessors not supported");return"value"in n&&(t[e]=n.value),t};var He=ke,Xe=m,Ve=a?function(t,e,n){return He.f(t,e,Xe(1,n))}:function(t,e,n){return t[e]=n,t},Je={exports:{}},Ke=a,Qe=$t,Ye=Function.prototype,qe=Ke&&Object.getOwnPropertyDescriptor,Ze=Qe(Ye,"name"),tn={EXISTS:Ze,PROPER:Ze&&"something"===function(){}.name,CONFIGURABLE:Ze&&(!Ke||Ke&&qe(Ye,"name").configurable)},en=U,nn=Rt,rn=S(Function.toString);en(nn.inspectSource)||(nn.inspectSource=function(t){return rn(t)});var on,an,cn,sn=nn.inspectSource,ln=U,fn=r.WeakMap,un=ln(fn)&&/native code/.test(String(fn)),dn=Vt,gn=zt("keys"),vn=function(t){return gn[t]||(gn[t]=dn(t))},hn={},pn=un,mn=r,bn=X,wn=Ve,yn=$t,xn=Rt,_n=vn,Sn=hn,Cn="Object already initialized",On=mn.TypeError,In=mn.WeakMap;if(pn||xn.state){var An=xn.state||(xn.state=new In);An.get=An.get,An.has=An.has,An.set=An.set,on=function(t,e){if(An.has(t))throw new On(Cn);return e.facade=t,An.set(t,e),e},an=function(t){return An.get(t)||{}},cn=function(t){return An.has(t)}}else{var kn=_n("state");Sn[kn]=!0,on=function(t,e){if(yn(t,kn))throw new On(Cn);return e.facade=t,wn(t,kn,e),e},an=function(t){return yn(t,kn)?t[kn]:{}},cn=function(t){return yn(t,kn)}}var Pn={set:on,get:an,has:cn,enforce:function(t){return cn(t)?an(t):on(t,{})},getterFor:function(t){return function(e){var n;if(!bn(e)||(n=an(e)).type!==t)throw new On("Incompatible receiver, "+t+" required");return n}}},jn=S,En=o,Dn=U,Tn=$t,Rn=a,Fn=tn.CONFIGURABLE,zn=sn,Mn=Pn.enforce,Wn=Pn.get,Ln=String,Nn=Object.defineProperty,Gn=jn("".slice),$n=jn("".replace),Un=jn([].join),Bn=Rn&&!En((function(){return 8!==Nn((function(){}),"length",{value:8}).length})),Hn=String(String).split("String"),Xn=Je.exports=function(t,e,n){"Symbol("===Gn(Ln(e),0,7)&&(e="["+$n(Ln(e),/^Symbol\(([^)]*)\)/,"$1")+"]"),n&&n.getter&&(e="get "+e),n&&n.setter&&(e="set "+e),(!Tn(t,"name")||Fn&&t.name!==e)&&(Rn?Nn(t,"name",{value:e,configurable:!0}):t.name=e),Bn&&n&&Tn(n,"arity")&&t.length!==n.arity&&Nn(t,"length",{value:n.arity});try{n&&Tn(n,"constructor")&&n.constructor?Rn&&Nn(t,"prototype",{writable:!1}):t.prototype&&(t.prototype=void 0)}catch(t){}var r=Mn(t);return Tn(r,"source")||(r.source=Un(Hn,"string"==typeof e?e:"")),t};Function.prototype.toString=Xn((function(){return Dn(this)&&Wn(this).source||zn(this)}),"toString");var Vn=Je.exports,Jn=U,Kn=ke,Qn=Vn,Yn=Et,qn=function(t,e,n,r){r||(r={});var i=r.enumerable,o=void 0!==r.name?r.name:e;if(Jn(n)&&Qn(n,o,r),r.global)i?t[e]=n:Yn(e,n);else{try{r.unsafe?t[e]&&(i=!0):delete t[e]}catch(t){}i?t[e]=n:Kn.f(t,e,{value:n,enumerable:!1,configurable:!r.nonConfigurable,writable:!r.nonWritable})}return t},Zn={},tr=Math.ceil,er=Math.floor,nr=Math.trunc||function(t){var e=+t;return(e>0?er:tr)(e)},rr=function(t){var e=+t;return e!=e||0===e?0:nr(e)},ir=rr,or=Math.max,ar=Math.min,cr=function(t,e){var n=ir(t);return n<0?or(n+e,0):ar(n,e)},sr=rr,lr=Math.min,fr=function(t){return t>0?lr(sr(t),9007199254740991):0},ur=fr,dr=function(t){return ur(t.length)},gr=L,vr=cr,hr=dr,pr=function(t){return function(e,n,r){var i,o=gr(e),a=hr(o),c=vr(r,a);if(t&&n!=n){for(;a>c;)if((i=o[c++])!=i)return!0}else for(;a>c;c++)if((t||c in o)&&o[c]===n)return t||c||0;return!t&&-1}},mr={includes:pr(!0),indexOf:pr(!1)},br=$t,wr=L,yr=mr.indexOf,xr=hn,_r=S([].push),Sr=function(t,e){var n,r=wr(t),i=0,o=[];for(n in r)!br(xr,n)&&br(r,n)&&_r(o,n);for(;e.length>i;)br(r,n=e[i++])&&(~yr(o,n)||_r(o,n));return o},Cr=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],Or=Sr,Ir=Cr.concat("length","prototype");Zn.f=Object.getOwnPropertyNames||function(t){return Or(t,Ir)};var Ar={};Ar.f=Object.getOwnPropertySymbols;var kr=K,Pr=Zn,jr=Ar,Er=Te,Dr=S([].concat),Tr=kr("Reflect","ownKeys")||function(t){var e=Pr.f(Er(t)),n=jr.f;return n?Dr(e,n(t)):e},Rr=$t,Fr=Tr,zr=i,Mr=ke,Wr=function(t,e,n){for(var r=Fr(e),i=Mr.f,o=zr.f,a=0;a<r.length;a++){var c=r[a];Rr(t,c)||n&&Rr(n,c)||i(t,c,o(e,c))}},Lr=o,Nr=U,Gr=/#|\.prototype\./,$r=function(t,e){var n=Br[Ur(t)];return n===Xr||n!==Hr&&(Nr(e)?Lr(e):!!e)},Ur=$r.normalize=function(t){return String(t).replace(Gr,".").toLowerCase()},Br=$r.data={},Hr=$r.NATIVE="N",Xr=$r.POLYFILL="P",Vr=$r,Jr=r,Kr=i.f,Qr=Ve,Yr=qn,qr=Et,Zr=Wr,ti=Vr,ei=function(t,e){var n,r,i,o,a,c=t.target,s=t.global,l=t.stat;if(n=s?Jr:l?Jr[c]||qr(c,{}):(Jr[c]||{}).prototype)for(r in e){if(o=e[r],i=t.dontCallGetSet?(a=Kr(n,r))&&a.value:n[r],!ti(s?r:c+(l?".":"#")+r,t.forced)&&void 0!==i){if(typeof o==typeof i)continue;Zr(o,i)}(t.sham||i&&i.sham)&&Qr(o,"sham",!0),Yr(n,r,o,t)}},ni=A,ri=S,ii=function(t){if("Function"===ni(t))return ri(t)},oi=yt,ai=c,ci=ii(ii.bind),si=A,li=Array.isArray||function(t){return"Array"===si(t)},fi={};fi[ne("toStringTag")]="z";var ui="[object z]"===String(fi),di=ui,gi=U,vi=A,hi=ne("toStringTag"),pi=Object,mi="Arguments"===vi(function(){return arguments}()),bi=di?vi:function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=pi(t),hi))?n:mi?vi(e):"Object"===(r=vi(e))&&gi(e.callee)?"Arguments":r},wi=S,yi=o,xi=U,_i=bi,Si=sn,Ci=function(){},Oi=[],Ii=K("Reflect","construct"),Ai=/^\s*(?:class|function)\b/,ki=wi(Ai.exec),Pi=!Ai.test(Ci),ji=function(t){if(!xi(t))return!1;try{return Ii(Ci,Oi,t),!0}catch(t){return!1}},Ei=function(t){if(!xi(t))return!1;switch(_i(t)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return Pi||!!ki(Ai,Si(t))}catch(t){return!0}};Ei.sham=!0;var Di=!Ii||yi((function(){var t;return ji(ji.call)||!ji(Object)||!ji((function(){t=!0}))||t}))?Ei:ji,Ti=li,Ri=Di,Fi=X,zi=ne("species"),Mi=Array,Wi=function(t){var e;return Ti(t)&&(e=t.constructor,(Ri(e)&&(e===Mi||Ti(e.prototype))||Fi(e)&&null===(e=e[zi]))&&(e=void 0)),void 0===e?Mi:e},Li=function(t,e){return oi(t),void 0===e?t:ai?ci(t,e):function(){return t.apply(e,arguments)}},Ni=D,Gi=Lt,$i=dr,Ui=function(t,e){return new(Wi(t))(0===e?0:e)},Bi=S([].push),Hi=function(t){var e=1===t,n=2===t,r=3===t,i=4===t,o=6===t,a=7===t,c=5===t||o;return function(s,l,f,u){for(var d,g,v=Gi(s),h=Ni(v),p=Li(l,f),m=$i(h),b=0,w=u||Ui,y=e?w(s,m):n||a?w(s,0):void 0;m>b;b++)if((c||b in h)&&(g=p(d=h[b],b,v),t))if(e)y[b]=g;else if(g)switch(t){case 3:return!0;case 5:return d;case 6:return b;case 2:Bi(y,d)}else switch(t){case 4:return!1;case 7:Bi(y,d)}return o?-1:r||i?i:y}},Xi={forEach:Hi(0),map:Hi(1),filter:Hi(2),some:Hi(3),every:Hi(4),find:Hi(5),findIndex:Hi(6),filterReject:Hi(7)},Vi={},Ji=Sr,Ki=Cr,Qi=Object.keys||function(t){return Ji(t,Ki)},Yi=a,qi=Pe,Zi=ke,to=Te,eo=L,no=Qi;Vi.f=Yi&&!qi?Object.defineProperties:function(t,e){to(t);for(var n,r=eo(e),i=no(e),o=i.length,a=0;o>a;)Zi.f(t,n=i[a++],r[n]);return t};var ro,io=K("document","documentElement"),oo=Te,ao=Vi,co=Cr,so=hn,lo=io,fo=pe,uo="prototype",go="script",vo=vn("IE_PROTO"),ho=function(){},po=function(t){return"<"+go+">"+t+"</"+go+">"},mo=function(t){t.write(po("")),t.close();var e=t.parentWindow.Object;return t=null,e},bo=function(){try{ro=new ActiveXObject("htmlfile")}catch(t){}var t,e,n;bo="undefined"!=typeof document?document.domain&&ro?mo(ro):(e=fo("iframe"),n="java"+go+":",e.style.display="none",lo.appendChild(e),e.src=String(n),(t=e.contentWindow.document).open(),t.write(po("document.F=Object")),t.close(),t.F):mo(ro);for(var r=co.length;r--;)delete bo[uo][co[r]];return bo()};so[vo]=!0;var wo=Object.create||function(t,e){var n;return null!==t?(ho[uo]=oo(t),n=new ho,ho[uo]=null,n[vo]=t):n=bo(),void 0===e?n:ao.f(n,e)},yo=ne,xo=wo,_o=ke.f,So=yo("unscopables"),Co=Array.prototype;void 0===Co[So]&&_o(Co,So,{configurable:!0,value:xo(null)});var Oo=ei,Io=Xi.find,Ao=function(t){Co[So][t]=!0},ko="find",Po=!0;ko in[]&&Array(1)[ko]((function(){Po=!1})),Oo({target:"Array",proto:!0,forced:Po},{find:function(t){return Io(this,t,arguments.length>1?arguments[1]:void 0)}}),Ao(ko);var jo=bi,Eo=ui?{}.toString:function(){return"[object "+jo(this)+"]"};ui||qn(Object.prototype,"toString",Eo,{unsafe:!0});var Do=de,To=ke,Ro=m,Fo=function(t,e,n){var r=Do(e);r in t?To.f(t,r,Ro(0,n)):t[r]=n},zo=o,Mo=it,Wo=ne("species"),Lo=function(t){return Mo>=51||!zo((function(){var e=[];return(e.constructor={})[Wo]=function(){return{foo:1}},1!==e[t](Boolean).foo}))},No=S([].slice),Go=ei,$o=li,Uo=Di,Bo=X,Ho=cr,Xo=dr,Vo=L,Jo=Fo,Ko=ne,Qo=No,Yo=Lo("slice"),qo=Ko("species"),Zo=Array,ta=Math.max;Go({target:"Array",proto:!0,forced:!Yo},{slice:function(t,e){var n,r,i,o=Vo(this),a=Xo(o),c=Ho(t,a),s=Ho(void 0===e?a:e,a);if($o(o)&&(n=o.constructor,(Uo(n)&&(n===Zo||$o(n.prototype))||Bo(n)&&null===(n=n[qo]))&&(n=void 0),n===Zo||void 0===n))return Qo(o,c,s);for(r=new(void 0===n?Zo:n)(ta(s-c,0)),i=0;c<s;c++,i++)c in o&&Jo(r,i,o[c]);return r.length=i,r}});var ea=o,na=function(t,e){var n=[][t];return!!n&&ea((function(){n.call(null,e||function(){return 1},1)}))},ra=ei,ia=mr.indexOf,oa=na,aa=ii([].indexOf),ca=!!aa&&1/aa([1],1,-0)<0;ra({target:"Array",proto:!0,forced:ca||!oa("indexOf")},{indexOf:function(t){var e=arguments.length>1?arguments[1]:void 0;return ca?aa(this,t,e)||0:ia(this,t,e)}});var sa=Lt,la=Qi;ei({target:"Object",stat:!0,forced:o((function(){la(1)}))},{keys:function(t){return la(sa(t))}});var fa,ua,da=bi,ga=String,va=function(t){if("Symbol"===da(t))throw new TypeError("Cannot convert a Symbol value to a string");return ga(t)},ha=Te,pa=o,ma=r.RegExp,ba=pa((function(){var t=ma("a","y");return t.lastIndex=2,null!==t.exec("abcd")})),wa=ba||pa((function(){return!ma("a","y").sticky})),ya={BROKEN_CARET:ba||pa((function(){var t=ma("^r","gy");return t.lastIndex=2,null!==t.exec("str")})),MISSED_STICKY:wa,UNSUPPORTED_Y:ba},xa=o,_a=r.RegExp,Sa=xa((function(){var t=_a(".","s");return!(t.dotAll&&t.test("\n")&&"s"===t.flags)})),Ca=o,Oa=r.RegExp,Ia=Ca((function(){var t=Oa("(?<a>b)","g");return"b"!==t.exec("b").groups.a||"bc"!=="b".replace(t,"$<a>c")})),Aa=f,ka=S,Pa=va,ja=function(){var t=ha(this),e="";return t.hasIndices&&(e+="d"),t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.unicodeSets&&(e+="v"),t.sticky&&(e+="y"),e},Ea=ya,Da=wo,Ta=Pn.get,Ra=Sa,Fa=Ia,za=zt("native-string-replace",String.prototype.replace),Ma=RegExp.prototype.exec,Wa=Ma,La=ka("".charAt),Na=ka("".indexOf),Ga=ka("".replace),$a=ka("".slice),Ua=(ua=/b*/g,Aa(Ma,fa=/a/,"a"),Aa(Ma,ua,"a"),0!==fa.lastIndex||0!==ua.lastIndex),Ba=Ea.BROKEN_CARET,Ha=void 0!==/()??/.exec("")[1];(Ua||Ha||Ba||Ra||Fa)&&(Wa=function(t){var e,n,r,i,o,a,c,s=this,l=Ta(s),f=Pa(t),u=l.raw;if(u)return u.lastIndex=s.lastIndex,e=Aa(Wa,u,f),s.lastIndex=u.lastIndex,e;var d=l.groups,g=Ba&&s.sticky,v=Aa(ja,s),h=s.source,p=0,m=f;if(g&&(v=Ga(v,"y",""),-1===Na(v,"g")&&(v+="g"),m=$a(f,s.lastIndex),s.lastIndex>0&&(!s.multiline||s.multiline&&"\n"!==La(f,s.lastIndex-1))&&(h="(?: "+h+")",m=" "+m,p++),n=new RegExp("^(?:"+h+")",v)),Ha&&(n=new RegExp("^"+h+"$(?!\\s)",v)),Ua&&(r=s.lastIndex),i=Aa(Ma,g?n:s,m),g?i?(i.input=$a(i.input,p),i[0]=$a(i[0],p),i.index=s.lastIndex,s.lastIndex+=i[0].length):s.lastIndex=0:Ua&&i&&(s.lastIndex=s.global?i.index+i[0].length:r),Ha&&i&&i.length>1&&Aa(za,i[0],n,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(i[o]=void 0)})),i&&d)for(i.groups=a=Da(null),o=0;o<d.length;o++)a[(c=d[o])[0]]=i[c[1]];return i});var Xa=Wa;ei({target:"RegExp",proto:!0,forced:/./.exec!==Xa},{exec:Xa});var Va=c,Ja=Function.prototype,Ka=Ja.apply,Qa=Ja.call,Ya="object"==typeof Reflect&&Reflect.apply||(Va?Qa.bind(Ka):function(){return Qa.apply(Ka,arguments)}),qa=ii,Za=qn,tc=Xa,ec=o,nc=ne,rc=Ve,ic=nc("species"),oc=RegExp.prototype,ac=S,cc=rr,sc=va,lc=z,fc=ac("".charAt),uc=ac("".charCodeAt),dc=ac("".slice),gc=function(t){return function(e,n){var r,i,o=sc(lc(e)),a=cc(n),c=o.length;return a<0||a>=c?t?"":void 0:(r=uc(o,a))<55296||r>56319||a+1===c||(i=uc(o,a+1))<56320||i>57343?t?fc(o,a):r:t?dc(o,a,a+2):i-56320+(r-55296<<10)+65536}},vc={codeAt:gc(!1),charAt:gc(!0)}.charAt,hc=S,pc=Lt,mc=Math.floor,bc=hc("".charAt),wc=hc("".replace),yc=hc("".slice),xc=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,_c=/\$([$&'`]|\d{1,2})/g,Sc=f,Cc=Te,Oc=U,Ic=A,Ac=Xa,kc=TypeError,Pc=Ya,jc=f,Ec=S,Dc=function(t,e,n,r){var i=nc(t),o=!ec((function(){var e={};return e[i]=function(){return 7},7!==""[t](e)})),a=o&&!ec((function(){var e=!1,n=/a/;return"split"===t&&((n={}).constructor={},n.constructor[ic]=function(){return n},n.flags="",n[i]=/./[i]),n.exec=function(){return e=!0,null},n[i](""),!e}));if(!o||!a||n){var c=qa(/./[i]),s=e(i,""[t],(function(t,e,n,r,i){var a=qa(t),s=e.exec;return s===tc||s===oc.exec?o&&!i?{done:!0,value:c(e,n,r)}:{done:!0,value:a(n,e,r)}:{done:!1}}));Za(String.prototype,t,s[0]),Za(oc,i,s[1])}r&&rc(oc[i],"sham",!0)},Tc=o,Rc=Te,Fc=U,zc=T,Mc=rr,Wc=fr,Lc=va,Nc=z,Gc=function(t,e,n){return e+(n?vc(t,e).length:1)},$c=St,Uc=function(t,e,n,r,i,o){var a=n+t.length,c=r.length,s=_c;return void 0!==i&&(i=pc(i),s=xc),wc(o,s,(function(o,s){var l;switch(bc(s,0)){case"$":return"$";case"&":return t;case"`":return yc(e,0,n);case"'":return yc(e,a);case"<":l=i[yc(s,1,-1)];break;default:var f=+s;if(0===f)return o;if(f>c){var u=mc(f/10);return 0===u?o:u<=c?void 0===r[u-1]?bc(s,1):r[u-1]+bc(s,1):o}l=r[f-1]}return void 0===l?"":l}))},Bc=function(t,e){var n=t.exec;if(Oc(n)){var r=Sc(n,t,e);return null!==r&&Cc(r),r}if("RegExp"===Ic(t))return Sc(Ac,t,e);throw new kc("RegExp#exec called on incompatible receiver")},Hc=ne("replace"),Xc=Math.max,Vc=Math.min,Jc=Ec([].concat),Kc=Ec([].push),Qc=Ec("".indexOf),Yc=Ec("".slice),qc="$0"==="a".replace(/./,"$0"),Zc=!!/./[Hc]&&""===/./[Hc]("a","$0");Dc("replace",(function(t,e,n){var r=Zc?"$":"$0";return[function(t,n){var r=Nc(this),i=zc(t)?void 0:$c(t,Hc);return i?jc(i,t,r,n):jc(e,Lc(r),t,n)},function(t,i){var o=Rc(this),a=Lc(t);if("string"==typeof i&&-1===Qc(i,r)&&-1===Qc(i,"$<")){var c=n(e,o,a,i);if(c.done)return c.value}var s=Fc(i);s||(i=Lc(i));var l,f=o.global;f&&(l=o.unicode,o.lastIndex=0);for(var u,d=[];null!==(u=Bc(o,a))&&(Kc(d,u),f);){""===Lc(u[0])&&(o.lastIndex=Gc(a,Wc(o.lastIndex),l))}for(var g,v="",h=0,p=0;p<d.length;p++){for(var m,b=Lc((u=d[p])[0]),w=Xc(Vc(Mc(u.index),a.length),0),y=[],x=1;x<u.length;x++)Kc(y,void 0===(g=u[x])?g:String(g));var _=u.groups;if(s){var S=Jc([b],y,w,a);void 0!==_&&Kc(S,_),m=Lc(Pc(i,void 0,S))}else m=Uc(b,a,w,y,_,i);w>=h&&(v+=Yc(a,h,w)+m,h=w+b.length)}return v+Yc(a,h)}]}),!!Tc((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}))||!qc||Zc);var ts=Xi.filter;ei({target:"Array",proto:!0,forced:!Lo("filter")},{filter:function(t){return ts(this,t,arguments.length>1?arguments[1]:void 0)}});var es=!o((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype})),ns=$t,rs=U,is=Lt,os=es,as=vn("IE_PROTO"),cs=Object,ss=cs.prototype,ls=os?cs.getPrototypeOf:function(t){var e=is(t);if(ns(e,as))return e[as];var n=e.constructor;return rs(n)&&e instanceof n?n.prototype:e instanceof cs?ss:null},fs=a,us=o,ds=S,gs=ls,vs=Qi,hs=L,ps=ds(u.f),ms=ds([].push),bs=fs&&us((function(){var t=Object.create(null);return t[2]=2,!ps(t,2)})),ws=function(t){return function(e){for(var n,r=hs(e),i=vs(r),o=bs&&null===gs(r),a=i.length,c=0,s=[];a>c;)n=i[c++],fs&&!(o?n in r:ps(r,n))||ms(s,t?[n,r[n]]:r[n]);return s}},ys={entries:ws(!0),values:ws(!1)}.values;ei({target:"Object",stat:!0},{values:function(t){return ys(t)}});var xs=pt,_s=TypeError,Ss=cr,Cs=dr,Os=Fo,Is=Array,As=Math.max,ks=function(t,e,n){for(var r=Cs(t),i=Ss(e,r),o=Ss(void 0===n?r:n,r),a=Is(As(o-i,0)),c=0;i<o;i++,c++)Os(a,c,t[i]);return a.length=c,a},Ps=ks,js=Math.floor,Es=function(t,e){var n=t.length,r=js(n/2);return n<8?Ds(t,e):Ts(t,Es(Ps(t,0,r),e),Es(Ps(t,r),e),e)},Ds=function(t,e){for(var n,r,i=t.length,o=1;o<i;){for(r=o,n=t[o];r&&e(t[r-1],n)>0;)t[r]=t[--r];r!==o++&&(t[r]=n)}return t},Ts=function(t,e,n,r){for(var i=e.length,o=n.length,a=0,c=0;a<i||c<o;)t[a+c]=a<i&&c<o?r(e[a],n[c])<=0?e[a++]:n[c++]:a<i?e[a++]:n[c++];return t},Rs=Es,Fs=Y.match(/firefox\/(\d+)/i),zs=!!Fs&&+Fs[1],Ms=/MSIE|Trident/.test(Y),Ws=Y.match(/AppleWebKit\/(\d+)\./),Ls=!!Ws&&+Ws[1],Ns=ei,Gs=S,$s=yt,Us=Lt,Bs=dr,Hs=function(t,e){if(!delete t[e])throw new _s("Cannot delete property "+xs(e)+" of "+xs(t))},Xs=va,Vs=o,Js=Rs,Ks=na,Qs=zs,Ys=Ms,qs=it,Zs=Ls,tl=[],el=Gs(tl.sort),nl=Gs(tl.push),rl=Vs((function(){tl.sort(void 0)})),il=Vs((function(){tl.sort(null)})),ol=Ks("sort"),al=!Vs((function(){if(qs)return qs<70;if(!(Qs&&Qs>3)){if(Ys)return!0;if(Zs)return Zs<603;var t,e,n,r,i="";for(t=65;t<76;t++){switch(e=String.fromCharCode(t),t){case 66:case 69:case 70:case 72:n=3;break;case 68:case 71:n=4;break;default:n=2}for(r=0;r<47;r++)tl.push({k:e+r,v:n})}for(tl.sort((function(t,e){return e.v-t.v})),r=0;r<tl.length;r++)e=tl[r].k.charAt(0),i.charAt(i.length-1)!==e&&(i+=e);return"DGBEFHACIJK"!==i}}));Ns({target:"Array",proto:!0,forced:rl||!il||!ol||!al},{sort:function(t){void 0!==t&&$s(t);var e=Us(this);if(al)return void 0===t?el(e):el(e,t);var n,r,i=[],o=Bs(e);for(r=0;r<o;r++)r in e&&nl(i,e[r]);for(Js(i,function(t){return function(e,n){return void 0===n?-1:void 0===e?1:void 0!==t?+t(e,n)||0:Xs(e)>Xs(n)?1:-1}}(t)),n=Bs(i),r=0;r<n;)e[r]=i[r++];for(;r<o;)Hs(e,r++);return e}});var cl=Xi.map;ei({target:"Array",proto:!0,forced:!Lo("map")},{map:function(t){return cl(this,t,arguments.length>1?arguments[1]:void 0)}});var sl={},ll=A,fl=L,ul=Zn.f,dl=ks,gl="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];sl.f=function(t){return gl&&"Window"===ll(t)?function(t){try{return ul(t)}catch(t){return dl(gl)}}(t):ul(fl(t))};var vl=Vn,hl=ke,pl=function(t,e,n){return n.get&&vl(n.get,e,{getter:!0}),n.set&&vl(n.set,e,{setter:!0}),hl.f(t,e,n)},ml={},bl=ne;ml.f=bl;var wl=r,yl=$t,xl=ml,_l=ke.f,Sl=f,Cl=K,Ol=ne,Il=qn,Al=ke.f,kl=$t,Pl=ne("toStringTag"),jl=ei,El=r,Dl=f,Tl=S,Rl=a,Fl=st,zl=o,Ml=$t,Wl=Q,Ll=Te,Nl=L,Gl=de,$l=va,Ul=m,Bl=wo,Hl=Qi,Xl=Zn,Vl=sl,Jl=Ar,Kl=i,Ql=ke,Yl=Vi,ql=u,Zl=qn,tf=pl,ef=zt,nf=hn,rf=Vt,of=ne,af=ml,cf=function(t){var e=wl.Symbol||(wl.Symbol={});yl(e,t)||_l(e,t,{value:xl.f(t)})},sf=function(){var t=Cl("Symbol"),e=t&&t.prototype,n=e&&e.valueOf,r=Ol("toPrimitive");e&&!e[r]&&Il(e,r,(function(t){return Sl(n,this)}),{arity:1})},lf=function(t,e,n){t&&!n&&(t=t.prototype),t&&!kl(t,Pl)&&Al(t,Pl,{configurable:!0,value:e})},ff=Pn,uf=Xi.forEach,df=vn("hidden"),gf="Symbol",vf="prototype",hf=ff.set,pf=ff.getterFor(gf),mf=Object[vf],bf=El.Symbol,wf=bf&&bf[vf],yf=El.RangeError,xf=El.TypeError,_f=El.QObject,Sf=Kl.f,Cf=Ql.f,Of=Vl.f,If=ql.f,Af=Tl([].push),kf=ef("symbols"),Pf=ef("op-symbols"),jf=ef("wks"),Ef=!_f||!_f[vf]||!_f[vf].findChild,Df=function(t,e,n){var r=Sf(mf,e);r&&delete mf[e],Cf(t,e,n),r&&t!==mf&&Cf(mf,e,r)},Tf=Rl&&zl((function(){return 7!==Bl(Cf({},"a",{get:function(){return Cf(this,"a",{value:7}).a}})).a}))?Df:Cf,Rf=function(t,e){var n=kf[t]=Bl(wf);return hf(n,{type:gf,tag:t,description:e}),Rl||(n.description=e),n},Ff=function(t,e,n){t===mf&&Ff(Pf,e,n),Ll(t);var r=Gl(e);return Ll(n),Ml(kf,r)?(n.enumerable?(Ml(t,df)&&t[df][r]&&(t[df][r]=!1),n=Bl(n,{enumerable:Ul(0,!1)})):(Ml(t,df)||Cf(t,df,Ul(1,{})),t[df][r]=!0),Tf(t,r,n)):Cf(t,r,n)},zf=function(t,e){Ll(t);var n=Nl(e),r=Hl(n).concat(Nf(n));return uf(r,(function(e){Rl&&!Dl(Mf,n,e)||Ff(t,e,n[e])})),t},Mf=function(t){var e=Gl(t),n=Dl(If,this,e);return!(this===mf&&Ml(kf,e)&&!Ml(Pf,e))&&(!(n||!Ml(this,e)||!Ml(kf,e)||Ml(this,df)&&this[df][e])||n)},Wf=function(t,e){var n=Nl(t),r=Gl(e);if(n!==mf||!Ml(kf,r)||Ml(Pf,r)){var i=Sf(n,r);return!i||!Ml(kf,r)||Ml(n,df)&&n[df][r]||(i.enumerable=!0),i}},Lf=function(t){var e=Of(Nl(t)),n=[];return uf(e,(function(t){Ml(kf,t)||Ml(nf,t)||Af(n,t)})),n},Nf=function(t){var e=t===mf,n=Of(e?Pf:Nl(t)),r=[];return uf(n,(function(t){!Ml(kf,t)||e&&!Ml(mf,t)||Af(r,kf[t])})),r};Fl||(bf=function(){if(Wl(wf,this))throw new xf("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?$l(arguments[0]):void 0,e=rf(t),n=function(t){var r=void 0===this?El:this;r===mf&&Dl(n,Pf,t),Ml(r,df)&&Ml(r[df],e)&&(r[df][e]=!1);var i=Ul(1,t);try{Tf(r,e,i)}catch(t){if(!(t instanceof yf))throw t;Df(r,e,i)}};return Rl&&Ef&&Tf(mf,e,{configurable:!0,set:n}),Rf(e,t)},Zl(wf=bf[vf],"toString",(function(){return pf(this).tag})),Zl(bf,"withoutSetter",(function(t){return Rf(rf(t),t)})),ql.f=Mf,Ql.f=Ff,Yl.f=zf,Kl.f=Wf,Xl.f=Vl.f=Lf,Jl.f=Nf,af.f=function(t){return Rf(of(t),t)},Rl&&(tf(wf,"description",{configurable:!0,get:function(){return pf(this).description}}),Zl(mf,"propertyIsEnumerable",Mf,{unsafe:!0}))),jl({global:!0,constructor:!0,wrap:!0,forced:!Fl,sham:!Fl},{Symbol:bf}),uf(Hl(jf),(function(t){cf(t)})),jl({target:gf,stat:!0,forced:!Fl},{useSetter:function(){Ef=!0},useSimple:function(){Ef=!1}}),jl({target:"Object",stat:!0,forced:!Fl,sham:!Rl},{create:function(t,e){return void 0===e?Bl(t):zf(Bl(t),e)},defineProperty:Ff,defineProperties:zf,getOwnPropertyDescriptor:Wf}),jl({target:"Object",stat:!0,forced:!Fl},{getOwnPropertyNames:Lf}),sf(),lf(bf,gf),nf[df]=!0;var Gf=st&&!!Symbol.for&&!!Symbol.keyFor,$f=ei,Uf=K,Bf=$t,Hf=va,Xf=zt,Vf=Gf,Jf=Xf("string-to-symbol-registry"),Kf=Xf("symbol-to-string-registry");$f({target:"Symbol",stat:!0,forced:!Vf},{for:function(t){var e=Hf(t);if(Bf(Jf,e))return Jf[e];var n=Uf("Symbol")(e);return Jf[e]=n,Kf[n]=e,n}});var Qf=ei,Yf=$t,qf=vt,Zf=pt,tu=Gf,eu=zt("symbol-to-string-registry");Qf({target:"Symbol",stat:!0,forced:!tu},{keyFor:function(t){if(!qf(t))throw new TypeError(Zf(t)+" is not a symbol");if(Yf(eu,t))return eu[t]}});var nu=li,ru=U,iu=A,ou=va,au=S([].push),cu=ei,su=K,lu=Ya,fu=f,uu=S,du=o,gu=U,vu=vt,hu=No,pu=function(t){if(ru(t))return t;if(nu(t)){for(var e=t.length,n=[],r=0;r<e;r++){var i=t[r];"string"==typeof i?au(n,i):"number"!=typeof i&&"Number"!==iu(i)&&"String"!==iu(i)||au(n,ou(i))}var o=n.length,a=!0;return function(t,e){if(a)return a=!1,e;if(nu(this))return e;for(var r=0;r<o;r++)if(n[r]===t)return e}}},mu=st,bu=String,wu=su("JSON","stringify"),yu=uu(/./.exec),xu=uu("".charAt),_u=uu("".charCodeAt),Su=uu("".replace),Cu=uu(1..toString),Ou=/[\uD800-\uDFFF]/g,Iu=/^[\uD800-\uDBFF]$/,Au=/^[\uDC00-\uDFFF]$/,ku=!mu||du((function(){var t=su("Symbol")("stringify detection");return"[null]"!==wu([t])||"{}"!==wu({a:t})||"{}"!==wu(Object(t))})),Pu=du((function(){return'"\\udf06\\ud834"'!==wu("\udf06\ud834")||'"\\udead"'!==wu("\udead")})),ju=function(t,e){var n=hu(arguments),r=pu(e);if(gu(r)||void 0!==t&&!vu(t))return n[1]=function(t,e){if(gu(r)&&(e=fu(r,this,bu(t),e)),!vu(e))return e},lu(wu,null,n)},Eu=function(t,e,n){var r=xu(n,e-1),i=xu(n,e+1);return yu(Iu,t)&&!yu(Au,i)||yu(Au,t)&&!yu(Iu,r)?"\\u"+Cu(_u(t,0),16):t};wu&&cu({target:"JSON",stat:!0,arity:3,forced:ku||Pu},{stringify:function(t,e,n){var r=hu(arguments),i=lu(ku?ju:wu,null,r);return Pu&&"string"==typeof i?Su(i,Ou,Eu):i}});var Du=Ar,Tu=Lt;ei({target:"Object",stat:!0,forced:!st||o((function(){Du.f(1)}))},{getOwnPropertySymbols:function(t){var e=Du.f;return e?e(Tu(t)):[]}});var Ru,Fu=ei,zu=a,Mu=S,Wu=$t,Lu=U,Nu=Q,Gu=va,$u=pl,Uu=Wr,Bu=r.Symbol,Hu=Bu&&Bu.prototype;if(zu&&Lu(Bu)&&(!("description"in Hu)||void 0!==Bu().description)){var Xu={},Vu=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:Gu(arguments[0]),e=Nu(Hu,this)?new Bu(t):void 0===t?Bu():Bu(t);return""===t&&(Xu[e]=!0),e};Uu(Vu,Bu),Vu.prototype=Hu,Hu.constructor=Vu;var Ju="Symbol(description detection)"===String(Bu("description detection")),Ku=Mu(Hu.valueOf),Qu=Mu(Hu.toString),Yu=/^Symbol\((.*)\)[^)]+$/,qu=Mu("".replace),Zu=Mu("".slice);$u(Hu,"description",{configurable:!0,get:function(){var t=Ku(this);if(Wu(Xu,t))return"";var e=Qu(t),n=Ju?Zu(e,7,-1):qu(e,Yu,"$1");return""===n?void 0:n}}),Fu({global:!0,constructor:!0,forced:!0},{Symbol:Vu})}!function(e){var n=e(document),r=wp.customize||null,i=HFG_Layout_Builder.isRTL;Ru=function(o,a){var c={id:a,controlId:"",cols:12,cellHeight:45,items:[],container:null,widgetsSidebar:null,ready:!1,devices:{desktop:"Desktop",mobile:"Mobile/Tablet"},activePanel:"desktop",panels:{},activeRow:"main",draggingItem:null,insertPoint:null,insertRow:null,getTemplate:_.memoize((function(){var t=this,n={evaluate:/<#([\s\S]+?)#>/g,interpolate:/{{{([\s\S]+?)}}}/g,escape:/{{([^}]+?)}}(?!})/g,variable:"data"};return function(r,i,o){return _.isUndefined(i)&&(i="tmpl-customize-control-"+t.type),!_.isUndefined(o)&&_.isString(o)?n.variable=o:n.variable="data",_.template(e("#"+i).html(),null,n)(r)}})),drag_drop:function(){var t=this;e(".hfg--device-panel",t.container).each((function(){var n=e(this),r=n.data("device");t.panels[r]={},e(".hfg--cb-items",n).each((function(t){var n=e(this).attr("data-id")||"",i="_sid_"+r+t;n&&(i="_sid_"+r+"-"+n),e(this).attr("id",i)})),e(".grid-stack, .hfg--sidebar-items",n).each((function(){var n=e(this).attr("data-id")||"";t.panels[r][n]=e(this),e(this).droppable({out:function(t,e){},over:function(t,e){},drop:function(n,r){var i=e(this);t.gridster(i,r,n),t.save()}})}));var i=e("#_sid_mobile-sidebar",n),o=i.attr("id")||!1;e(".grid-stack-item",n).draggable({revert:"invalid",connectToSortable:!!o&&"#"+o,start:function(t,r){e("body").addClass("builder-item-moving"),e(".hfg--cb-items",n).css("z-index",""),r.helper.parent().css("z-index",9999)},stop:function(t,r){e("body").removeClass("builder-item-moving"),e(".hfg--cb-items",n).css("z-index",""),r.helper.parent().css("z-index","")}}),i.length>0&&(i.sortable({revert:!0,change:function(e,n){t.save()},receive:function(n,r){e(this).find(".grid-stack-item").removeAttr("style").attr("data-gs-width",1),t.save()}}),t.panels[r].sidebar=i)}))},sortGrid:function(t){e(".grid-stack-item",t).each((function(){var t=e(this),n=t.attr("data-gs-x")||0;n=parseInt(n);var r=t.next();if(r.length>0){var i=r.attr("data-gs-x")||0;n>(i=parseInt(i))&&t.insertAfter(r)}}))},getX:function(t){var e=t.attr("data-gs-x")||0;return parseInt(e)},getW:function(t,e){var n;return _.isUndefined(e)&&(e=!1),n=e?t.attr("data-df-width")||1:t.attr("data-gs-width")||1,parseInt(n)},gridGetItemInfo:function(t,e,n){var r,i=this,o=i.getX(t),a=i.getW(t),c=0,s=0,l=!1;for(r=o-1;r>=0&&!l;)0===e[r]?c++:l=!0,r--;for(l=!1,r=o+a;r<i.cols&&!l;)0===e[r]?s++:l=!0,r++;return{flag:e,x:o,w:a,item:t,before:c,after:s,id:t.attr("data-id")||"",wrapper:n}},updateItemsPositions:function(e){for(var n=this.cols,r=0;r<=n;r++)"object"!==t(e[r])&&"function"!=typeof e[r]||e[r].attr("data-gs-x",r)},gridster:function(t,e,n){var r=[],o=this.cols,a=function(t){for(var e=t.x,n=t.w,i=t.el,o=e;o<e+n;o++)r[o]=o===e?i:1},c=function(t){for(var e=t.x,n=t.w,i=e;i<e+n;i++)r[i]=0},s=function(t,e){for(var n=0,i=t;i<o;i++)if(0===r[i])n++;else if(e)return n;return n},l=function(t,e){var n=0;void 0===e&&(e=!1);for(var i=t;i>=0;i--)if(0===r[i])n++;else if(e)return n;return n},f=function(t){return 0===r[t]},u=function(t,e){for(var n=t;n<t+e;){if(0!==r[n])return!1;n++}return!0},d=function(t){if(t<0)return{x:-1,w:1};var e,n,i,o=-1;if(r[t]<=1)for(e=t,i=!1;e>=0&&!i;)1!==r[e]&&0!==r[e]&&(o=e,i=!0),e--;else o=t;for(e=o+1,n=o;1===r[e];)n++,e++;return{x:o,w:n+1-o}},g=function(t){var e,n,i,a=-1;if(r[t]<o)for(e=t,i=!1;e<o&&!i;)1!==r[e]&&0!==r[e]&&(a=e,i=!0),e++;else a=t;for(e=a+1,n=a;1===r[e];)n++,e++;return{x:a,w:n+1-a}},v=function(t,e){var n=r.slice(),i=l(t);if(0===i)return e;var o=d(t),a=o.x>=0?o.x+o.w-1:t,c=e;e>i&&(c=i);for(var s=0,f=0,u=a;f<=c&&u>=0;)0===r[u]&&(f++,s=u),u--;var g=[],v=0;for(u=s;u<=a;u++)r[u]=0,0!==n[u]&&(g[v]=n[u],v++);for(v=0,u=s;u<=a;u++)void 0!==g[v]?r[u]=g[v]:r[u]=0,v++;return e-c},h=function(t,e){var n=r.slice(),i=s(t);if(0===i)return e;var a=d(t),c=a.x>=0?a.x:t,l=e;e>i&&(l=i);for(var f=t,u=0,g=c;u<l&&g<o;)0===r[g]&&(u++,f=g),g++;var v=[],h=0;for(g=c;g<=f;g++)r[g]=0,0!==n[g]&&(v[h]=n[g],h++);for(h=v.length-1,g=f;g>=c;g--)void 0!==v[h]?r[g]=v[h]:r[g]=0,h--;return e-l},p=function(){b.updateItemsPositions(r)},m=function(t,e){var n,i,c,m,w=t.x,y=t.w,x=function(){for(var t=0,e=0;e<o;e++)0===r[e]&&t++;return t}();if(x<=0)return!1;if(_.isUndefined(e)&&(e=!1),!e){if(f(w)){if(u(w,m=y))return a(t),t.el.attr("data-gs-x",w),t.el.attr("data-gs-width",m),!0;for((n=(i=s(w,!0))+(c=l(w-1,!0))>=y&&y-i<=c?w-(y-i):w-c)<0&&(n=0);m>=1;){if(u(n,m))return t.x=n,t.w=m,a(t),t.el.attr("data-gs-x",n),t.el.attr("data-gs-width",m),!0;m--}}if(1===r[w]){var S=d(w);if(S.x>=0&&w>S.x+Math.floor(S.w/2)&&w>S.x&&(n=S.x+S.w,(i=s(n,!0))>=y))return a({el:t.el,x:n,w:y}),t.el.attr("data-gs-x",n),t.el.attr("data-gs-width",y),!0}}console.log("--------------------------------------------------------");var C,O;!function(t,e){var n,i,o,a,c=0,p=!1;if(console.log("insert at x",e),console.log("insert node",t),f(e)){if(console.log("empty_at_X",e),n=d(e),i=g(e),n.x>-1){if(console.log("found_item_left",n),(c=s(n.x))>=t.w)if(u(e,t.w))console.log("found",t),w=e,p=!0;else if(t.ox>e)for(o=n.x+n.w,a=(a=l(o))<=t.w?t.w-a:t.w,h(o+1,a),c=s(o),console.log("loop_start_i",o);o>n.x+n.w&&!p;)u(o,t.w)&&(console.log("found_in_loop__i",o),w=o,p=!0),o--;if(!p&&t.ox<e){console.log("try_move_items_to_left",n),o=n.x+n.w-1,a=l(n.x),console.log("el",a),a>t.w&&(a=t.w),a-=2,v(n.x,a),console.log("try_move_items_to_left_flag",r),console.log("el2",a),o-=c=s(o),i=g(e);var m=n.x+n.w;for(i.x>-1&&(m=i.x),console.log("loop_start 2_i",o);o<m&&!p;)u(o,t.w)&&(console.log("found_in_loop__@__i",o),w=o,p=!0),o++}p||(w=n.x+n.w,t.w=c,t.x=w,console.log("resize_new_w",c),console.log("resize_new_x",w))}else if(i.x>-1){console.log("found_item_right",i),i=g(e),c=s(e,!1),console.log("move_all_item_to Right");var y=c>=t.w?t.w:c;for(h(e,y),o=i.x,console.log("loop_start Right",o);o>=0&&!p;)u(o,t.w)&&(w=o,t.x=w,p=!0,console.log("found_in_while_r",o)),o--;p||(w=e,t.w=c,t.x=w,console.log("resize_r_new_w",c),console.log("resize_r_new_x",w))}}else if(console.log("x is not empty"),n=d(e),t.ox<n.x)if(v(e,t.w),console.log("Move All items to left"),f(e))w=e;else{for(;!f(e)&&e<=b.cols-1;)e++;w=e}else if(h(e,t.w),console.log("Move All items to right"),f(e))w=e;else{for(;!f(e)&&e>=0;)e--;w=e}w>b.cols&&(w=b.cols-1),t.x=w,console.log("new node x",w)}(t,_.clone(w));var I=0;for(w+y>b.cols-1&&(I=l(w,!0),console.log("le",I),I>0&&console.log("move_Left",w+y-b.cols-1)),p();y>=1;){if(x>=y){if(u(w,y))return console.log("",{x:w,w:y}),t.w=y,a(t),t.el.attr("data-gs-x",w),t.el.attr("data-gs-width",y),!0;for(I=l(w,!0),C=w-I,console.log("newX",C),O=C;O<o;){if(u(O,y))return console.log("Insert in While",{x:O,w:y}),t.w=y,a({el:t.el,x:O,w:y}),t.el.attr("data-gs-x",O),t.el.attr("data-gs-width",y),!0;O++}}y--}for(y=t.w;y>=1;){for(O=0;O<o;){if(u(O,y))return console.log("Insert in While 2",{x:O,w:y}),a({el:t.el,x:O,w:y}),t.el.attr("data-gs-x",O),t.el.attr("data-gs-width",y),!0;O++}y--}return console.log("Insert END While",{x:O,w:y}),!1},b=this,w=(r=b.getFlag(t)).slice(),y=t.offset();b.draggingItem=e.draggable;var x,S,C,O,I,A=t.width(),k=A/b.cols,P=e.offset;C=b.getW(e.draggable,!1),S=b.getW(e.draggable,!0),O=e.draggable.width(),console.log("DROP ITEM WIDTH",S),console.log("DROP ITEM cw WIDTH",C);var j=b.getX(e.draggable);i&&c({el:e.draggable,x:j,w:S});var E,D=0,T=0,R=!1;if(e.draggable.parent().is(t)?(I=!0,console.log("Item in this row"),S=C):(I=!1,console.log("Not in this row"),S<C&&(S=C)),i?(D=Math.round((y.left+A+10-n.clientX)/k),(T=Math.round((y.left+A-(P.left+O+10))/k))<0&&(T=0)):(D=Math.round((n.clientX-y.left)/k),(T=Math.round((P.left-y.left-10)/k))<0&&(T=0)),D>b.cols&&(D=b.cols),x=T,E=T,i){if(!f(E))for(;E<b.cols&&!R;)f(E)?R=!0:E++}else if(!f(x)){for(;x<=D&&!R;)f(x)?R=!0:x++;x>D&&(x=D)}if(R||(x=I?T:D),x<0&&(x=0),x+S>=b.cols){for(R=!0,E=x;E+S>b.cols&&R;)f(E)?E--:(E++,R=!1);x=E}var F={el:e.draggable,x:x,w:S,ox:j,ow:C};F.x<=0&&(F.x=0);var z=!1;I?(F.x=parseInt(e.draggable.attr("data-gs-x")||0),F.w=parseInt(e.draggable.attr("data-gs-width")||1),function(t,e){var n=t.w;c(t);var r=d(e),i=0;if(r.x>-1&&(i=r.x+r.w),u(e,n))return a({el:t.el,x:e,w:n}),!0;if(i>0&&u(i,n)&&e>=i){var o=g(e);if(o.x>-1&&t.w+e>=o.x)for(var s=_.clone(e);s>i;){if(u(s,n))return a({el:t.el,x:s,w:n}),!0;s--}if(e+n>b.cols){var l=b.cols-n;if(u(l,n))return a({el:t.el,x:l,w:n}),!0}return a({el:t.el,x:i,w:n}),!0}t.x=e,m(t,!0)}(F,x),z=!0):z=m(F),z?(e.draggable.removeClass("item-from-list"),t.append(e.draggable),e.draggable.removeAttr("style"),console.log("DID Flag: ",r),b.draggingItem=null):(e.draggable.removeAttr("style"),console.log("Can not insert"),r=w),p(),b.updateAllGrids()},updateAllGrids:function(){var t=this;_.each(t.panels[t.activePanel],(function(e,n){t.updateGridFlag(e)}))},setGridWidth:function(t,e){var n,r,o=this,a=e.element,c=t.width(),s=e.size.width,l=e.originalSize.width,f=Math.ceil(c/o.cols)-1;i?(n=e.originalPosition.left>e.position.left,r=l!==s):(n=e.originalPosition.left>e.position.left,r=e.originalPosition.left<e.position.left);var u,d,g,v=e.originalElement.attr("data-gs-width")||1,h=e.originalElement.attr("data-gs-x")||0;v=parseInt(v),h=parseInt(h);var p,m=o.getFlag(t),b=o.gridGetItemInfo(e.originalElement,m,t);if(n)return i?(d=Math.floor((e.position.left-1)/f),(u=(d=o.cols-d)-h-v)>b.after&&(u=b.after),g=v+u,a.attr("data-gs-x",h).removeAttr("style"),a.attr("data-gs-width",g).removeAttr("style")):((u=h-(d=Math.floor((e.position.left-1)/f)))>b.before&&(u=b.before),d=h-u,g=v+u,a.attr("data-gs-x",d).removeAttr("style"),a.attr("data-gs-width",g).removeAttr("style")),void o.updateGridFlag(t);if(r)return i?(e.originalPosition.left!==e.position.left?(d=Math.floor((e.position.left-1)/f),(u=v+h-(d=o.cols-d))>v&&(u=0),g=v-u,(d=h)<=0&&(d=0),console.log("diffRight_RTL_COL_New __left")):(d=Math.ceil((e.position.left+e.size.width-11)/f),(u=h-(d=o.cols-d))>b.before&&(u=b.before),d=h-u,g=v+u),a.attr("data-gs-x",d).removeAttr("style"),a.attr("data-gs-width",g).removeAttr("style")):((g=v-(u=(d=Math.round((e.position.left-1)/f))-h))<=0&&(g=1,u=0),d=h+u,a.attr("data-gs-x",d).removeAttr("style"),a.attr("data-gs-width",g).removeAttr("style")),void o.updateGridFlag(t);var w,y=b.x;w=Math.ceil((e.position.left+e.size.width-11)/f),p=b.w+(w-(y+b.w)),b.x+p>b.x+b.w+b.after&&(p=b.w+b.after),s<e.originalSize.width&&((w=Math.round((e.position.left+e.size.width-11)/f))<=y&&(w=y+1),p=b.w-(y+b.w-w)),p<=0&&(p=1),a.attr("data-gs-width",p).removeAttr("style"),o.updateGridFlag(t)},getFlag:function(t){var e,n=t.data("gridRowFlag")||[];if(_.isEmpty(n)){for(e=0;e<this.cols;e++)n[e]=0;t.data("gridRowFlag",n)}return n},updateGridFlag:function(t){var n,r=this,i=[];for(n=0;n<r.cols;n++)i[n]=0;return e(".grid-stack-item",t).each((function(t){e(this).removeAttr("style");var o=r.getX(e(this)),a=r.getW(e(this));for(n=o;n<o+a;n++)i[n]=n===o?e(this):1})),t.data("gridRowFlag",i),r.updateItemsPositions(i),r.sortGrid(t),i},addNewWidget:function(t,n){var r=this,i=r.container.find(".hfg--device-panel.hfg--panel-"+r.activePanel),o=n;_.isObject(o)||(o=i.find(".hfg--cb-items").first());var a=t;a.draggable({revert:"invalid",appendTo:i,scroll:!1,zIndex:99999,handle:".grid-stack-item-content",start:function(t,n){e("body").addClass("builder-item-moving"),e(".hfg--cb-items",i).css("z-index",""),n.helper.parent().css("z-index",9999)},stop:function(t,n){e("body").removeClass("builder-item-moving"),e(".hfg--cb-items",i).css("z-index",""),r.save()},drag:function(t,e){}}).resizable({handles:"w, e",start:function(t,e){e.originalElement.css({right:"auto",left:e.position.left})},stop:function(t,e){r.setGridWidth(e.element.parent(),e),r.save()}}),o.append(a),r.updateGridFlag(o),a[0]&&e("#accordion-section-"+a[0].dataset.section).removeClass("hfg-section-inactive")},addPanel:function(t){var n=this.getTemplate(),r="tmpl-hfg--cb-panel";if(0!==e("#"+r).length)return _.isObject(o.rows)||(o.rows={}),'<div class="hfg--device-panel hfg-vertical-panel hfg--panel-'+t+'" data-device="'+t+'">'+n({device:t,id:o.id,rows:o.rows},r)+"</div>"},addDevicePanels:function(){var t=this;_.each(t.devices,(function(n,r){var i=t.addPanel(r);e(".hfg--cb-devices-switcher",t.container).append('<a href="#" class="switch-to switch-to-'+r+'" data-device="'+r+'"><span class="icon '+r+'-icon"></span><span>'+n+"</span></a>"),e(".hfg--cb-body",t.container).append(i),e(".hfg-widgets-panel-inner",t.widgetSidebarContainer).append('<div class=" hfg--widgets hfg--widgets-'+r+'" data-device="'+r+'"></div>')}));var n=e("#hfg-upsell-tmpl");n.length&&e(n.html()).insertAfter(e(".hfg--cb-devices-switcher",t.container)),e(t.container).find(".welcome-notice").removeClass("hidden"),e(t.container).find(".conditional-header").addClass("hidden")},addItem:function(t,n){var r=this.getTemplate(),i="tmpl-hfg--cb-item";if(0!==e("#"+i).length){t.elementOrder=n;var o=r(t,i);return e(o)}},addAvailableItems:function(){var t=this;_.each(t.devices,(function(n,r){_.each(t.items,(function(n,i){var o=!0;if(!_.isUndefined(n.devices)&&!_.isEmpty(n.devices))if(_.isString(n.devices))n.devices!==r&&(o=!1);else{var a=!1;_.each(n.devices,(function(t){r===t&&(a=!0)})),a||(o=!1)}if(o){i=Object.keys(t.items).indexOf(i);var c=t.addItem(n,i);e(".hfg--widgets-"+r,t.widgetSidebarContainer).prepend(c)}}))}))},switchToDevice:function(t,n){var r=this;_.size(r.devices)>1?(e(".hfg--cb-devices-switcher a",r.container).removeClass("hfg--tab-active"),e(".hfg--cb-devices-switcher .switch-to-"+t,r.container).addClass("hfg--tab-active"),e(".hfg--device-panel",r.container).addClass("hfg--panel-hide"),e(".hfg--device-panel.hfg--panel-"+t,r.container).removeClass("hfg--panel-hide"),r.activePanel=t,e(".hfg--device-panel .hfg-available-items .item-from-list").each((function(t,n){e("#accordion-section-"+e(n)[0].dataset.section).removeClass("hfg-section-inactive")})),e(".hfg--device-panel.hfg--panel-"+t+" .hfg-available-items .item-from-list").each((function(t,n){e("#accordion-section-"+e(n)[0].dataset.section).addClass("hfg-section-inactive")}))):(e(".hfg--device-panel.hfg--panel-"+t+" .hfg-available-items .item-from-list").each((function(t,n){e("#accordion-section-"+e(n)[0].dataset.section).addClass("hfg-section-inactive")})),e(".hfg--cb-devices-switcher a",r.container).addClass("hfg--tab-active")),(_.isUndefined(n)||n)&&("desktop"===t?e("#customize-footer-actions .preview-desktop").trigger("click"):e("#customize-footer-actions .preview-mobile").trigger("click"))},addExistingRowsItems:function(){var t=this,n=!1;r.control(t.controlId).setting.get()&&(n=JSON.parse(r.control(t.controlId).setting.get())),_.isObject(n)||(n={}),_.each(t.panels,(function(r,i){var o={};_.isObject(n[i])&&(o=n[i]),_.each(o,(function(n,o){_.isUndefined(n)||_.each(n,(function(n,a){var c=e('.hfg--widgets[data-device="'+i+'"] .grid-stack-item[data-id="'+n.id+'"]').first();c.attr("data-gs-width",n.width),c.attr("data-gs-x",n.x),c.removeClass("item-from-list"),t.addNewWidget(c,r[o]),e("#accordion-section-"+n.id).removeClass("hfg-section-inactive")}))})),t.hideDuplicates(i)})),t.ready=!0},focus:function(){this.container.on("click",".hfg--cb-item-setting, .hfg--cb-item-admin-setting, .hfg--cb-item-name, .item-tooltip",(function(t){t.preventDefault();var n=e(this).data("section")||"";console.log("Clicked section",n),-1!==n.indexOf("neve_")&&(n=n.replace("neve_",""),console.log("New section",n));var i=e(this).data("widget")||"";i&&(console.log("Clicked widget",i),n=i);var o=e(this).attr("data-control")||"",a=!1;o&&(_.isUndefined(r.control(o))||(r.control(o).focus(),a=!0)),a||n&&!_.isUndefined(r.section(n))&&(console.log("Before focus section"),r.section(n).focus())})),this.container.on("click",".hfg--cb-row-settings",(function(t){t.preventDefault();var n=e(this).attr("data-id")||"",i=o.id+"_"+n;_.isUndefined(r.section(i))||r.section(i).focus()}))},closeComponentsSidebar:function(){e(".widgets-panel--visible").removeClass("widgets-panel--visible"),e(".hfg--widgets.widgets--visible").removeClass("widgets--visible"),e(this.widgetSidebarContainer).find(".component-search").val("").trigger("keyup"),e(this.widgetSidebarContainer).removeClass("preview-right preview-left"),e("body").removeClass("hfg--widgets-open"),e(".hfg--component-preview.visible").removeClass("visible")},initComponentsSidebar:function(){var t=this;e(t.container).on("click",".add-button--grid",(function(n){t.insertPoint=e(this).data("slot"),t.insertRow=e(this).closest(".hfg--row-inner").find(".hfg--cb-items").data("id"),n.preventDefault(),t.closeComponentsSidebar();var r=n.target.getBoundingClientRect(),i=e(".wp-full-overlay").hasClass("collapsed")?0:e("#customize-controls").outerWidth(),o=e(t.widgetSidebarContainer).outerWidth(),a=e(t.widgetSidebarContainer).outerHeight(),c={top:r.top-(a+5)};t.insertPoint>6?(e(t.widgetSidebarContainer).addClass("preview-left"),c.left=r.left-i-o+o/7+e(this).outerWidth()):t.insertPoint<5?(e(t.widgetSidebarContainer).addClass("preview-right"),c.left=r.left-i-o/7):c.left=r.left-i-o/2+e(this).outerWidth()/2,e(t.widgetSidebarContainer).css(c);var s=e(this).closest(".hfg--device-panel")[0].getAttribute("data-device");e(t.widgetSidebarContainer).addClass("widgets-panel--visible"),e(t.widgetSidebarContainer).find(" .hfg--widgets-"+s).addClass("widgets--visible")})),e(t.widgetSidebarContainer).on("click",".hfg-widgets-panel-header .close",(function(e){t.closeComponentsSidebar()})),e(t.widgetSidebarContainer).on("keyup input",".component-search",(function(n){var r=n.target.value.toLowerCase();_.each(t.widgetSidebarContainer.find(".grid-stack-item"),(function(t){e(t).filter((function(){if(e(this).hasClass("duplicate"))return!1;e(this).toggle(e(this).text().toLowerCase().indexOf(r)>-1)}))}))})),e(t.widgetSidebarContainer).on("click",".grid-stack-item",(function(n){t.closeComponentsSidebar();var i=JSON.parse(r.control(t.controlId).setting.get()),o=e(this).closest(".hfg--widgets").data("device"),a=e(this).data("df-width"),c=e(this).data("id");void 0===i[o]&&(i[o]={}),void 0===i[o][t.insertRow]&&(i[o][t.insertRow]={});var s=Object.values(i[o][t.insertRow]),l={x:t.insertPoint,y:1,width:a,height:1,id:c};s.push(l),e(this).attr("data-gs-x",t.insertPoint),e(this).attr("data-gs-width",a),s.sort((function(t,e){return t.x<e.x?-1:t.x>e.x?1:0}));for(var f=0;f<s.length;f++)s[f].id===c&&(f===s.length-1?s[f].x+s[f].width>12&&(s[f].width=s[f].x+s[f].width-12,e(this).attr("data-gs-width",s[f].width)):s[f].x+s[f].width>s[f+1].x&&(s[f].width=s[f+1].x-s[f].x,e(this).attr("data-gs-width",s[f].width)));var u=e(this).find(".grid-stack-item-content");u.addClass("hfg-highlight"),setTimeout((function(){u.removeClass("hfg-highlight")}),3500),e("#_sid_"+o+"-"+t.insertRow,t.container[0]).append(this),t.addNewWidget(e(this),e(t.container[0]).find(" #_sid_"+o+"-"+t.insertRow)),r.section(this.getAttribute("data-section")).focus(),t.save(),t.insertRow=null,t.insertPoint=null,t.hideDuplicates(o)}))},remove:function(){var t=this;e(t.container).on("click",".hfg--device-panel .hfg--cb-item-remove",(function(n){n.preventDefault();var r=e(this).closest(".grid-stack-item"),i=r.closest(".hfg--device-panel")[0].getAttribute("data-device");r.attr("data-gs-x",0),r.removeAttr("style"),e(t.widgetSidebarContainer).find(".hfg--widgets-"+i).prepend(r),e("#accordion-section-"+r[0].dataset.section).addClass("hfg-section-inactive"),t.updateAllGrids(),t.hideDuplicates(i),t.save()}))},removeAllItems:function(){var t=this;e(t.container).find(".grid-stack-item").each((function(n,r){var i=e(r).closest(".hfg--device-panel")[0].getAttribute("data-device");e(r).attr("data-gs-x",0),e(r).removeAttr("style"),e(t.widgetSidebarContainer).find(".hfg--widgets-"+i).prepend(r),t.updateAllGrids(),t.hideDuplicates(i)}))},hideDuplicates:function(t){var n=e(this.widgetSidebarContainer).find(".hfg--widgets-"+t+" .grid-stack-item"),r={};_.each(n,(function(t){var n=e(t).data("slug");if("hfg-generic-component"===n)return!1;void 0===r[n]&&(r[n]=[]),r[n].push(t)})),_.each(r,(function(t,n){if(t.length<2)return e(t[0]).removeClass("duplicate"),!1;_.each(t,(function(t,n){if(0===n)return e(t).removeClass("duplicate"),!1;e(t).addClass("duplicate")}))}))},encodeValue:function(t){return JSON.stringify(t)},listenForLayoutSideloading:function(){var t=this;document.addEventListener("neve-changed-builder-value",(function(e){return!!e.detail&&(e.detail.id===t.id&&(r.control(t.controlId).setting.set(t.encodeValue(e.detail.value)),t.removeAllItems(),void t.addExistingRowsItems()))}))},decodeValue:function(t){return JSON.parse(t)},save:function(){var t=this;if(t.ready){var n={};_.each(t.panels,(function(r,i){n[i]={},_.each(r,(function(r,o){n[i][o]=_.map(e(" > .grid-stack-item",r),(function(n){return n=e(n),{x:t.getX(n),y:1,width:t.getW(n),height:1,id:n.data("id")||""}}))}))})),r.control(t.controlId).setting.set(t.encodeValue(n))}},showPanel:function(){var t=this;this.container.find(".add-button--grid").addClass("hfg-highlight"),setTimeout((function(){t.container.find(".add-button--grid").removeClass("hfg-highlight")}),1e3),this.container.removeClass("hfg--builder--hide").addClass("hfg--builder-show"),setTimeout((function(){var n=t.container.height();e("#customize-preview").addClass("cb--preview-panel-show").css({bottom:n-1,"margin-top":"0px"})}),100)},hidePanel:function(){this.container.removeClass("hfg--builder-show"),e("#customize-preview").removeClass("cb--preview-panel-show").removeAttr("style")},togglePanel:function(){var t=this;r.state("expandedPanel").bind((function(e){r.panel(o.panel).expanded()?(n.trigger("hfg_panel_builder_open",[o.panel]),top._current_builder_panel=a,t.showPanel()):(t.hidePanel(),t.closeComponentsSidebar())})),t.container.on("click",".hfg--panel-close",(function(n){n.preventDefault(),t.container.toggleClass("hfg--builder--hide"),t.container.hasClass("hfg--builder--hide")?e("#customize-preview").removeClass("cb--preview-panel-show"):e("#customize-preview").addClass("cb--preview-panel-show")}))},panelLayoutCSS:function(){var t=e("#customize-controls").width();r.state("paneVisible").get()||(t=0),i?this.container.find(".hfg--cb-inner").css({"margin-right":t}):this.container.find(".hfg--cb-inner").css({"margin-left":t})},populateComponentPreviews:function(){var t=this,n=t.getTemplate();_.each(t.devices,(function(r,i){_.each(t.items,(function(r){if(null===r.description)return!1;var i=n(r,"tmpl-hfg--widgets-preview");e(t.widgetSidebarContainer).append(i)}))}))},init:function(t,i,c){var s=this,l=s.getTemplate(),f=l(o,"tmpl-hfg--builder-panel"),u=l(o,"tmpl-hfg--widgets-sidebar");s.container=e(f),s.widgetSidebarContainer=e(u),e("body .wp-full-overlay").append(s.container).append(s.widgetSidebarContainer),s.controlId=t,s.items=i,s.devices=c,o.section&&r.section(o.section).container.addClass("hfg--hide"),s.addDevicePanels(),s.switchToDevice(s.activePanel),s.addAvailableItems(),s.populateComponentPreviews(),s.switchToDevice(s.activePanel),s.drag_drop(),s.initComponentsSidebar(),s.focus(),s.remove(),s.addExistingRowsItems(),s.listenForLayoutSideloading(),r.panel(o.panel).expanded()?s.showPanel():(s.hidePanel(),s.closeComponentsSidebar()),r.previewedDevice.bind((function(t){"desktop"===t?s.switchToDevice("desktop",!1):s.switchToDevice("mobile",!1)})),s.togglePanel(),r.state("paneVisible").get()&&s.panelLayoutCSS(),r.state("paneVisible").bind((function(){s.panelLayoutCSS()})),e(window).resize(_.throttle((function(){s.panelLayoutCSS()}),100)),s.container.on("click",".hfg--cb-devices-switcher a.switch-to",(function(t){t.preventDefault();var n=e(this).data("device");s.switchToDevice(n)})),n.trigger("hfg_builder_panel_loaded",[a,s])}};return c.init(o.control_id,o.items,o.devices),c}}(jQuery),function(t,e){var n=t(document);function r(n){var r=t(".hfg--cp-sidebar .toggle");return!0===n?(r.addClass("active"),e.previewer.send("header_sidebar_open"),!1):!1===n?(r.removeClass("active"),e.previewer.send("header_sidebar_close"),!1):(r.hasClass("active")?e.previewer.send("header_sidebar_close"):e.previewer.send("header_sidebar_open"),void r.toggleClass("active"))}e.bind("ready",(function(n,r){_.each(HFG_Layout_Builder.builders,(function(t,e){new Ru(t,e)})),e.bind("pane-contents-reflowed",(function(){setTimeout((function(){0===t("#sub-accordion-panel-widgets .no-widget-areas-rendered-notice .footer_moved_widgets_text").length&&t("#sub-accordion-panel-widgets .no-widget-areas-rendered-notice").append('<p class="footer_moved_widgets_text">'+HFG_Layout_Builder.footer_moved_widgets_text+"</p>")}),1e3)})),e.state("expandedSection").bind((function(e){t(".hfg--device-panel .grid-stack-item").removeClass("item-active"),t(".hfg--cb-row").removeClass("row-active"),e&&(t('.hfg--cb-row[data-id="'+e.id+'"]').addClass("row-active"),t(".hfg--device-panel .grid-stack-item.for-s-"+e.id).addClass("item-active"))}))})),n.on("click",".focus-section",(function(n){n.preventDefault();var r=t(this).attr("data-id")||"";r||(r=(r=t(this).attr("href")||"").replace("#","")),r&&e.section(r)&&e.section(r).focus()})),n.on("click",".focus-control",(function(n){n.preventDefault();var r=t(this).attr("data-id")||"";r||(r=(r=t(this).attr("href")||"").replace("#","")),r&&e.control(r)&&e.control(r).focus()})),n.on("click",".focus-panel",(function(n){n.preventDefault();var r=t(this).attr("data-id")||"";r||(r=(r=t(this).attr("href")||"").replace("#","")),r&&e.panel(r)&&e.panel(r).focus()})),n.on("mouseover",".hfg--widgets .grid-stack-item",(function(e){var n=t(this),r=n.attr("data-id");t(n).closest(".hfg--widgets-panel").find('[data-for-component="'+r+'"]').addClass("visible")})),n.on("mouseleave",".hfg--widgets .grid-stack-item",(function(e){var n=t(this),r=n.attr("data-id");t(n).closest(".hfg--widgets-panel").find('[data-for-component="'+r+'"]').removeClass("visible")})),n.on("mouseover",".hfg--cb-row .grid-stack-item",(function(e){var n=t(this);t(".hfg--cb-item-remove",n).outerWidth()+t(".hfg--cb-item-setting",n).outerWidth()>t(".grid-stack-item-content",n).innerWidth()-50&&n.addClass("show-tooltip")})),n.on("mouseleave",".hfg--cb-row .grid-stack-item",(function(e){t(this).removeClass("show-tooltip")})),e.bind("ready",(function(){e.section.each((function(n){n.expanded.bind((function(i){var o=[];t(".hfg--sidebar-items .grid-stack-item .grid-stack-item-content .hfg--cb-item-name").each((function(e,n){o.push(t(n).data("section"))})),o.push("hfg_header_layout_sidebar"),-1!==o.indexOf(n.id)&&i&&"desktop"!==e.previewedDevice.get()?r(!0):r(!1)}))})),e.previewer.bind("neve-toggle-navbar",(function(){t(".hfg--cp-sidebar .toggle").toggleClass("active")}))})),n.on("click",".hfg--cp-sidebar .toggle",(function(){r()})),n.on("click",".hfg--cp-sidebar .hfg--cb-row-settings,.hfg--cp-sidebar .grid-stack-item",(function(){r(!0)})),n.on("click",".quick-links a",(function(e){e.preventDefault(),e.stopPropagation();var n=t(this).data("control-focus");if("toggle_sidebar"===n)return r(!0),!1;wp.customize.control(n).focus(),t("label."+n).click()}))}(jQuery,wp.customize||null),hashCode=function(t){var e,n=0;if(0===t.length)return n;for(e=0;e<this.length;e++)n=(n<<5)-n+this.charCodeAt(e),n|=0;return n},wp.customize.sectionConstructor.hfg_instructions=wp.customize.Section.extend({attachEvents:function(){},isContextuallyActive:function(){return!0}})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRlci5taW4uanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWFsbC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1jYWxsYWJsZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1vYmplY3QuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1zeW1ib2wuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWNhbGxhYmxlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1tZXRob2QuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3JkaW5hcnktdG8tcHJpbWl0aXZlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1nbG9iYWwtcHJvcGVydHkuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1uYW1lLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlYWstbWFwLWJhc2ljLWRldGVjdGlvbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGRlbi1rZXlzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21ha2UtYnVpbHQtaW4uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hdGgtdHJ1bmMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL293bi1rZXlzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1mb3JjZWQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy1jbGF1c2UuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9odG1sLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1jcmVhdGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNsaWNlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tc3RyaW5nLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1mbGFncy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLWRvdC1hbGwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLW5jZy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHkuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1zdWJzdGl0dXRpb24uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC10by1hcnJheS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWxldGUtcHJvcGVydHktb3ItdGhyb3cuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc2xpY2Utc2ltcGxlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNvcnQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWZmLXZlcnNpb24uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWllLW9yLWVkZ2UuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXdlYmtpdC12ZXJzaW9uLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb3J0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLWFjY2Vzc29yLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3ltYm9sLWRlZmluZS10by1wcmltaXRpdmUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5jb25zdHJ1Y3Rvci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zeW1ib2wtcmVnaXN0cnktZGV0ZWN0aW9uLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuZm9yLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wua2V5LWZvci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtanNvbi1yZXBsYWNlci1mdW5jdGlvbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuanNvbi5zdHJpbmdpZnkuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qcyIsImJ1aWxkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWdsb2JhbC10aGlzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIGZhbGxiYWNrXG4gIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KSgpIHx8IHRoaXMgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gRGV0ZWN0IElFOCdzIGluY29tcGxldGUgZGVmaW5lUHJvcGVydHkgaW1wbGVtZW50YXRpb25cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPT0gNztcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWZ1bmN0aW9uLXByb3RvdHlwZS1iaW5kIC0tIHNhZmVcbiAgdmFyIHRlc3QgPSAoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KS5iaW5kKCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICByZXR1cm4gdHlwZW9mIHRlc3QgIT0gJ2Z1bmN0aW9uJyB8fCB0ZXN0Lmhhc093blByb3BlcnR5KCdwcm90b3R5cGUnKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBjYWxsID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGw7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX0JJTkQgPyBjYWxsLmJpbmQoY2FsbCkgOiBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBjYWxsLmFwcGx5KGNhbGwsIGFyZ3VtZW50cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICEkcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh7IDE6IDIgfSwgMSk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eWlzZW51bWVyYWJsZVxuZXhwb3J0cy5mID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpO1xuICByZXR1cm4gISFkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZW51bWVyYWJsZTtcbn0gOiAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBEZW5vID0gZ2xvYmFsLkRlbm87XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnMgfHwgRGVubyAmJiBEZW5vLnZlcnNpb247XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbnZhciBtYXRjaCwgdmVyc2lvbjtcblxuaWYgKHY4KSB7XG4gIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcbiAgLy8gaW4gb2xkIENocm9tZSwgdmVyc2lvbnMgb2YgVjggaXNuJ3QgVjggPSBDaHJvbWUgLyAxMFxuICAvLyBidXQgdGhlaXIgY29ycmVjdCB2ZXJzaW9ucyBhcmUgbm90IGludGVyZXN0aW5nIGZvciB1c1xuICB2ZXJzaW9uID0gbWF0Y2hbMF0gPiAwICYmIG1hdGNoWzBdIDwgNCA/IDEgOiArKG1hdGNoWzBdICsgbWF0Y2hbMV0pO1xufVxuXG4vLyBCcm93c2VyRlMgTm9kZUpTIGBwcm9jZXNzYCBwb2x5ZmlsbCBpbmNvcnJlY3RseSBzZXQgYC52OGAgdG8gYDAuMGBcbi8vIHNvIGNoZWNrIGB1c2VyQWdlbnRgIGV2ZW4gaWYgYC52OGAgZXhpc3RzLCBidXQgMFxuaWYgKCF2ZXJzaW9uICYmIHVzZXJBZ2VudCkge1xuICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pO1xuICBpZiAoIW1hdGNoIHx8IG1hdGNoWzFdID49IDc0KSB7XG4gICAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgIGlmIChtYXRjaCkgdmVyc2lvbiA9ICttYXRjaFsxXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcnNpb247XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTkFUSVZFX0JJTkQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUnKTtcblxudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIGNhbGwgPSBGdW5jdGlvblByb3RvdHlwZS5jYWxsO1xudmFyIHVuY3VycnlUaGlzV2l0aEJpbmQgPSBOQVRJVkVfQklORCAmJiBGdW5jdGlvblByb3RvdHlwZS5iaW5kLmJpbmQoY2FsbCwgY2FsbCk7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX0JJTkQgPyB1bmN1cnJ5VGhpc1dpdGhCaW5kIDogZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNhbGwuYXBwbHkoZm4sIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgdG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyh7fS50b1N0cmluZyk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBzdHJpbmdTbGljZSh0b1N0cmluZyhpdCksIDgsIC0xKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbnZhciAkT2JqZWN0ID0gT2JqZWN0O1xudmFyIHNwbGl0ID0gdW5jdXJyeVRoaXMoJycuc3BsaXQpO1xuXG4vLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHRocm93cyBhbiBlcnJvciBpbiByaGlubywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3JoaW5vL2lzc3Vlcy8zNDZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGlucyAtLSBzYWZlXG4gIHJldHVybiAhJE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09PSAnU3RyaW5nJyA/IHNwbGl0KGl0LCAnJykgOiAkT2JqZWN0KGl0KTtcbn0gOiAkT2JqZWN0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gd2UgY2FuJ3QgdXNlIGp1c3QgYGl0ID09IG51bGxgIHNpbmNlIG9mIGBkb2N1bWVudC5hbGxgIHNwZWNpYWwgY2FzZVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1Jc0hUTUxEREEtaW50ZXJuYWwtc2xvdC1hZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gbnVsbCB8fCBpdCA9PT0gdW5kZWZpbmVkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYFJlcXVpcmVPYmplY3RDb2VyY2libGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXNOdWxsT3JVbmRlZmluZWQoaXQpKSB0aHJvdyBuZXcgJFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkb2N1bWVudEFsbCA9IHR5cGVvZiBkb2N1bWVudCA9PSAnb2JqZWN0JyAmJiBkb2N1bWVudC5hbGw7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtSXNIVE1MRERBLWludGVybmFsLXNsb3Rcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL25vLXR5cGVvZi11bmRlZmluZWQgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciBJU19IVE1MRERBID0gdHlwZW9mIGRvY3VtZW50QWxsID09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50QWxsICE9PSB1bmRlZmluZWQ7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhbGw6IGRvY3VtZW50QWxsLFxuICBJU19IVE1MRERBOiBJU19IVE1MRERBXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkb2N1bWVudEFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1hbGwnKTtcblxudmFyIGRvY3VtZW50QWxsID0gJGRvY3VtZW50QWxsLmFsbDtcblxuLy8gYElzQ2FsbGFibGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2NhbGxhYmxlXG5tb2R1bGUuZXhwb3J0cyA9ICRkb2N1bWVudEFsbC5JU19IVE1MRERBID8gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT0gJ2Z1bmN0aW9uJyB8fCBhcmd1bWVudCA9PT0gZG9jdW1lbnRBbGw7XG59IDogZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT0gJ2Z1bmN0aW9uJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyICRkb2N1bWVudEFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1hbGwnKTtcblxudmFyIGRvY3VtZW50QWxsID0gJGRvY3VtZW50QWxsLmFsbDtcblxubW9kdWxlLmV4cG9ydHMgPSAkZG9jdW1lbnRBbGwuSVNfSFRNTEREQSA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiBpc0NhbGxhYmxlKGl0KSB8fCBpdCA9PT0gZG9jdW1lbnRBbGw7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IGlzQ2FsbGFibGUoaXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc0NhbGxhYmxlKGFyZ3VtZW50KSA/IGFyZ3VtZW50IDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKSA6IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVuY3VycnlUaGlzKHt9LmlzUHJvdG90eXBlT2YpO1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgbmF2aWdhdG9yICE9ICd1bmRlZmluZWQnICYmIFN0cmluZyhuYXZpZ2F0b3IudXNlckFnZW50KSB8fCAnJztcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyICRTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5c3ltYm9scyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN5bWJvbCA9IFN5bWJvbCgnc3ltYm9sIGRldGVjdGlvbicpO1xuICAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvblxuICAvLyBgZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzYCBwb2x5ZmlsbCBzeW1ib2xzIGNvbnZlcnRlZCB0byBvYmplY3QgYXJlIG5vdCBTeW1ib2wgaW5zdGFuY2VzXG4gIC8vIG5iOiBEbyBub3QgY2FsbCBgU3RyaW5nYCBkaXJlY3RseSB0byBhdm9pZCB0aGlzIGJlaW5nIG9wdGltaXplZCBvdXQgdG8gYHN5bWJvbCsnJ2Agd2hpY2ggd2lsbCxcbiAgLy8gb2YgY291cnNlLCBmYWlsLlxuICByZXR1cm4gISRTdHJpbmcoc3ltYm9sKSB8fCAhKE9iamVjdChzeW1ib2wpIGluc3RhbmNlb2YgU3ltYm9sKSB8fFxuICAgIC8vIENocm9tZSAzOC00MCBzeW1ib2xzIGFyZSBub3QgaW5oZXJpdGVkIGZyb20gRE9NIGNvbGxlY3Rpb25zIHByb3RvdHlwZXMgdG8gaW5zdGFuY2VzXG4gICAgIVN5bWJvbC5zaGFtICYmIFY4X1ZFUlNJT04gJiYgVjhfVkVSU0lPTiA8IDQxO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MXG4gICYmICFTeW1ib2wuc2hhbVxuICAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciAkT2JqZWN0ID0gT2JqZWN0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVTRV9TWU1CT0xfQVNfVUlEID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciAkU3ltYm9sID0gZ2V0QnVpbHRJbignU3ltYm9sJyk7XG4gIHJldHVybiBpc0NhbGxhYmxlKCRTeW1ib2wpICYmIGlzUHJvdG90eXBlT2YoJFN5bWJvbC5wcm90b3R5cGUsICRPYmplY3QoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJFN0cmluZyA9IFN0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gJFN0cmluZyhhcmd1bWVudCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuICdPYmplY3QnO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBJc0NhbGxhYmxlKGFyZ3VtZW50KSBpcyB0cnVlYFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93IG5ldyAkVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xuXG4vLyBgR2V0TWV0aG9kYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0bWV0aG9kXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChWLCBQKSB7XG4gIHZhciBmdW5jID0gVltQXTtcbiAgcmV0dXJuIGlzTnVsbE9yVW5kZWZpbmVkKGZ1bmMpID8gdW5kZWZpbmVkIDogYUNhbGxhYmxlKGZ1bmMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgT3JkaW5hcnlUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9yZGluYXJ5dG9wcmltaXRpdmVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBwcmVmKSB7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAocHJlZiA9PT0gJ3N0cmluZycgJiYgaXNDYWxsYWJsZShmbiA9IGlucHV0LnRvU3RyaW5nKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKGlzQ2FsbGFibGUoZm4gPSBpbnB1dC52YWx1ZU9mKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHByZWYgIT09ICdzdHJpbmcnICYmIGlzQ2FsbGFibGUoZm4gPSBpbnB1dC50b1N0cmluZykgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IG5ldyAkVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgZGVmaW5lUHJvcGVydHkoZ2xvYmFsLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGdsb2JhbFtrZXldID0gdmFsdWU7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZGVmaW5lR2xvYmFsUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWdsb2JhbC1wcm9wZXJ0eScpO1xuXG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCBkZWZpbmVHbG9iYWxQcm9wZXJ0eShTSEFSRUQsIHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjMzLjInLFxuICBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTQtMjAyMyBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KScsXG4gIGxpY2Vuc2U6ICdodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9ibG9iL3YzLjMzLjIvTElDRU5TRScsXG4gIHNvdXJjZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzJ1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gJE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSB1bmN1cnJ5VGhpcyh7fS5oYXNPd25Qcm9wZXJ0eSk7XG5cbi8vIGBIYXNPd25Qcm9wZXJ0eWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWhhc293bnByb3BlcnR5XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWhhc293biAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5oYXNPd24gfHwgZnVuY3Rpb24gaGFzT3duKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5KHRvT2JqZWN0KGl0KSwga2V5KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG52YXIgdG9TdHJpbmcgPSB1bmN1cnJ5VGhpcygxLjAudG9TdHJpbmcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJyArIChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyB0b1N0cmluZygrK2lkICsgcG9zdGZpeCwgMzYpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2xbJ2ZvciddIHx8IFN5bWJvbCA6IFN5bWJvbCAmJiBTeW1ib2wud2l0aG91dFNldHRlciB8fCB1aWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgaWYgKCFoYXNPd24oV2VsbEtub3duU3ltYm9sc1N0b3JlLCBuYW1lKSkge1xuICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IE5BVElWRV9TWU1CT0wgJiYgaGFzT3duKFN5bWJvbCwgbmFtZSlcbiAgICAgID8gU3ltYm9sW25hbWVdXG4gICAgICA6IGNyZWF0ZVdlbGxLbm93blN5bWJvbCgnU3ltYm9sLicgKyBuYW1lKTtcbiAgfSByZXR1cm4gV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIG9yZGluYXJ5VG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3JkaW5hcnktdG8tcHJpbWl0aXZlJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcblxuLy8gYFRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBwcmVmKSB7XG4gIGlmICghaXNPYmplY3QoaW5wdXQpIHx8IGlzU3ltYm9sKGlucHV0KSkgcmV0dXJuIGlucHV0O1xuICB2YXIgZXhvdGljVG9QcmltID0gZ2V0TWV0aG9kKGlucHV0LCBUT19QUklNSVRJVkUpO1xuICB2YXIgcmVzdWx0O1xuICBpZiAoZXhvdGljVG9QcmltKSB7XG4gICAgaWYgKHByZWYgPT09IHVuZGVmaW5lZCkgcHJlZiA9ICdkZWZhdWx0JztcbiAgICByZXN1bHQgPSBjYWxsKGV4b3RpY1RvUHJpbSwgaW5wdXQsIHByZWYpO1xuICAgIGlmICghaXNPYmplY3QocmVzdWx0KSB8fCBpc1N5bWJvbChyZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICAgIHRocm93IG5ldyAkVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xuICB9XG4gIGlmIChwcmVmID09PSB1bmRlZmluZWQpIHByZWYgPSAnbnVtYmVyJztcbiAgcmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIHByZWYpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcblxuLy8gYFRvUHJvcGVydHlLZXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3Byb3BlcnR5a2V5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsICdzdHJpbmcnKTtcbiAgcmV0dXJuIGlzU3ltYm9sKGtleSkgPyBrZXkgOiBrZXkgKyAnJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBFWElTVFMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBFWElTVFMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFua3MgdG8gSUU4IGZvciBpdHMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9XG4gIH0pLmEgIT09IDc7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXNPd24oTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIWNhbGwocHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZiwgTywgUCksIE9bUF0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIFY4IH4gQ2hyb21lIDM2LVxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzMzNFxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sICdwcm90b3R5cGUnLCB7XG4gICAgdmFsdWU6IDQyLFxuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KS5wcm90b3R5cGUgIT09IDQyO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciAkU3RyaW5nID0gU3RyaW5nO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBBc3NlcnQ6IFR5cGUoYXJndW1lbnQpIGlzIE9iamVjdGBcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmIChpc09iamVjdChhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgbmV3ICRUeXBlRXJyb3IoJFN0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xudmFyIFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciAkZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgRU5VTUVSQUJMRSA9ICdlbnVtZXJhYmxlJztcbnZhciBDT05GSUdVUkFCTEUgPSAnY29uZmlndXJhYmxlJztcbnZhciBXUklUQUJMRSA9ICd3cml0YWJsZSc7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmICh0eXBlb2YgTyA9PT0gJ2Z1bmN0aW9uJyAmJiBQID09PSAncHJvdG90eXBlJyAmJiAndmFsdWUnIGluIEF0dHJpYnV0ZXMgJiYgV1JJVEFCTEUgaW4gQXR0cmlidXRlcyAmJiAhQXR0cmlidXRlc1tXUklUQUJMRV0pIHtcbiAgICB2YXIgY3VycmVudCA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gICAgaWYgKGN1cnJlbnQgJiYgY3VycmVudFtXUklUQUJMRV0pIHtcbiAgICAgIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICAgICAgQXR0cmlidXRlcyA9IHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBDT05GSUdVUkFCTEUgaW4gQXR0cmlidXRlcyA/IEF0dHJpYnV0ZXNbQ09ORklHVVJBQkxFXSA6IGN1cnJlbnRbQ09ORklHVVJBQkxFXSxcbiAgICAgICAgZW51bWVyYWJsZTogRU5VTUVSQUJMRSBpbiBBdHRyaWJ1dGVzID8gQXR0cmlidXRlc1tFTlVNRVJBQkxFXSA6IGN1cnJlbnRbRU5VTUVSQUJMRV0sXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG4gIH0gcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbn0gOiAkZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gJGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IG5ldyAkVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXREZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyIEVYSVNUUyA9IGhhc093bihGdW5jdGlvblByb3RvdHlwZSwgJ25hbWUnKTtcbi8vIGFkZGl0aW9uYWwgcHJvdGVjdGlvbiBmcm9tIG1pbmlmaWVkIC8gbWFuZ2xlZCAvIGRyb3BwZWQgZnVuY3Rpb24gbmFtZXNcbnZhciBQUk9QRVIgPSBFWElTVFMgJiYgKGZ1bmN0aW9uIHNvbWV0aGluZygpIHsgLyogZW1wdHkgKi8gfSkubmFtZSA9PT0gJ3NvbWV0aGluZyc7XG52YXIgQ09ORklHVVJBQkxFID0gRVhJU1RTICYmICghREVTQ1JJUFRPUlMgfHwgKERFU0NSSVBUT1JTICYmIGdldERlc2NyaXB0b3IoRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJykuY29uZmlndXJhYmxlKSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBFWElTVFM6IEVYSVNUUyxcbiAgUFJPUEVSOiBQUk9QRVIsXG4gIENPTkZJR1VSQUJMRTogQ09ORklHVVJBQkxFXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhGdW5jdGlvbi50b1N0cmluZyk7XG5cbi8vIHRoaXMgaGVscGVyIGJyb2tlbiBpbiBgY29yZS1qc0AzLjQuMS0zLjQuNGAsIHNvIHdlIGNhbid0IHVzZSBgc2hhcmVkYCBoZWxwZXJcbmlmICghaXNDYWxsYWJsZShzdG9yZS5pbnNwZWN0U291cmNlKSkge1xuICBzdG9yZS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uVG9TdHJpbmcoaXQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlLmluc3BlY3RTb3VyY2U7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlYWstbWFwLWJhc2ljLWRldGVjdGlvbicpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCA9ICdPYmplY3QgYWxyZWFkeSBpbml0aWFsaXplZCc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCB8fCBzaGFyZWQuc3RhdGUpIHtcbiAgdmFyIHN0b3JlID0gc2hhcmVkLnN0YXRlIHx8IChzaGFyZWQuc3RhdGUgPSBuZXcgV2Vha01hcCgpKTtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1hc3NpZ24gLS0gcHJvdG90eXBlIG1ldGhvZHMgcHJvdGVjdGlvbiAqL1xuICBzdG9yZS5nZXQgPSBzdG9yZS5nZXQ7XG4gIHN0b3JlLmhhcyA9IHN0b3JlLmhhcztcbiAgc3RvcmUuc2V0ID0gc3RvcmUuc2V0O1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtYXNzaWduIC0tIHByb3RvdHlwZSBtZXRob2RzIHByb3RlY3Rpb24gKi9cbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmIChzdG9yZS5oYXMoaXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEKTtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICBzdG9yZS5zZXQoaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBzdG9yZS5nZXQoaXQpIHx8IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gc3RvcmUuaGFzKGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgaWYgKGhhc093bihpdCwgU1RBVEUpKSB0aHJvdyBuZXcgVHlwZUVycm9yKE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEKTtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoaXQsIFNUQVRFLCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaGFzT3duKGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGhhc093bihpdCwgU1RBVEUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGdldDogZ2V0LFxuICBoYXM6IGhhcyxcbiAgZW5mb3JjZTogZW5mb3JjZSxcbiAgZ2V0dGVyRm9yOiBnZXR0ZXJGb3Jcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0NhbGxhYmxlKFdlYWtNYXApICYmIC9uYXRpdmUgY29kZS8udGVzdChTdHJpbmcoV2Vha01hcCkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBrZXlzID0gc2hhcmVkKCdrZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5c1trZXldIHx8IChrZXlzW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLkNPTkZJR1VSQUJMRTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyICRTdHJpbmcgPSBTdHJpbmc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xuXG52YXIgQ09ORklHVVJBQkxFX0xFTkdUSCA9IERFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sICdsZW5ndGgnLCB7IHZhbHVlOiA4IH0pLmxlbmd0aCAhPT0gODtcbn0pO1xuXG52YXIgVEVNUExBVEUgPSBTdHJpbmcoU3RyaW5nKS5zcGxpdCgnU3RyaW5nJyk7XG5cbnZhciBtYWtlQnVpbHRJbiA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlLCBuYW1lLCBvcHRpb25zKSB7XG4gIGlmIChzdHJpbmdTbGljZSgkU3RyaW5nKG5hbWUpLCAwLCA3KSA9PT0gJ1N5bWJvbCgnKSB7XG4gICAgbmFtZSA9ICdbJyArIHJlcGxhY2UoJFN0cmluZyhuYW1lKSwgL15TeW1ib2xcXCgoW14pXSopXFwpLywgJyQxJykgKyAnXSc7XG4gIH1cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5nZXR0ZXIpIG5hbWUgPSAnZ2V0ICcgKyBuYW1lO1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnNldHRlcikgbmFtZSA9ICdzZXQgJyArIG5hbWU7XG4gIGlmICghaGFzT3duKHZhbHVlLCAnbmFtZScpIHx8IChDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSAmJiB2YWx1ZS5uYW1lICE9PSBuYW1lKSkge1xuICAgIGlmIChERVNDUklQVE9SUykgZGVmaW5lUHJvcGVydHkodmFsdWUsICduYW1lJywgeyB2YWx1ZTogbmFtZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICAgIGVsc2UgdmFsdWUubmFtZSA9IG5hbWU7XG4gIH1cbiAgaWYgKENPTkZJR1VSQUJMRV9MRU5HVEggJiYgb3B0aW9ucyAmJiBoYXNPd24ob3B0aW9ucywgJ2FyaXR5JykgJiYgdmFsdWUubGVuZ3RoICE9PSBvcHRpb25zLmFyaXR5KSB7XG4gICAgZGVmaW5lUHJvcGVydHkodmFsdWUsICdsZW5ndGgnLCB7IHZhbHVlOiBvcHRpb25zLmFyaXR5IH0pO1xuICB9XG4gIHRyeSB7XG4gICAgaWYgKG9wdGlvbnMgJiYgaGFzT3duKG9wdGlvbnMsICdjb25zdHJ1Y3RvcicpICYmIG9wdGlvbnMuY29uc3RydWN0b3IpIHtcbiAgICAgIGlmIChERVNDUklQVE9SUykgZGVmaW5lUHJvcGVydHkodmFsdWUsICdwcm90b3R5cGUnLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTtcbiAgICAvLyBpbiBWOCB+IENocm9tZSA1MywgcHJvdG90eXBlcyBvZiBzb21lIG1ldGhvZHMsIGxpa2UgYEFycmF5LnByb3RvdHlwZS52YWx1ZXNgLCBhcmUgbm9uLXdyaXRhYmxlXG4gICAgfSBlbHNlIGlmICh2YWx1ZS5wcm90b3R5cGUpIHZhbHVlLnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICB2YXIgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh2YWx1ZSk7XG4gIGlmICghaGFzT3duKHN0YXRlLCAnc291cmNlJykpIHtcbiAgICBzdGF0ZS5zb3VyY2UgPSBqb2luKFRFTVBMQVRFLCB0eXBlb2YgbmFtZSA9PSAnc3RyaW5nJyA/IG5hbWUgOiAnJyk7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcblxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0ZW5kLW5hdGl2ZSAtLSByZXF1aXJlZFxuRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gbWFrZUJ1aWx0SW4oZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiBpc0NhbGxhYmxlKHRoaXMpICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IGluc3BlY3RTb3VyY2UodGhpcyk7XG59LCAndG9TdHJpbmcnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIG1ha2VCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21ha2UtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVHbG9iYWxQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtZ2xvYmFsLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zLmVudW1lcmFibGU7XG4gIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm5hbWUgOiBrZXk7XG4gIGlmIChpc0NhbGxhYmxlKHZhbHVlKSkgbWFrZUJ1aWx0SW4odmFsdWUsIG5hbWUsIG9wdGlvbnMpO1xuICBpZiAob3B0aW9ucy5nbG9iYWwpIHtcbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIGRlZmluZUdsb2JhbFByb3BlcnR5KGtleSwgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIW9wdGlvbnMudW5zYWZlKSBkZWxldGUgT1trZXldO1xuICAgICAgZWxzZSBpZiAoT1trZXldKSBzaW1wbGUgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogIW9wdGlvbnMubm9uQ29uZmlndXJhYmxlLFxuICAgICAgd3JpdGFibGU6ICFvcHRpb25zLm5vbldyaXRhYmxlXG4gICAgfSk7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgTWF0aC50cnVuY2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGgudHJ1bmNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLXRydW5jIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTWF0aC50cnVuYyB8fCBmdW5jdGlvbiB0cnVuYyh4KSB7XG4gIHZhciBuID0gK3g7XG4gIHJldHVybiAobiA+IDAgPyBmbG9vciA6IGNlaWwpKG4pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0cnVuYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLXRydW5jJyk7XG5cbi8vIGBUb0ludGVnZXJPckluZmluaXR5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9pbnRlZ2Vyb3JpbmZpbml0eVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIG51bWJlciA9ICthcmd1bWVudDtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgcmV0dXJuIG51bWJlciAhPT0gbnVtYmVyIHx8IG51bWJlciA9PT0gMCA/IDAgOiB0cnVuYyhudW1iZXIpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGludGVnZXIsIGxlbmd0aCkuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBgVG9MZW5ndGhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2xlbmd0aFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGFyZ3VtZW50ID4gMCA/IG1pbih0b0ludGVnZXJPckluZmluaXR5KGFyZ3VtZW50KSwgMHgxRkZGRkZGRkZGRkZGRikgOiAwOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xuXG4vLyBgTGVuZ3RoT2ZBcnJheUxpa2VgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1sZW5ndGhvZmFycmF5bGlrZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0b0xlbmd0aChvYmoubGVuZ3RoKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9PSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgICAgaWYgKHZhbHVlICE9PSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiAgaW5jbHVkZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5kZXhvZlxuICBpbmRleE9mOiBjcmVhdGVNZXRob2QoZmFsc2UpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzT3duKGhpZGRlbktleXMsIGtleSkgJiYgaGFzT3duKE8sIGtleSkgJiYgcHVzaChyZXN1bHQsIGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXNPd24oTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcHVzaChyZXN1bHQsIGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBJRTgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gW1xuICAnY29uc3RydWN0b3InLFxuICAnaGFzT3duUHJvcGVydHknLFxuICAnaXNQcm90b3R5cGVPZicsXG4gICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICd0b0xvY2FsZVN0cmluZycsXG4gICd0b1N0cmluZycsXG4gICd2YWx1ZU9mJ1xuXTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbnZhciBoaWRkZW5LZXlzID0gZW51bUJ1Z0tleXMuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gc2FmZVxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gc2FmZVxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG52YXIgY29uY2F0ID0gdW5jdXJyeVRoaXMoW10uY29uY2F0KTtcblxuLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ293bktleXMnKSB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGNvbmNhdChrZXlzLCBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSwgZXhjZXB0aW9ucykge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhc093bih0YXJnZXQsIGtleSkgJiYgIShleGNlcHRpb25zICYmIGhhc093bihleGNlcHRpb25zLCBrZXkpKSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgIH1cbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxudmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcblxudmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuICB2YXIgdmFsdWUgPSBkYXRhW25vcm1hbGl6ZShmZWF0dXJlKV07XG4gIHJldHVybiB2YWx1ZSA9PT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PT0gTkFUSVZFID8gZmFsc2VcbiAgICA6IGlzQ2FsbGFibGUoZGV0ZWN0aW9uKSA/IGZhaWxzKGRldGVjdGlvbilcbiAgICA6ICEhZGV0ZWN0aW9uO1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xudmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRm9yY2VkO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lR2xvYmFsUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWdsb2JhbC1wcm9wZXJ0eScpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAgICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMuZG9udENhbGxHZXRTZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4gIG9wdGlvbnMubmFtZSAgICAgICAgICAgLSB0aGUgLm5hbWUgb2YgdGhlIGZ1bmN0aW9uIGlmIGl0IGRvZXMgbm90IG1hdGNoIHRoZSBrZXlcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcbiAgdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0O1xuICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XG4gIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG4gIHZhciBGT1JDRUQsIHRhcmdldCwga2V5LCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlUHJvcGVydHksIGRlc2NyaXB0b3I7XG4gIGlmIChHTE9CQUwpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAoU1RBVElDKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsW1RBUkdFVF0gfHwgZGVmaW5lR2xvYmFsUHJvcGVydHkoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5kb250Q2FsbEdldFNldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICBkZWZpbmVCdWlsdEluKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2xhc3NvZlJhdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbikge1xuICAvLyBOYXNob3JuIGJ1ZzpcbiAgLy8gICBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTEyOFxuICAvLyAgIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xMTMwXG4gIGlmIChjbGFzc29mUmF3KGZuKSA9PT0gJ0Z1bmN0aW9uJykgcmV0dXJuIHVuY3VycnlUaGlzKGZuKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLWNsYXVzZScpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgTkFUSVZFX0JJTkQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUnKTtcblxudmFyIGJpbmQgPSB1bmN1cnJ5VGhpcyh1bmN1cnJ5VGhpcy5iaW5kKTtcblxuLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCkge1xuICBhQ2FsbGFibGUoZm4pO1xuICByZXR1cm4gdGhhdCA9PT0gdW5kZWZpbmVkID8gZm4gOiBOQVRJVkVfQklORCA/IGJpbmQoZm4sIHRoYXQpIDogZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1pc2FycmF5IC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZ3VtZW50KSB7XG4gIHJldHVybiBjbGFzc29mKGFyZ3VtZW50KSA9PT0gJ0FycmF5Jztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIHRlc3QgPSB7fTtcblxudGVzdFtUT19TVFJJTkdfVEFHXSA9ICd6JztcblxubW9kdWxlLmV4cG9ydHMgPSBTdHJpbmcodGVzdCkgPT09ICdbb2JqZWN0IHpdJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2ZSYXcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgJE9iamVjdCA9IE9iamVjdDtcblxuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBDT1JSRUNUX0FSR1VNRU5UUyA9IGNsYXNzb2ZSYXcoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IGNsYXNzb2ZSYXcgOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIHRhZywgcmVzdWx0O1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAodGFnID0gdHJ5R2V0KE8gPSAkT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT09ICdPYmplY3QnICYmIGlzQ2FsbGFibGUoTy5jYWxsZWUpID8gJ0FyZ3VtZW50cycgOiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBlbXB0eSA9IFtdO1xudmFyIGNvbnN0cnVjdCA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnY29uc3RydWN0Jyk7XG52YXIgY29uc3RydWN0b3JSZWdFeHAgPSAvXlxccyooPzpjbGFzc3xmdW5jdGlvbilcXGIvO1xudmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcyhjb25zdHJ1Y3RvclJlZ0V4cC5leGVjKTtcbnZhciBJTkNPUlJFQ1RfVE9fU1RSSU5HID0gIWNvbnN0cnVjdG9yUmVnRXhwLnRlc3Qobm9vcCk7XG5cbnZhciBpc0NvbnN0cnVjdG9yTW9kZXJuID0gZnVuY3Rpb24gaXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkge1xuICBpZiAoIWlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gZmFsc2U7XG4gIHRyeSB7XG4gICAgY29uc3RydWN0KG5vb3AsIGVtcHR5LCBhcmd1bWVudCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG52YXIgaXNDb25zdHJ1Y3RvckxlZ2FjeSA9IGZ1bmN0aW9uIGlzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcbiAgaWYgKCFpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGZhbHNlO1xuICBzd2l0Y2ggKGNsYXNzb2YoYXJndW1lbnQpKSB7XG4gICAgY2FzZSAnQXN5bmNGdW5jdGlvbic6XG4gICAgY2FzZSAnR2VuZXJhdG9yRnVuY3Rpb24nOlxuICAgIGNhc2UgJ0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24nOiByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyB3ZSBjYW4ndCBjaGVjayAucHJvdG90eXBlIHNpbmNlIGNvbnN0cnVjdG9ycyBwcm9kdWNlZCBieSAuYmluZCBoYXZlbid0IGl0XG4gICAgLy8gYEZ1bmN0aW9uI3RvU3RyaW5nYCB0aHJvd3Mgb24gc29tZSBidWlsdC1pdCBmdW5jdGlvbiBpbiBzb21lIGxlZ2FjeSBlbmdpbmVzXG4gICAgLy8gKGZvciBleGFtcGxlLCBgRE9NUXVhZGAgYW5kIHNpbWlsYXIgaW4gRkY0MS0pXG4gICAgcmV0dXJuIElOQ09SUkVDVF9UT19TVFJJTkcgfHwgISFleGVjKGNvbnN0cnVjdG9yUmVnRXhwLCBpbnNwZWN0U291cmNlKGFyZ3VtZW50KSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbmlzQ29uc3RydWN0b3JMZWdhY3kuc2hhbSA9IHRydWU7XG5cbi8vIGBJc0NvbnN0cnVjdG9yYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNjb25zdHJ1Y3RvclxubW9kdWxlLmV4cG9ydHMgPSAhY29uc3RydWN0IHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNhbGxlZDtcbiAgcmV0dXJuIGlzQ29uc3RydWN0b3JNb2Rlcm4oaXNDb25zdHJ1Y3Rvck1vZGVybi5jYWxsKVxuICAgIHx8ICFpc0NvbnN0cnVjdG9yTW9kZXJuKE9iamVjdClcbiAgICB8fCAhaXNDb25zdHJ1Y3Rvck1vZGVybihmdW5jdGlvbiAoKSB7IGNhbGxlZCA9IHRydWU7IH0pXG4gICAgfHwgY2FsbGVkO1xufSkgPyBpc0NvbnN0cnVjdG9yTGVnYWN5IDogaXNDb25zdHJ1Y3Rvck1vZGVybjtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyICRBcnJheSA9IEFycmF5O1xuXG4vLyBhIHBhcnQgb2YgYEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWxBcnJheSkpIHtcbiAgICBDID0gb3JpZ2luYWxBcnJheS5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmIChpc0NvbnN0cnVjdG9yKEMpICYmIChDID09PSAkQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gJEFycmF5IDogQztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoYXJyYXlTcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWxBcnJheSkpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXgsIGZpbHRlclJlamVjdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PT0gNjtcbiAgdmFyIElTX0ZJTFRFUl9SRUpFQ1QgPSBUWVBFID09PSA3O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQsIHNwZWNpZmljQ3JlYXRlKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCB0aGF0KTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2Uoc2VsZik7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgfHwgSVNfRklMVEVSX1JFSkVDVCA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbHVlLCByZXN1bHQ7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWx1ZSA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzdWx0ID0gYm91bmRGdW5jdGlvbih2YWx1ZSwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgdGFyZ2V0W2luZGV4XSA9IHJlc3VsdDsgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlc3VsdCkgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWx1ZTsgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHB1c2godGFyZ2V0LCB2YWx1ZSk7ICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBmYWxzZTsgICAgICAgICAgICAgLy8gZXZlcnlcbiAgICAgICAgICBjYXNlIDc6IHB1c2godGFyZ2V0LCB2YWx1ZSk7ICAgICAgLy8gZmlsdGVyUmVqZWN0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbiAgbWFwOiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gIGZpbHRlcjogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4gIGV2ZXJ5OiBjcmVhdGVNZXRob2QoNCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiAgZmluZDogY3JlYXRlTWV0aG9kKDUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJSZWplY3RgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maWx0ZXJpbmdcbiAgZmlsdGVyUmVqZWN0OiBjcmVhdGVNZXRob2QoNylcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1rZXlzIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydGllcyAtLSBzYWZlXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyAmJiAhVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIHByb3BzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIHByb3BzW2tleV0pO1xuICByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0IC0tIG9sZCBJRSwgV1NIICovXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydGllc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG5cbnZhciBHVCA9ICc+JztcbnZhciBMVCA9ICc8JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBTQ1JJUFQgPSAnc2NyaXB0JztcbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcblxudmFyIEVtcHR5Q29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cbnZhciBzY3JpcHRUYWcgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICByZXR1cm4gTFQgKyBTQ1JJUFQgKyBHVCArIGNvbnRlbnQgKyBMVCArICcvJyArIFNDUklQVCArIEdUO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIEFjdGl2ZVggT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYID0gZnVuY3Rpb24gKGFjdGl2ZVhEb2N1bWVudCkge1xuICBhY3RpdmVYRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCcnKSk7XG4gIGFjdGl2ZVhEb2N1bWVudC5jbG9zZSgpO1xuICB2YXIgdGVtcCA9IGFjdGl2ZVhEb2N1bWVudC5wYXJlbnRXaW5kb3cuT2JqZWN0O1xuICBhY3RpdmVYRG9jdW1lbnQgPSBudWxsOyAvLyBhdm9pZCBtZW1vcnkgbGVha1xuICByZXR1cm4gdGVtcDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICB2YXIgSlMgPSAnamF2YScgKyBTQ1JJUFQgKyAnOic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzQ3NVxuICBpZnJhbWUuc3JjID0gU3RyaW5nKEpTKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJ2RvY3VtZW50LkY9T2JqZWN0JykpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICByZXR1cm4gaWZyYW1lRG9jdW1lbnQuRjtcbn07XG5cbi8vIENoZWNrIGZvciBkb2N1bWVudC5kb21haW4gYW5kIGFjdGl2ZSB4IHN1cHBvcnRcbi8vIE5vIG5lZWQgdG8gdXNlIGFjdGl2ZSB4IGFwcHJvYWNoIHdoZW4gZG9jdW1lbnQuZG9tYWluIGlzIG5vdCBzZXRcbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzE1MFxuLy8gdmFyaWF0aW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9raXRjYW1icmlkZ2UvZXM1LXNoaW0vY29tbWl0LzRmNzM4YWMwNjYzNDZcbi8vIGF2b2lkIElFIEdDIGJ1Z1xudmFyIGFjdGl2ZVhEb2N1bWVudDtcbnZhciBOdWxsUHJvdG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgYWN0aXZlWERvY3VtZW50ID0gbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGlnbm9yZSAqLyB9XG4gIE51bGxQcm90b09iamVjdCA9IHR5cGVvZiBkb2N1bWVudCAhPSAndW5kZWZpbmVkJ1xuICAgID8gZG9jdW1lbnQuZG9tYWluICYmIGFjdGl2ZVhEb2N1bWVudFxuICAgICAgPyBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCkgLy8gb2xkIElFXG4gICAgICA6IE51bGxQcm90b09iamVjdFZpYUlGcmFtZSgpXG4gICAgOiBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCk7IC8vIFdTSFxuICB2YXIgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBOdWxsUHJvdG9PYmplY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tsZW5ndGhdXTtcbiAgcmV0dXJuIE51bGxQcm90b09iamVjdCgpO1xufTtcblxuaGlkZGVuS2V5c1tJRV9QUk9UT10gPSB0cnVlO1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtY3JlYXRlIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXNNb2R1bGUuZihyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PT0gdW5kZWZpbmVkKSB7XG4gIGRlZmluZVByb3BlcnR5KEFycmF5UHJvdG90eXBlLCBVTlNDT1BBQkxFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogY3JlYXRlKG51bGwpXG4gIH0pO1xufVxuXG4vLyBhZGQgYSBrZXkgdG8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbmQ7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxudmFyIEZJTkQgPSAnZmluZCc7XG52YXIgU0tJUFNfSE9MRVMgPSB0cnVlO1xuXG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LXByb3RvdHlwZS1maW5kIC0tIHRlc3RpbmdcbmlmIChGSU5EIGluIFtdKSBBcnJheSgxKVtGSU5EXShmdW5jdGlvbiAoKSB7IFNLSVBTX0hPTEVTID0gZmFsc2U7IH0pO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogU0tJUFNfSE9MRVMgfSwge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoRklORCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8ge30udG9TdHJpbmcgOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtdG8tc3RyaW5nJyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKCFUT19TVFJJTkdfVEFHX1NVUFBPUlQpIHtcbiAgZGVmaW5lQnVpbHRJbihPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCB0b1N0cmluZywgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgcHJvcGVydHlLZXkgPSB0b1Byb3BlcnR5S2V5KGtleSk7XG4gIGlmIChwcm9wZXJ0eUtleSBpbiBvYmplY3QpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBwcm9wZXJ0eUtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W3Byb3BlcnR5S2V5XSA9IHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzdcbiAgcmV0dXJuIFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBhcnJheS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZm9vOiAxIH07XG4gICAgfTtcbiAgICByZXR1cm4gYXJyYXlbTUVUSE9EX05BTUVdKEJvb2xlYW4pLmZvbyAhPT0gMTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVuY3VycnlUaGlzKFtdLnNsaWNlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgbmF0aXZlU2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdzbGljZScpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyICRBcnJheSA9IEFycmF5O1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNsaWNlXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciBrID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW5ndGgpO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gICAgLy8gaW5saW5lIGBBcnJheVNwZWNpZXNDcmVhdGVgIGZvciB1c2FnZSBuYXRpdmUgYEFycmF5I3NsaWNlYCB3aGVyZSBpdCdzIHBvc3NpYmxlXG4gICAgdmFyIENvbnN0cnVjdG9yLCByZXN1bHQsIG47XG4gICAgaWYgKGlzQXJyYXkoTykpIHtcbiAgICAgIENvbnN0cnVjdG9yID0gTy5jb25zdHJ1Y3RvcjtcbiAgICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgICBpZiAoaXNDb25zdHJ1Y3RvcihDb25zdHJ1Y3RvcikgJiYgKENvbnN0cnVjdG9yID09PSAkQXJyYXkgfHwgaXNBcnJheShDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoQ29uc3RydWN0b3IpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gQ29uc3RydWN0b3JbU1BFQ0lFU107XG4gICAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gbnVsbCkgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoQ29uc3RydWN0b3IgPT09ICRBcnJheSB8fCBDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVTbGljZShPLCBrLCBmaW4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQgPSBuZXcgKENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQgPyAkQXJyYXkgOiBDb25zdHJ1Y3RvcikobWF4KGZpbiAtIGssIDApKTtcbiAgICBmb3IgKG4gPSAwOyBrIDwgZmluOyBrKyssIG4rKykgaWYgKGsgaW4gTykgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBuLCBPW2tdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSwgYXJndW1lbnQpIHtcbiAgdmFyIG1ldGhvZCA9IFtdW01FVEhPRF9OQU1FXTtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgbWV0aG9kLmNhbGwobnVsbCwgYXJndW1lbnQgfHwgZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSwgMSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLWFycmF5LXByb3RvdHlwZS1pbmRleG9mIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMtY2xhdXNlJyk7XG52YXIgJGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgbmF0aXZlSW5kZXhPZiA9IHVuY3VycnlUaGlzKFtdLmluZGV4T2YpO1xuXG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhbmF0aXZlSW5kZXhPZiAmJiAxIC8gbmF0aXZlSW5kZXhPZihbMV0sIDEsIC0wKSA8IDA7XG52YXIgRk9SQ0VEID0gTkVHQVRJVkVfWkVSTyB8fCAhYXJyYXlNZXRob2RJc1N0cmljdCgnaW5kZXhPZicpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5kZXhvZlxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHZhciBmcm9tSW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyBuYXRpdmVJbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCkgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBmcm9tSW5kZXgpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIG5hdGl2ZUtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlS2V5cygxKTsgfSk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTIH0sIHtcbiAga2V5czogZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xuXG52YXIgJFN0cmluZyA9IFN0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGNsYXNzb2YoYXJndW1lbnQpID09PSAnU3ltYm9sJykgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBzdHJpbmcnKTtcbiAgcmV0dXJuICRTdHJpbmcoYXJndW1lbnQpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIHJlZ2V4cC9uby1lbXB0eS1jYXB0dXJpbmctZ3JvdXAsIHJlZ2V4cC9uby1lbXB0eS1ncm91cCwgcmVnZXhwL25vLWxhenktZW5kcyAtLSB0ZXN0aW5nICovXG4vKiBlc2xpbnQtZGlzYWJsZSByZWdleHAvbm8tdXNlbGVzcy1xdWFudGlmaWVyIC0tIHRlc3RpbmcgKi9cbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZWdleHBGbGFncyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZmxhZ3MnKTtcbnZhciBzdGlja3lIZWxwZXJzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdldEludGVybmFsU3RhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKS5nZXQ7XG52YXIgVU5TVVBQT1JURURfRE9UX0FMTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtZG90LWFsbCcpO1xudmFyIFVOU1VQUE9SVEVEX05DRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtbmNnJyk7XG5cbnZhciBuYXRpdmVSZXBsYWNlID0gc2hhcmVkKCduYXRpdmUtc3RyaW5nLXJlcGxhY2UnLCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2UpO1xudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgaW5kZXhPZiA9IHVuY3VycnlUaGlzKCcnLmluZGV4T2YpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS87XG4gIHZhciByZTIgPSAvYiovZztcbiAgY2FsbChuYXRpdmVFeGVjLCByZTEsICdhJyk7XG4gIGNhbGwobmF0aXZlRXhlYywgcmUyLCAnYScpO1xuICByZXR1cm4gcmUxLmxhc3RJbmRleCAhPT0gMCB8fCByZTIubGFzdEluZGV4ICE9PSAwO1xufSkoKTtcblxudmFyIFVOU1VQUE9SVEVEX1kgPSBzdGlja3lIZWxwZXJzLkJST0tFTl9DQVJFVDtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQgfHwgVU5TVVBQT1JURURfWSB8fCBVTlNVUFBPUlRFRF9ET1RfQUxMIHx8IFVOU1VQUE9SVEVEX05DRztcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHJpbmcpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUocmUpO1xuICAgIHZhciBzdHIgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgIHZhciByYXcgPSBzdGF0ZS5yYXc7XG4gICAgdmFyIHJlc3VsdCwgcmVDb3B5LCBsYXN0SW5kZXgsIG1hdGNoLCBpLCBvYmplY3QsIGdyb3VwO1xuXG4gICAgaWYgKHJhdykge1xuICAgICAgcmF3Lmxhc3RJbmRleCA9IHJlLmxhc3RJbmRleDtcbiAgICAgIHJlc3VsdCA9IGNhbGwocGF0Y2hlZEV4ZWMsIHJhdywgc3RyKTtcbiAgICAgIHJlLmxhc3RJbmRleCA9IHJhdy5sYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHZhciBncm91cHMgPSBzdGF0ZS5ncm91cHM7XG4gICAgdmFyIHN0aWNreSA9IFVOU1VQUE9SVEVEX1kgJiYgcmUuc3RpY2t5O1xuICAgIHZhciBmbGFncyA9IGNhbGwocmVnZXhwRmxhZ3MsIHJlKTtcbiAgICB2YXIgc291cmNlID0gcmUuc291cmNlO1xuICAgIHZhciBjaGFyc0FkZGVkID0gMDtcbiAgICB2YXIgc3RyQ29weSA9IHN0cjtcblxuICAgIGlmIChzdGlja3kpIHtcbiAgICAgIGZsYWdzID0gcmVwbGFjZShmbGFncywgJ3knLCAnJyk7XG4gICAgICBpZiAoaW5kZXhPZihmbGFncywgJ2cnKSA9PT0gLTEpIHtcbiAgICAgICAgZmxhZ3MgKz0gJ2cnO1xuICAgICAgfVxuXG4gICAgICBzdHJDb3B5ID0gc3RyaW5nU2xpY2Uoc3RyLCByZS5sYXN0SW5kZXgpO1xuICAgICAgLy8gU3VwcG9ydCBhbmNob3JlZCBzdGlja3kgYmVoYXZpb3IuXG4gICAgICBpZiAocmUubGFzdEluZGV4ID4gMCAmJiAoIXJlLm11bHRpbGluZSB8fCByZS5tdWx0aWxpbmUgJiYgY2hhckF0KHN0ciwgcmUubGFzdEluZGV4IC0gMSkgIT09ICdcXG4nKSkge1xuICAgICAgICBzb3VyY2UgPSAnKD86ICcgKyBzb3VyY2UgKyAnKSc7XG4gICAgICAgIHN0ckNvcHkgPSAnICcgKyBzdHJDb3B5O1xuICAgICAgICBjaGFyc0FkZGVkKys7XG4gICAgICB9XG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgc3RyIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeKD86JyArIHNvdXJjZSArICcpJywgZmxhZ3MpO1xuICAgIH1cblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZS5sYXN0SW5kZXg7XG5cbiAgICBtYXRjaCA9IGNhbGwobmF0aXZlRXhlYywgc3RpY2t5ID8gcmVDb3B5IDogcmUsIHN0ckNvcHkpO1xuXG4gICAgaWYgKHN0aWNreSkge1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIG1hdGNoLmlucHV0ID0gc3RyaW5nU2xpY2UobWF0Y2guaW5wdXQsIGNoYXJzQWRkZWQpO1xuICAgICAgICBtYXRjaFswXSA9IHN0cmluZ1NsaWNlKG1hdGNoWzBdLCBjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2guaW5kZXggPSByZS5sYXN0SW5kZXg7XG4gICAgICAgIHJlLmxhc3RJbmRleCArPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICB9IGVsc2UgcmUubGFzdEluZGV4ID0gMDtcbiAgICB9IGVsc2UgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmUubGFzdEluZGV4ID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24ndCB3b3JrIGZvciAvKC4/KT8vXG4gICAgICBjYWxsKG5hdGl2ZVJlcGxhY2UsIG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAobWF0Y2ggJiYgZ3JvdXBzKSB7XG4gICAgICBtYXRjaC5ncm91cHMgPSBvYmplY3QgPSBjcmVhdGUobnVsbCk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGdyb3VwID0gZ3JvdXBzW2ldO1xuICAgICAgICBvYmplY3RbZ3JvdXBbMF1dID0gbWF0Y2hbZ3JvdXBbMV1dO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NgIGdldHRlciBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtcmVnZXhwLnByb3RvdHlwZS5mbGFnc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuaGFzSW5kaWNlcykgcmVzdWx0ICs9ICdkJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LmRvdEFsbCkgcmVzdWx0ICs9ICdzJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQudW5pY29kZVNldHMpIHJlc3VsdCArPSAndic7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSBhbmQgQ2xvc3VyZSBDb21waWxlciB0cmFuc3BpbGVzIFJlZ0V4cCgnYScsICd5JykgLT4gL2EveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAkUmVnRXhwKCdhJywgJ3knKTtcbiAgcmUubGFzdEluZGV4ID0gMjtcbiAgcmV0dXJuIHJlLmV4ZWMoJ2FiY2QnKSAhPT0gbnVsbDtcbn0pO1xuXG4vLyBVQyBCcm93c2VyIGJ1Z1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzEwMDhcbnZhciBNSVNTRURfU1RJQ0tZID0gVU5TVVBQT1JURURfWSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhJFJlZ0V4cCgnYScsICd5Jykuc3RpY2t5O1xufSk7XG5cbnZhciBCUk9LRU5fQ0FSRVQgPSBVTlNVUFBPUlRFRF9ZIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzczNjg3XG4gIHZhciByZSA9ICRSZWdFeHAoJ15yJywgJ2d5Jyk7XG4gIHJlLmxhc3RJbmRleCA9IDI7XG4gIHJldHVybiByZS5leGVjKCdzdHInKSAhPT0gbnVsbDtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQlJPS0VOX0NBUkVUOiBCUk9LRU5fQ0FSRVQsXG4gIE1JU1NFRF9TVElDS1k6IE1JU1NFRF9TVElDS1ksXG4gIFVOU1VQUE9SVEVEX1k6IFVOU1VQUE9SVEVEX1lcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSBhbmQgQ2xvc3VyZSBDb21waWxlciB0cmFuc3BpbGVzIFJlZ0V4cCgnLicsICdzJykgLT4gLy4vcyBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAkUmVnRXhwKCcuJywgJ3MnKTtcbiAgcmV0dXJuICEocmUuZG90QWxsICYmIHJlLnRlc3QoJ1xcbicpICYmIHJlLmZsYWdzID09PSAncycpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSBhbmQgQ2xvc3VyZSBDb21waWxlciB0cmFuc3BpbGVzIFJlZ0V4cCgnKD88YT5iKScsICdnJykgLT4gLyg/PGE+YikvZyBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAkUmVnRXhwKCcoPzxhPmIpJywgJ2cnKTtcbiAgcmV0dXJuIHJlLmV4ZWMoJ2InKS5ncm91cHMuYSAhPT0gJ2InIHx8XG4gICAgJ2InLnJlcGxhY2UocmUsICckPGE+YycpICE9PSAnYmMnO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBleGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmV4ZWNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLmV4ZWNcbiQoeyB0YXJnZXQ6ICdSZWdFeHAnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAvLi8uZXhlYyAhPT0gZXhlYyB9LCB7XG4gIGV4ZWM6IGV4ZWNcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBhcHBseSA9IEZ1bmN0aW9uUHJvdG90eXBlLmFwcGx5O1xudmFyIGNhbGwgPSBGdW5jdGlvblByb3RvdHlwZS5jYWxsO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tcmVmbGVjdCAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBSZWZsZWN0ID09ICdvYmplY3QnICYmIFJlZmxlY3QuYXBwbHkgfHwgKE5BVElWRV9CSU5EID8gY2FsbC5iaW5kKGFwcGx5KSA6IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGNhbGwuYXBwbHkoYXBwbHksIGFyZ3VtZW50cyk7XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgbW92ZWQgdG8gZW50cnkgcG9pbnRzXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLWNsYXVzZScpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYywgRk9SQ0VELCBTSEFNKSB7XG4gIHZhciBTWU1CT0wgPSB3ZWxsS25vd25TeW1ib2woS0VZKTtcblxuICB2YXIgREVMRUdBVEVTX1RPX1NZTUJPTCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3RyaW5nIG1ldGhvZHMgY2FsbCBzeW1ib2wtbmFtZWQgUmVnRXAgbWV0aG9kc1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPT0gNztcbiAgfSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19FWEVDID0gREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG5cbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBXZSBjYW4ndCB1c2UgcmVhbCByZWdleCBoZXJlIHNpbmNlIGl0IGNhdXNlcyBkZW9wdGltaXphdGlvblxuICAgICAgLy8gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb24gaW4gVjhcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMDZcbiAgICAgIHJlID0ge307XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgICByZS5mbGFncyA9ICcnO1xuICAgICAgcmVbU1lNQk9MXSA9IC8uL1tTWU1CT0xdO1xuICAgIH1cblxuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBleGVjQ2FsbGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG5cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIEZPUkNFRFxuICApIHtcbiAgICB2YXIgdW5jdXJyaWVkTmF0aXZlUmVnRXhwTWV0aG9kID0gdW5jdXJyeVRoaXMoLy4vW1NZTUJPTF0pO1xuICAgIHZhciBtZXRob2RzID0gZXhlYyhTWU1CT0wsICcnW0tFWV0sIGZ1bmN0aW9uIChuYXRpdmVNZXRob2QsIHJlZ2V4cCwgc3RyLCBhcmcyLCBmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgdmFyIHVuY3VycmllZE5hdGl2ZU1ldGhvZCA9IHVuY3VycnlUaGlzKG5hdGl2ZU1ldGhvZCk7XG4gICAgICB2YXIgJGV4ZWMgPSByZWdleHAuZXhlYztcbiAgICAgIGlmICgkZXhlYyA9PT0gcmVnZXhwRXhlYyB8fCAkZXhlYyA9PT0gUmVnRXhwUHJvdG90eXBlLmV4ZWMpIHtcbiAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuY3VycmllZE5hdGl2ZVJlZ0V4cE1ldGhvZChyZWdleHAsIHN0ciwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICB9KTtcblxuICAgIGRlZmluZUJ1aWx0SW4oU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBtZXRob2RzWzBdKTtcbiAgICBkZWZpbmVCdWlsdEluKFJlZ0V4cFByb3RvdHlwZSwgU1lNQk9MLCBtZXRob2RzWzFdKTtcbiAgfVxuXG4gIGlmIChTSEFNKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoUmVnRXhwUHJvdG90eXBlW1NZTUJPTF0sICdzaGFtJywgdHJ1ZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChDT05WRVJUX1RPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBwb3MpIHtcbiAgICB2YXIgUyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICB2YXIgcG9zaXRpb24gPSB0b0ludGVnZXJPckluZmluaXR5KHBvcyk7XG4gICAgdmFyIHNpemUgPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlyc3QsIHNlY29uZDtcbiAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUpIHJldHVybiBDT05WRVJUX1RPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGZpcnN0ID0gY2hhckNvZGVBdChTLCBwb3NpdGlvbik7XG4gICAgcmV0dXJuIGZpcnN0IDwgMHhEODAwIHx8IGZpcnN0ID4gMHhEQkZGIHx8IHBvc2l0aW9uICsgMSA9PT0gc2l6ZVxuICAgICAgfHwgKHNlY29uZCA9IGNoYXJDb2RlQXQoUywgcG9zaXRpb24gKyAxKSkgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGXG4gICAgICAgID8gQ09OVkVSVF9UT19TVFJJTkdcbiAgICAgICAgICA/IGNoYXJBdChTLCBwb3NpdGlvbilcbiAgICAgICAgICA6IGZpcnN0XG4gICAgICAgIDogQ09OVkVSVF9UT19TVFJJTkdcbiAgICAgICAgICA/IHN0cmluZ1NsaWNlKFMsIHBvc2l0aW9uLCBwb3NpdGlvbiArIDIpXG4gICAgICAgICAgOiAoZmlyc3QgLSAweEQ4MDAgPDwgMTApICsgKHNlY29uZCAtIDB4REMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmNvZGVwb2ludGF0XG4gIGNvZGVBdDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuYXRgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG4gIGNoYXJBdDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xuXG4vLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGNoYXJBdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xuXG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZG9zL25vLXZ1bG5lcmFibGUgLS0gc2FmZVxudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCYnYF18XFxkezEsMn18PFtePl0qPikvZztcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCA9IC9cXCQoWyQmJ2BdfFxcZHsxLDJ9KS9nO1xuXG4vLyBgR2V0U3Vic3RpdHV0aW9uYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgdmFyIHRhaWxQb3MgPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gIH1cbiAgcmV0dXJuIHJlcGxhY2UocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICB2YXIgY2FwdHVyZTtcbiAgICBzd2l0Y2ggKGNoYXJBdChjaCwgMCkpIHtcbiAgICAgIGNhc2UgJyQnOiByZXR1cm4gJyQnO1xuICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHJpbmdTbGljZShzdHIsIDAsIHBvc2l0aW9uKTtcbiAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHJpbmdTbGljZShzdHIsIHRhaWxQb3MpO1xuICAgICAgY2FzZSAnPCc6XG4gICAgICAgIGNhcHR1cmUgPSBuYW1lZENhcHR1cmVzW3N0cmluZ1NsaWNlKGNoLCAxLCAtMSldO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgIGlmIChuID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIGlmIChmIDw9IG0pIHJldHVybiBjYXB0dXJlc1tmIC0gMV0gPT09IHVuZGVmaW5lZCA/IGNoYXJBdChjaCwgMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaGFyQXQoY2gsIDEpO1xuICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgfVxuICAgICAgICBjYXB0dXJlID0gY2FwdHVyZXNbbiAtIDFdO1xuICAgIH1cbiAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIGlmIChpc0NhbGxhYmxlKGV4ZWMpKSB7XG4gICAgdmFyIHJlc3VsdCA9IGNhbGwoZXhlYywgUiwgUyk7XG4gICAgaWYgKHJlc3VsdCAhPT0gbnVsbCkgYW5PYmplY3QocmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjbGFzc29mKFIpID09PSAnUmVnRXhwJykgcmV0dXJuIGNhbGwocmVnZXhwRXhlYywgUiwgUyk7XG4gIHRocm93IG5ldyAkVHlwZUVycm9yKCdSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIGdldFN1YnN0aXR1dGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtc3Vic3RpdHV0aW9uJyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgUkVQTEFDRSA9IHdlbGxLbm93blN5bWJvbCgncmVwbGFjZScpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIGNvbmNhdCA9IHVuY3VycnlUaGlzKFtdLmNvbmNhdCk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xudmFyIHN0cmluZ0luZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBJRSA8PSAxMSByZXBsYWNlcyAkMCB3aXRoIHRoZSB3aG9sZSBtYXRjaCwgYXMgaWYgaXQgd2FzICQmXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82MDI0NjY2L2dldHRpbmctaWUtdG8tcmVwbGFjZS1hLXJlZ2V4LXdpdGgtdGhlLWxpdGVyYWwtc3RyaW5nLTBcbnZhciBSRVBMQUNFX0tFRVBTXyQwID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9wcmVmZXItZXNjYXBlLXJlcGxhY2VtZW50LWRvbGxhci1jaGFyIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiAnYScucmVwbGFjZSgvLi8sICckMCcpID09PSAnJDAnO1xufSkoKTtcblxuLy8gU2FmYXJpIDw9IDEzLjAuMyg/KSBzdWJzdGl0dXRlcyBudGggY2FwdHVyZSB3aGVyZSBuPm0gd2l0aCBhbiBlbXB0eSBzdHJpbmdcbnZhciBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA9IChmdW5jdGlvbiAoKSB7XG4gIGlmICgvLi9bUkVQTEFDRV0pIHtcbiAgICByZXR1cm4gLy4vW1JFUExBQ0VdKCdhJywgJyQwJykgPT09ICcnO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn0pKCk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby11c2VsZXNzLWRvbGxhci1yZXBsYWNlbWVudHMgLS0gZmFsc2UgcG9zaXRpdmVcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdyZXBsYWNlJywgZnVuY3Rpb24gKF8sIG5hdGl2ZVJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgVU5TQUZFX1NVQlNUSVRVVEUgPSBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA/ICckJyA6ICckMCc7XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHJlcGxhY2VyID0gaXNOdWxsT3JVbmRlZmluZWQoc2VhcmNoVmFsdWUpID8gdW5kZWZpbmVkIDogZ2V0TWV0aG9kKHNlYXJjaFZhbHVlLCBSRVBMQUNFKTtcbiAgICAgIHJldHVybiByZXBsYWNlclxuICAgICAgICA/IGNhbGwocmVwbGFjZXIsIHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogY2FsbChuYXRpdmVSZXBsYWNlLCB0b1N0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHN0cmluZywgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdCh0aGlzKTtcbiAgICAgIHZhciBTID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgcmVwbGFjZVZhbHVlID09ICdzdHJpbmcnICYmXG4gICAgICAgIHN0cmluZ0luZGV4T2YocmVwbGFjZVZhbHVlLCBVTlNBRkVfU1VCU1RJVFVURSkgPT09IC0xICYmXG4gICAgICAgIHN0cmluZ0luZGV4T2YocmVwbGFjZVZhbHVlLCAnJDwnKSA9PT0gLTFcbiAgICAgICkge1xuICAgICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZVJlcGxhY2UsIHJ4LCBTLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IGlzQ2FsbGFibGUocmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IHRvU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG5cbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICB2YXIgZnVsbFVuaWNvZGU7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG5cbiAgICAgICAgcHVzaChyZXN1bHRzLCByZXN1bHQpO1xuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XG5cbiAgICAgICAgdmFyIG1hdGNoU3RyID0gdG9TdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XG4gICAgICB2YXIgbmV4dFNvdXJjZVBvc2l0aW9uID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuXG4gICAgICAgIHZhciBtYXRjaGVkID0gdG9TdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXJPckluZmluaXR5KHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICB2YXIgcmVwbGFjZW1lbnQ7XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgcHVzaChjYXB0dXJlcywgbWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gY29uY2F0KFttYXRjaGVkXSwgY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcbiAgICAgICAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSBwdXNoKHJlcGxhY2VyQXJncywgbmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSB0b1N0cmluZyhhcHBseShyZXBsYWNlVmFsdWUsIHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgUywgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBuZXh0U291cmNlUG9zaXRpb24pIHtcbiAgICAgICAgICBhY2N1bXVsYXRlZFJlc3VsdCArPSBzdHJpbmdTbGljZShTLCBuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgc3RyaW5nU2xpY2UoUywgbmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG59LCAhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgfHwgIVJFUExBQ0VfS0VFUFNfJDAgfHwgUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maWx0ZXI7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ2ZpbHRlcicpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgRi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBudWxsO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldHByb3RvdHlwZW9mIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciAkT2JqZWN0ID0gT2JqZWN0O1xudmFyIE9iamVjdFByb3RvdHlwZSA9ICRPYmplY3QucHJvdG90eXBlO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldHByb3RvdHlwZW9mXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldHByb3RvdHlwZW9mIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID8gJE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIChPKSB7XG4gIHZhciBvYmplY3QgPSB0b09iamVjdChPKTtcbiAgaWYgKGhhc093bihvYmplY3QsIElFX1BST1RPKSkgcmV0dXJuIG9iamVjdFtJRV9QUk9UT107XG4gIHZhciBjb25zdHJ1Y3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgaWYgKGlzQ2FsbGFibGUoY29uc3RydWN0b3IpICYmIG9iamVjdCBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIGNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgJE9iamVjdCA/IE9iamVjdFByb3RvdHlwZSA6IG51bGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBvYmplY3RHZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKS5mO1xuXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSB1bmN1cnJ5VGhpcygkcHJvcGVydHlJc0VudW1lcmFibGUpO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxuLy8gaW4gc29tZSBJRSB2ZXJzaW9ucywgYHByb3BlcnR5SXNFbnVtZXJhYmxlYCByZXR1cm5zIGluY29ycmVjdCByZXN1bHQgb24gaW50ZWdlciBrZXlzXG4vLyBvZiBgbnVsbGAgcHJvdG90eXBlIG9iamVjdHNcbnZhciBJRV9CVUcgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtY3JlYXRlIC0tIHNhZmVcbiAgdmFyIE8gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBPWzJdID0gMjtcbiAgcmV0dXJuICFwcm9wZXJ0eUlzRW51bWVyYWJsZShPLCAyKTtcbn0pO1xuXG4vLyBgT2JqZWN0LnsgZW50cmllcywgdmFsdWVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVE9fRU5UUklFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoaXQpO1xuICAgIHZhciBrZXlzID0gb2JqZWN0S2V5cyhPKTtcbiAgICB2YXIgSUVfV09SS0FST1VORCA9IElFX0JVRyAmJiBvYmplY3RHZXRQcm90b3R5cGVPZihPKSA9PT0gbnVsbDtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSB7XG4gICAgICBrZXkgPSBrZXlzW2krK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IChJRV9XT1JLQVJPVU5EID8ga2V5IGluIE8gOiBwcm9wZXJ0eUlzRW51bWVyYWJsZShPLCBrZXkpKSkge1xuICAgICAgICBwdXNoKHJlc3VsdCwgVE9fRU5UUklFUyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBPYmplY3QuZW50cmllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmVudHJpZXNcbiAgZW50cmllczogY3JlYXRlTWV0aG9kKHRydWUpLFxuICAvLyBgT2JqZWN0LnZhbHVlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnZhbHVlc1xuICB2YWx1ZXM6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkdmFsdWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1hcnJheScpLnZhbHVlcztcblxuLy8gYE9iamVjdC52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QudmFsdWVzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKE8pIHtcbiAgICByZXR1cm4gJHZhbHVlcyhPKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgUCkge1xuICBpZiAoIWRlbGV0ZSBPW1BdKSB0aHJvdyBuZXcgJFR5cGVFcnJvcignQ2Fubm90IGRlbGV0ZSBwcm9wZXJ0eSAnICsgdHJ5VG9TdHJpbmcoUCkgKyAnIG9mICcgKyB0cnlUb1N0cmluZyhPKSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG5cbnZhciAkQXJyYXkgPSBBcnJheTtcbnZhciBtYXggPSBNYXRoLm1heDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gIHZhciBrID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW5ndGgpO1xuICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICB2YXIgcmVzdWx0ID0gJEFycmF5KG1heChmaW4gLSBrLCAwKSk7XG4gIHZhciBuID0gMDtcbiAgZm9yICg7IGsgPCBmaW47IGsrKywgbisrKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIG4sIE9ba10pO1xuICByZXN1bHQubGVuZ3RoID0gbjtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxudmFyIG1lcmdlU29ydCA9IGZ1bmN0aW9uIChhcnJheSwgY29tcGFyZWZuKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHZhciBtaWRkbGUgPSBmbG9vcihsZW5ndGggLyAyKTtcbiAgcmV0dXJuIGxlbmd0aCA8IDggPyBpbnNlcnRpb25Tb3J0KGFycmF5LCBjb21wYXJlZm4pIDogbWVyZ2UoXG4gICAgYXJyYXksXG4gICAgbWVyZ2VTb3J0KGFycmF5U2xpY2UoYXJyYXksIDAsIG1pZGRsZSksIGNvbXBhcmVmbiksXG4gICAgbWVyZ2VTb3J0KGFycmF5U2xpY2UoYXJyYXksIG1pZGRsZSksIGNvbXBhcmVmbiksXG4gICAgY29tcGFyZWZuXG4gICk7XG59O1xuXG52YXIgaW5zZXJ0aW9uU29ydCA9IGZ1bmN0aW9uIChhcnJheSwgY29tcGFyZWZuKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHZhciBpID0gMTtcbiAgdmFyIGVsZW1lbnQsIGo7XG5cbiAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICBqID0gaTtcbiAgICBlbGVtZW50ID0gYXJyYXlbaV07XG4gICAgd2hpbGUgKGogJiYgY29tcGFyZWZuKGFycmF5W2ogLSAxXSwgZWxlbWVudCkgPiAwKSB7XG4gICAgICBhcnJheVtqXSA9IGFycmF5Wy0tal07XG4gICAgfVxuICAgIGlmIChqICE9PSBpKyspIGFycmF5W2pdID0gZWxlbWVudDtcbiAgfSByZXR1cm4gYXJyYXk7XG59O1xuXG52YXIgbWVyZ2UgPSBmdW5jdGlvbiAoYXJyYXksIGxlZnQsIHJpZ2h0LCBjb21wYXJlZm4pIHtcbiAgdmFyIGxsZW5ndGggPSBsZWZ0Lmxlbmd0aDtcbiAgdmFyIHJsZW5ndGggPSByaWdodC5sZW5ndGg7XG4gIHZhciBsaW5kZXggPSAwO1xuICB2YXIgcmluZGV4ID0gMDtcblxuICB3aGlsZSAobGluZGV4IDwgbGxlbmd0aCB8fCByaW5kZXggPCBybGVuZ3RoKSB7XG4gICAgYXJyYXlbbGluZGV4ICsgcmluZGV4XSA9IChsaW5kZXggPCBsbGVuZ3RoICYmIHJpbmRleCA8IHJsZW5ndGgpXG4gICAgICA/IGNvbXBhcmVmbihsZWZ0W2xpbmRleF0sIHJpZ2h0W3JpbmRleF0pIDw9IDAgPyBsZWZ0W2xpbmRleCsrXSA6IHJpZ2h0W3JpbmRleCsrXVxuICAgICAgOiBsaW5kZXggPCBsbGVuZ3RoID8gbGVmdFtsaW5kZXgrK10gOiByaWdodFtyaW5kZXgrK107XG4gIH0gcmV0dXJuIGFycmF5O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZXJnZVNvcnQ7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciBmaXJlZm94ID0gdXNlckFnZW50Lm1hdGNoKC9maXJlZm94XFwvKFxcZCspL2kpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICEhZmlyZWZveCAmJiArZmlyZWZveFsxXTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBVQSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC9NU0lFfFRyaWRlbnQvLnRlc3QoVUEpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgd2Via2l0ID0gdXNlckFnZW50Lm1hdGNoKC9BcHBsZVdlYktpdFxcLyhcXGQrKVxcLi8pO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICEhd2Via2l0ICYmICt3ZWJraXRbMV07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgZGVsZXRlUHJvcGVydHlPclRocm93ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlbGV0ZS1wcm9wZXJ0eS1vci10aHJvdycpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaW50ZXJuYWxTb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNvcnQnKTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBGRiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtZmYtdmVyc2lvbicpO1xudmFyIElFX09SX0VER0UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWllLW9yLWVkZ2UnKTtcbnZhciBWOCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIFdFQktJVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtd2Via2l0LXZlcnNpb24nKTtcblxudmFyIHRlc3QgPSBbXTtcbnZhciBuYXRpdmVTb3J0ID0gdW5jdXJyeVRoaXModGVzdC5zb3J0KTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXModGVzdC5wdXNoKTtcblxuLy8gSUU4LVxudmFyIEZBSUxTX09OX1VOREVGSU5FRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KTtcbi8vIFY4IGJ1Z1xudmFyIEZBSUxTX09OX05VTEwgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHRlc3Quc29ydChudWxsKTtcbn0pO1xuLy8gT2xkIFdlYktpdFxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdzb3J0Jyk7XG5cbnZhciBTVEFCTEVfU09SVCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGZlYXR1cmUgZGV0ZWN0aW9uIGNhbiBiZSB0b28gc2xvdywgc28gY2hlY2sgZW5naW5lcyB2ZXJzaW9uc1xuICBpZiAoVjgpIHJldHVybiBWOCA8IDcwO1xuICBpZiAoRkYgJiYgRkYgPiAzKSByZXR1cm47XG4gIGlmIChJRV9PUl9FREdFKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKFdFQktJVCkgcmV0dXJuIFdFQktJVCA8IDYwMztcblxuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBjb2RlLCBjaHIsIHZhbHVlLCBpbmRleDtcblxuICAvLyBnZW5lcmF0ZSBhbiBhcnJheSB3aXRoIG1vcmUgNTEyIGVsZW1lbnRzIChDaGFrcmEgYW5kIG9sZCBWOCBmYWlscyBvbmx5IGluIHRoaXMgY2FzZSlcbiAgZm9yIChjb2RlID0gNjU7IGNvZGUgPCA3NjsgY29kZSsrKSB7XG4gICAgY2hyID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcblxuICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgY2FzZSA2NjogY2FzZSA2OTogY2FzZSA3MDogY2FzZSA3MjogdmFsdWUgPSAzOyBicmVhaztcbiAgICAgIGNhc2UgNjg6IGNhc2UgNzE6IHZhbHVlID0gNDsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiB2YWx1ZSA9IDI7XG4gICAgfVxuXG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgNDc7IGluZGV4KyspIHtcbiAgICAgIHRlc3QucHVzaCh7IGs6IGNociArIGluZGV4LCB2OiB2YWx1ZSB9KTtcbiAgICB9XG4gIH1cblxuICB0ZXN0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGIudiAtIGEudjsgfSk7XG5cbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGVzdC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBjaHIgPSB0ZXN0W2luZGV4XS5rLmNoYXJBdCgwKTtcbiAgICBpZiAocmVzdWx0LmNoYXJBdChyZXN1bHQubGVuZ3RoIC0gMSkgIT09IGNocikgcmVzdWx0ICs9IGNocjtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQgIT09ICdER0JFRkhBQ0lKSyc7XG59KTtcblxudmFyIEZPUkNFRCA9IEZBSUxTX09OX1VOREVGSU5FRCB8fCAhRkFJTFNfT05fTlVMTCB8fCAhU1RSSUNUX01FVEhPRCB8fCAhU1RBQkxFX1NPUlQ7XG5cbnZhciBnZXRTb3J0Q29tcGFyZSA9IGZ1bmN0aW9uIChjb21wYXJlZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgaWYgKHkgPT09IHVuZGVmaW5lZCkgcmV0dXJuIC0xO1xuICAgIGlmICh4ID09PSB1bmRlZmluZWQpIHJldHVybiAxO1xuICAgIGlmIChjb21wYXJlZm4gIT09IHVuZGVmaW5lZCkgcmV0dXJuICtjb21wYXJlZm4oeCwgeSkgfHwgMDtcbiAgICByZXR1cm4gdG9TdHJpbmcoeCkgPiB0b1N0cmluZyh5KSA/IDEgOiAtMTtcbiAgfTtcbn07XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc29ydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb3J0XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgIGlmIChjb21wYXJlZm4gIT09IHVuZGVmaW5lZCkgYUNhbGxhYmxlKGNvbXBhcmVmbik7XG5cbiAgICB2YXIgYXJyYXkgPSB0b09iamVjdCh0aGlzKTtcblxuICAgIGlmIChTVEFCTEVfU09SVCkgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkID8gbmF0aXZlU29ydChhcnJheSkgOiBuYXRpdmVTb3J0KGFycmF5LCBjb21wYXJlZm4pO1xuXG4gICAgdmFyIGl0ZW1zID0gW107XG4gICAgdmFyIGFycmF5TGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoYXJyYXkpO1xuICAgIHZhciBpdGVtc0xlbmd0aCwgaW5kZXg7XG5cbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBhcnJheUxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKGluZGV4IGluIGFycmF5KSBwdXNoKGl0ZW1zLCBhcnJheVtpbmRleF0pO1xuICAgIH1cblxuICAgIGludGVybmFsU29ydChpdGVtcywgZ2V0U29ydENvbXBhcmUoY29tcGFyZWZuKSk7XG5cbiAgICBpdGVtc0xlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKGl0ZW1zKTtcbiAgICBpbmRleCA9IDA7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBpdGVtc0xlbmd0aCkgYXJyYXlbaW5kZXhdID0gaXRlbXNbaW5kZXgrK107XG4gICAgd2hpbGUgKGluZGV4IDwgYXJyYXlMZW5ndGgpIGRlbGV0ZVByb3BlcnR5T3JUaHJvdyhhcnJheSwgaW5kZXgrKyk7XG5cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5tYXA7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ21hcCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eW5hbWVzIC0tIHNhZmUgKi9cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2Utc2ltcGxlJyk7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5TmFtZXMoaXQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBhcnJheVNsaWNlKHdpbmRvd05hbWVzKTtcbiAgfVxufTtcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIGNsYXNzb2YoaXQpID09PSAnV2luZG93J1xuICAgID8gZ2V0V2luZG93TmFtZXMoaXQpXG4gICAgOiAkZ2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgbWFrZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFrZS1idWlsdC1pbicpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBuYW1lLCBkZXNjcmlwdG9yKSB7XG4gIGlmIChkZXNjcmlwdG9yLmdldCkgbWFrZUJ1aWx0SW4oZGVzY3JpcHRvci5nZXQsIG5hbWUsIHsgZ2V0dGVyOiB0cnVlIH0pO1xuICBpZiAoZGVzY3JpcHRvci5zZXQpIG1ha2VCdWlsdEluKGRlc2NyaXB0b3Iuc2V0LCBuYW1lLCB7IHNldHRlcjogdHJ1ZSB9KTtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5LmYodGFyZ2V0LCBuYW1lLCBkZXNjcmlwdG9yKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbmV4cG9ydHMuZiA9IHdlbGxLbm93blN5bWJvbDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgdmFyIFN5bWJvbCA9IHBhdGguU3ltYm9sIHx8IChwYXRoLlN5bWJvbCA9IHt9KTtcbiAgaWYgKCFoYXNPd24oU3ltYm9sLCBOQU1FKSkgZGVmaW5lUHJvcGVydHkoU3ltYm9sLCBOQU1FLCB7XG4gICAgdmFsdWU6IHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZihOQU1FKVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIFN5bWJvbCA9IGdldEJ1aWx0SW4oJ1N5bWJvbCcpO1xuICB2YXIgU3ltYm9sUHJvdG90eXBlID0gU3ltYm9sICYmIFN5bWJvbC5wcm90b3R5cGU7XG4gIHZhciB2YWx1ZU9mID0gU3ltYm9sUHJvdG90eXBlICYmIFN5bWJvbFByb3RvdHlwZS52YWx1ZU9mO1xuICB2YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG4gIGlmIChTeW1ib2xQcm90b3R5cGUgJiYgIVN5bWJvbFByb3RvdHlwZVtUT19QUklNSVRJVkVdKSB7XG4gICAgLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciAubGVuZ3RoXG4gICAgZGVmaW5lQnVpbHRJbihTeW1ib2xQcm90b3R5cGUsIFRPX1BSSU1JVElWRSwgZnVuY3Rpb24gKGhpbnQpIHtcbiAgICAgIHJldHVybiBjYWxsKHZhbHVlT2YsIHRoaXMpO1xuICAgIH0sIHsgYXJpdHk6IDEgfSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgVEFHLCBTVEFUSUMpIHtcbiAgaWYgKHRhcmdldCAmJiAhU1RBVElDKSB0YXJnZXQgPSB0YXJnZXQucHJvdG90eXBlO1xuICBpZiAodGFyZ2V0ICYmICFoYXNPd24odGFyZ2V0LCBUT19TVFJJTkdfVEFHKSkge1xuICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwgVE9fU1RSSU5HX1RBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBUQUcgfSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24nKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgbmF0aXZlT2JqZWN0Q3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZGVmaW5lUHJvcGVydGllc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lQnVpbHRJbkFjY2Vzc29yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi1hY2Nlc3NvcicpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xudmFyIGRlZmluZVN5bWJvbFRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1kZWZpbmUtdG8tcHJpbWl0aXZlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcblxudmFyIEhJRERFTiA9IHNoYXJlZEtleSgnaGlkZGVuJyk7XG52YXIgU1lNQk9MID0gJ1N5bWJvbCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNZTUJPTCk7XG5cbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBTeW1ib2xQcm90b3R5cGUgPSAkU3ltYm9sICYmICRTeW1ib2xbUFJPVE9UWVBFXTtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZjtcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvdHlwZVN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xuXG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBVU0VfU0VUVEVSID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgZmFsbGJhY2tEZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIHZhciBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgUCk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKSBkZWxldGUgT2JqZWN0UHJvdG90eXBlW1BdO1xuICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgJiYgTyAhPT0gT2JqZWN0UHJvdG90eXBlKSB7XG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlLCBQLCBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKTtcbiAgfVxufTtcblxudmFyIHNldFN5bWJvbERlc2NyaXB0b3IgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RDcmVhdGUobmF0aXZlRGVmaW5lUHJvcGVydHkoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT09IDc7XG59KSA/IGZhbGxiYWNrRGVmaW5lUHJvcGVydHkgOiBuYXRpdmVEZWZpbmVQcm9wZXJ0eTtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnLCBkZXNjcmlwdGlvbikge1xuICB2YXIgc3ltYm9sID0gQWxsU3ltYm9sc1t0YWddID0gbmF0aXZlT2JqZWN0Q3JlYXRlKFN5bWJvbFByb3RvdHlwZSk7XG4gIHNldEludGVybmFsU3RhdGUoc3ltYm9sLCB7XG4gICAgdHlwZTogU1lNQk9MLFxuICAgIHRhZzogdGFnLFxuICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvblxuICB9KTtcbiAgaWYgKCFERVNDUklQVE9SUykgc3ltYm9sLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gIHJldHVybiBzeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBpZiAoTyA9PT0gT2JqZWN0UHJvdG90eXBlKSAkZGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCwgQXR0cmlidXRlcyk7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChoYXNPd24oQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghQXR0cmlidXRlcy5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhc093bihPLCBISURERU4pKSBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBISURERU4sIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB7fSkpO1xuICAgICAgT1tISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzT3duKE8sIEhJRERFTikgJiYgT1tISURERU5dW2tleV0pIE9bSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBBdHRyaWJ1dGVzID0gbmF0aXZlT2JqZWN0Q3JlYXRlKEF0dHJpYnV0ZXMsIHsgZW51bWVyYWJsZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjcmlwdG9yKE8sIGtleSwgQXR0cmlidXRlcyk7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIGtleSwgQXR0cmlidXRlcyk7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBwcm9wZXJ0aWVzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMocHJvcGVydGllcykuY29uY2F0KCRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcGVydGllcykpO1xuICAkZm9yRWFjaChrZXlzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFERVNDUklQVE9SUyB8fCBjYWxsKCRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgcHJvcGVydGllcywga2V5KSkgJGRlZmluZVByb3BlcnR5KE8sIGtleSwgcHJvcGVydGllc1trZXldKTtcbiAgfSk7XG4gIHJldHVybiBPO1xufTtcblxudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gbmF0aXZlT2JqZWN0Q3JlYXRlKE8pIDogJGRlZmluZVByb3BlcnRpZXMobmF0aXZlT2JqZWN0Q3JlYXRlKE8pLCBQcm9wZXJ0aWVzKTtcbn07XG5cbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBQID0gdG9Qcm9wZXJ0eUtleShWKTtcbiAgdmFyIGVudW1lcmFibGUgPSBjYWxsKG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLCB0aGlzLCBQKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXNPd24oQWxsU3ltYm9scywgUCkgJiYgIWhhc093bihPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQKSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gZW51bWVyYWJsZSB8fCAhaGFzT3duKHRoaXMsIFApIHx8ICFoYXNPd24oQWxsU3ltYm9scywgUCkgfHwgaGFzT3duKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW1BdXG4gICAgPyBlbnVtZXJhYmxlIDogdHJ1ZTtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgdmFyIGl0ID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhc093bihPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBkZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xuICBpZiAoZGVzY3JpcHRvciAmJiBoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAhKGhhc093bihpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSB7XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZGVzY3JpcHRvcjtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIWhhc093bihBbGxTeW1ib2xzLCBrZXkpICYmICFoYXNPd24oaGlkZGVuS2V5cywga2V5KSkgcHVzaChyZXN1bHQsIGtleSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiAoTykge1xuICB2YXIgSVNfT0JKRUNUX1BST1RPVFlQRSA9IE8gPT09IE9iamVjdFByb3RvdHlwZTtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhJU19PQkpFQ1RfUFJPVE9UWVBFID8gT2JqZWN0UHJvdG90eXBlU3ltYm9scyA6IHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgKCFJU19PQkpFQ1RfUFJPVE9UWVBFIHx8IGhhc093bihPYmplY3RQcm90b3R5cGUsIGtleSkpKSB7XG4gICAgICBwdXNoKHJlc3VsdCwgQWxsU3ltYm9sc1trZXldKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gYFN5bWJvbGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLWNvbnN0cnVjdG9yXG5pZiAoIU5BVElWRV9TWU1CT0wpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAoaXNQcm90b3R5cGVPZihTeW1ib2xQcm90b3R5cGUsIHRoaXMpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSAhYXJndW1lbnRzLmxlbmd0aCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6ICR0b1N0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciB0YWcgPSB1aWQoZGVzY3JpcHRpb24pO1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciAkdGhpcyA9IHRoaXMgPT09IHVuZGVmaW5lZCA/IGdsb2JhbCA6IHRoaXM7XG4gICAgICBpZiAoJHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSkgY2FsbChzZXR0ZXIsIE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXNPd24oJHRoaXMsIEhJRERFTikgJiYgaGFzT3duKCR0aGlzW0hJRERFTl0sIHRhZykpICR0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0U3ltYm9sRGVzY3JpcHRvcigkdGhpcywgdGFnLCBkZXNjcmlwdG9yKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmICghKGVycm9yIGluc3RhbmNlb2YgUmFuZ2VFcnJvcikpIHRocm93IGVycm9yO1xuICAgICAgICBmYWxsYmFja0RlZmluZVByb3BlcnR5KCR0aGlzLCB0YWcsIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIFVTRV9TRVRURVIpIHNldFN5bWJvbERlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6IHNldHRlciB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcsIGRlc2NyaXB0aW9uKTtcbiAgfTtcblxuICBTeW1ib2xQcm90b3R5cGUgPSAkU3ltYm9sW1BST1RPVFlQRV07XG5cbiAgZGVmaW5lQnVpbHRJbihTeW1ib2xQcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnRhZztcbiAgfSk7XG5cbiAgZGVmaW5lQnVpbHRJbigkU3ltYm9sLCAnd2l0aG91dFNldHRlcicsIGZ1bmN0aW9uIChkZXNjcmlwdGlvbikge1xuICAgIHJldHVybiB3cmFwKHVpZChkZXNjcmlwdGlvbiksIGRlc2NyaXB0aW9uKTtcbiAgfSk7XG5cbiAgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgZGVmaW5lUHJvcGVydGllc01vZHVsZS5mID0gJGRlZmluZVByb3BlcnRpZXM7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2VsbEtub3duU3ltYm9sKG5hbWUpLCBuYW1lKTtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1TeW1ib2wtZGVzY3JpcHRpb25cbiAgICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoU3ltYm9sUHJvdG90eXBlLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5kZXNjcmlwdGlvbjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIUlTX1BVUkUpIHtcbiAgICAgIGRlZmluZUJ1aWx0SW4oT2JqZWN0UHJvdG90eXBlLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHsgdW5zYWZlOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIU5BVElWRV9TWU1CT0wgfSwge1xuICBTeW1ib2w6ICRTeW1ib2xcbn0pO1xuXG4kZm9yRWFjaChvYmplY3RLZXlzKFdlbGxLbm93blN5bWJvbHNTdG9yZSksIGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlZmluZVdlbGxLbm93blN5bWJvbChuYW1lKTtcbn0pO1xuXG4kKHsgdGFyZ2V0OiBTWU1CT0wsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gZmFsc2U7IH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvclxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lc1xufSk7XG5cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5kZWZpbmVTeW1ib2xUb1ByaW1pdGl2ZSgpO1xuXG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCBTWU1CT0wpO1xuXG5oaWRkZW5LZXlzW0hJRERFTl0gPSB0cnVlO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gc2FmZSAqL1xubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MICYmICEhU3ltYm9sWydmb3InXSAmJiAhIVN5bWJvbC5rZXlGb3I7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIE5BVElWRV9TWU1CT0xfUkVHSVNUUlkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLXJlZ2lzdHJ5LWRldGVjdGlvbicpO1xuXG52YXIgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3RyaW5nLXRvLXN5bWJvbC1yZWdpc3RyeScpO1xudmFyIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC10by1zdHJpbmctcmVnaXN0cnknKTtcblxuLy8gYFN5bWJvbC5mb3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuZm9yXG4kKHsgdGFyZ2V0OiAnU3ltYm9sJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTF9SRUdJU1RSWSB9LCB7XG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHN0cmluZyA9IHRvU3RyaW5nKGtleSk7XG4gICAgaWYgKGhhc093bihTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5LCBzdHJpbmcpKSByZXR1cm4gU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddO1xuICAgIHZhciBzeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKShzdHJpbmcpO1xuICAgIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXSA9IHN5bWJvbDtcbiAgICBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bWJvbF0gPSBzdHJpbmc7XG4gICAgcmV0dXJuIHN5bWJvbDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgTkFUSVZFX1NZTUJPTF9SRUdJU1RSWSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtcmVnaXN0cnktZGV0ZWN0aW9uJyk7XG5cbnZhciBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtdG8tc3RyaW5nLXJlZ2lzdHJ5Jyk7XG5cbi8vIGBTeW1ib2wua2V5Rm9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmtleWZvclxuJCh7IHRhcmdldDogJ1N5bWJvbCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0xfUkVHSVNUUlkgfSwge1xuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IG5ldyBUeXBlRXJyb3IodHJ5VG9TdHJpbmcoc3ltKSArICcgaXMgbm90IGEgc3ltYm9sJyk7XG4gICAgaWYgKGhhc093bihTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5LCBzeW0pKSByZXR1cm4gU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1dO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcblxudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocmVwbGFjZXIpIHtcbiAgaWYgKGlzQ2FsbGFibGUocmVwbGFjZXIpKSByZXR1cm4gcmVwbGFjZXI7XG4gIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJldHVybjtcbiAgdmFyIHJhd0xlbmd0aCA9IHJlcGxhY2VyLmxlbmd0aDtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXdMZW5ndGg7IGkrKykge1xuICAgIHZhciBlbGVtZW50ID0gcmVwbGFjZXJbaV07XG4gICAgaWYgKHR5cGVvZiBlbGVtZW50ID09ICdzdHJpbmcnKSBwdXNoKGtleXMsIGVsZW1lbnQpO1xuICAgIGVsc2UgaWYgKHR5cGVvZiBlbGVtZW50ID09ICdudW1iZXInIHx8IGNsYXNzb2YoZWxlbWVudCkgPT09ICdOdW1iZXInIHx8IGNsYXNzb2YoZWxlbWVudCkgPT09ICdTdHJpbmcnKSBwdXNoKGtleXMsIHRvU3RyaW5nKGVsZW1lbnQpKTtcbiAgfVxuICB2YXIga2V5c0xlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgcm9vdCA9IHRydWU7XG4gIHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIGlmIChyb290KSB7XG4gICAgICByb290ID0gZmFsc2U7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmIChpc0FycmF5KHRoaXMpKSByZXR1cm4gdmFsdWU7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBrZXlzTGVuZ3RoOyBqKyspIGlmIChrZXlzW2pdID09PSBrZXkpIHJldHVybiB2YWx1ZTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xudmFyIGdldFJlcGxhY2VyRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWpzb24tcmVwbGFjZXItZnVuY3Rpb24nKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24nKTtcblxudmFyICRTdHJpbmcgPSBTdHJpbmc7XG52YXIgJHN0cmluZ2lmeSA9IGdldEJ1aWx0SW4oJ0pTT04nLCAnc3RyaW5naWZ5Jyk7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKC8uLy5leGVjKTtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgbnVtYmVyVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcygxLjAudG9TdHJpbmcpO1xuXG52YXIgdGVzdGVyID0gL1tcXHVEODAwLVxcdURGRkZdL2c7XG52YXIgbG93ID0gL15bXFx1RDgwMC1cXHVEQkZGXSQvO1xudmFyIGhpID0gL15bXFx1REMwMC1cXHVERkZGXSQvO1xuXG52YXIgV1JPTkdfU1lNQk9MU19DT05WRVJTSU9OID0gIU5BVElWRV9TWU1CT0wgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgc3ltYm9sID0gZ2V0QnVpbHRJbignU3ltYm9sJykoJ3N0cmluZ2lmeSBkZXRlY3Rpb24nKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgcmV0dXJuICRzdHJpbmdpZnkoW3N5bWJvbF0pICE9PSAnW251bGxdJ1xuICAgIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAgIHx8ICRzdHJpbmdpZnkoeyBhOiBzeW1ib2wgfSkgIT09ICd7fSdcbiAgICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICAgIHx8ICRzdHJpbmdpZnkoT2JqZWN0KHN5bWJvbCkpICE9PSAne30nO1xufSk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXdlbGwtZm9ybWVkLXN0cmluZ2lmeVxudmFyIElMTF9GT1JNRURfVU5JQ09ERSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICRzdHJpbmdpZnkoJ1xcdURGMDZcXHVEODM0JykgIT09ICdcIlxcXFx1ZGYwNlxcXFx1ZDgzNFwiJ1xuICAgIHx8ICRzdHJpbmdpZnkoJ1xcdURFQUQnKSAhPT0gJ1wiXFxcXHVkZWFkXCInO1xufSk7XG5cbnZhciBzdHJpbmdpZnlXaXRoU3ltYm9sc0ZpeCA9IGZ1bmN0aW9uIChpdCwgcmVwbGFjZXIpIHtcbiAgdmFyIGFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cyk7XG4gIHZhciAkcmVwbGFjZXIgPSBnZXRSZXBsYWNlckZ1bmN0aW9uKHJlcGxhY2VyKTtcbiAgaWYgKCFpc0NhbGxhYmxlKCRyZXBsYWNlcikgJiYgKGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gIGFyZ3NbMV0gPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIC8vIHNvbWUgb2xkIGltcGxlbWVudGF0aW9ucyAobGlrZSBXZWJLaXQpIGNvdWxkIHBhc3MgbnVtYmVycyBhcyBrZXlzXG4gICAgaWYgKGlzQ2FsbGFibGUoJHJlcGxhY2VyKSkgdmFsdWUgPSBjYWxsKCRyZXBsYWNlciwgdGhpcywgJFN0cmluZyhrZXkpLCB2YWx1ZSk7XG4gICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgfTtcbiAgcmV0dXJuIGFwcGx5KCRzdHJpbmdpZnksIG51bGwsIGFyZ3MpO1xufTtcblxudmFyIGZpeElsbEZvcm1lZCA9IGZ1bmN0aW9uIChtYXRjaCwgb2Zmc2V0LCBzdHJpbmcpIHtcbiAgdmFyIHByZXYgPSBjaGFyQXQoc3RyaW5nLCBvZmZzZXQgLSAxKTtcbiAgdmFyIG5leHQgPSBjaGFyQXQoc3RyaW5nLCBvZmZzZXQgKyAxKTtcbiAgaWYgKChleGVjKGxvdywgbWF0Y2gpICYmICFleGVjKGhpLCBuZXh0KSkgfHwgKGV4ZWMoaGksIG1hdGNoKSAmJiAhZXhlYyhsb3csIHByZXYpKSkge1xuICAgIHJldHVybiAnXFxcXHUnICsgbnVtYmVyVG9TdHJpbmcoY2hhckNvZGVBdChtYXRjaCwgMCksIDE2KTtcbiAgfSByZXR1cm4gbWF0Y2g7XG59O1xuXG5pZiAoJHN0cmluZ2lmeSkge1xuICAvLyBgSlNPTi5zdHJpbmdpZnlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWpzb24uc3RyaW5naWZ5XG4gICQoeyB0YXJnZXQ6ICdKU09OJywgc3RhdDogdHJ1ZSwgYXJpdHk6IDMsIGZvcmNlZDogV1JPTkdfU1lNQk9MU19DT05WRVJTSU9OIHx8IElMTF9GT1JNRURfVU5JQ09ERSB9LCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCwgcmVwbGFjZXIsIHNwYWNlKSB7XG4gICAgICB2YXIgYXJncyA9IGFycmF5U2xpY2UoYXJndW1lbnRzKTtcbiAgICAgIHZhciByZXN1bHQgPSBhcHBseShXUk9OR19TWU1CT0xTX0NPTlZFUlNJT04gPyBzdHJpbmdpZnlXaXRoU3ltYm9sc0ZpeCA6ICRzdHJpbmdpZnksIG51bGwsIGFyZ3MpO1xuICAgICAgcmV0dXJuIElMTF9GT1JNRURfVU5JQ09ERSAmJiB0eXBlb2YgcmVzdWx0ID09ICdzdHJpbmcnID8gcmVwbGFjZShyZXN1bHQsIHRlc3RlciwgZml4SWxsRm9ybWVkKSA6IHJlc3VsdDtcbiAgICB9XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xuXG4vLyBWOCB+IENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbnZhciBGT1JDRUQgPSAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlzeW1ib2xzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICAgIHZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyAkZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRvT2JqZWN0KGl0KSkgOiBbXTtcbiAgfVxufSk7XG4iLCIvLyBgU3ltYm9sLnByb3RvdHlwZS5kZXNjcmlwdGlvbmAgZ2V0dGVyXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25cbid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGRlZmluZUJ1aWx0SW5BY2Nlc3NvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4tYWNjZXNzb3InKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xuXG52YXIgTmF0aXZlU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBTeW1ib2xQcm90b3R5cGUgPSBOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLnByb3RvdHlwZTtcblxuaWYgKERFU0NSSVBUT1JTICYmIGlzQ2FsbGFibGUoTmF0aXZlU3ltYm9sKSAmJiAoISgnZGVzY3JpcHRpb24nIGluIFN5bWJvbFByb3RvdHlwZSkgfHxcbiAgLy8gU2FmYXJpIDEyIGJ1Z1xuICBOYXRpdmVTeW1ib2woKS5kZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkXG4pKSB7XG4gIHZhciBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUgPSB7fTtcbiAgLy8gd3JhcCBTeW1ib2wgY29uc3RydWN0b3IgZm9yIGNvcnJlY3Qgd29yayB3aXRoIHVuZGVmaW5lZCBkZXNjcmlwdGlvblxuICB2YXIgU3ltYm9sV3JhcHBlciA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoIDwgMSB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHRvU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHJlc3VsdCA9IGlzUHJvdG90eXBlT2YoU3ltYm9sUHJvdG90eXBlLCB0aGlzKVxuICAgICAgPyBuZXcgTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKVxuICAgICAgLy8gaW4gRWRnZSAxMywgU3RyaW5nKFN5bWJvbCh1bmRlZmluZWQpKSA9PT0gJ1N5bWJvbCh1bmRlZmluZWQpJ1xuICAgICAgOiBkZXNjcmlwdGlvbiA9PT0gdW5kZWZpbmVkID8gTmF0aXZlU3ltYm9sKCkgOiBOYXRpdmVTeW1ib2woZGVzY3JpcHRpb24pO1xuICAgIGlmIChkZXNjcmlwdGlvbiA9PT0gJycpIEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZVtyZXN1bHRdID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoU3ltYm9sV3JhcHBlciwgTmF0aXZlU3ltYm9sKTtcbiAgU3ltYm9sV3JhcHBlci5wcm90b3R5cGUgPSBTeW1ib2xQcm90b3R5cGU7XG4gIFN5bWJvbFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN5bWJvbFdyYXBwZXI7XG5cbiAgdmFyIE5BVElWRV9TWU1CT0wgPSBTdHJpbmcoTmF0aXZlU3ltYm9sKCdkZXNjcmlwdGlvbiBkZXRlY3Rpb24nKSkgPT09ICdTeW1ib2woZGVzY3JpcHRpb24gZGV0ZWN0aW9uKSc7XG4gIHZhciB0aGlzU3ltYm9sVmFsdWUgPSB1bmN1cnJ5VGhpcyhTeW1ib2xQcm90b3R5cGUudmFsdWVPZik7XG4gIHZhciBzeW1ib2xEZXNjcmlwdGl2ZVN0cmluZyA9IHVuY3VycnlUaGlzKFN5bWJvbFByb3RvdHlwZS50b1N0cmluZyk7XG4gIHZhciByZWdleHAgPSAvXlN5bWJvbFxcKCguKilcXClbXildKyQvO1xuICB2YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xuICB2YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFN5bWJvbFByb3RvdHlwZSwgJ2Rlc2NyaXB0aW9uJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgdmFyIHN5bWJvbCA9IHRoaXNTeW1ib2xWYWx1ZSh0aGlzKTtcbiAgICAgIGlmIChoYXNPd24oRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlLCBzeW1ib2wpKSByZXR1cm4gJyc7XG4gICAgICB2YXIgc3RyaW5nID0gc3ltYm9sRGVzY3JpcHRpdmVTdHJpbmcoc3ltYm9sKTtcbiAgICAgIHZhciBkZXNjID0gTkFUSVZFX1NZTUJPTCA/IHN0cmluZ1NsaWNlKHN0cmluZywgNywgLTEpIDogcmVwbGFjZShzdHJpbmcsIHJlZ2V4cCwgJyQxJyk7XG4gICAgICByZXR1cm4gZGVzYyA9PT0gJycgPyB1bmRlZmluZWQgOiBkZXNjO1xuICAgIH1cbiAgfSk7XG5cbiAgJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgU3ltYm9sOiBTeW1ib2xXcmFwcGVyXG4gIH0pO1xufVxuIiwiLyogZ2xvYmFsIF8sIEhGR19MYXlvdXRfQnVpbGRlciwgalF1ZXJ5ICovXG5cbmxldCBDdXN0b21pemVCdWlsZGVyVjFcbmxldCBoZmdQYW5lbHMgPSB7fTtcblxuKCBmdW5jdGlvbigkKSB7XG4gIGxldCAkZG9jdW1lbnQgPSAkKCBkb2N1bWVudCApXG4gIGxldCB3cGN1c3RvbWl6ZSA9IHdwLmN1c3RvbWl6ZSB8fCBudWxsXG4gIGxldCBpc1JUTCA9IEhGR19MYXlvdXRfQnVpbGRlci5pc1JUTFxuXG4gIEN1c3RvbWl6ZUJ1aWxkZXJWMSA9IGZ1bmN0aW9uKG9wdGlvbnMsIGlkKSB7XG4gICAgbGV0IEJ1aWxkZXIgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBjb250cm9sSWQ6ICcnLFxuICAgICAgY29sczogMTIsXG4gICAgICBjZWxsSGVpZ2h0OiA0NSxcbiAgICAgIGl0ZW1zOiBbXSxcbiAgICAgIGNvbnRhaW5lcjogbnVsbCxcbiAgICAgIHdpZGdldHNTaWRlYmFyOiBudWxsLFxuICAgICAgcmVhZHk6IGZhbHNlLFxuICAgICAgZGV2aWNlczogeyBkZXNrdG9wOiAnRGVza3RvcCcsIG1vYmlsZTogJ01vYmlsZS9UYWJsZXQnIH0sXG4gICAgICBhY3RpdmVQYW5lbDogJ2Rlc2t0b3AnLFxuICAgICAgcGFuZWxzOiB7fSxcbiAgICAgIGFjdGl2ZVJvdzogJ21haW4nLFxuICAgICAgZHJhZ2dpbmdJdGVtOiBudWxsLFxuICAgICAgaW5zZXJ0UG9pbnQ6IG51bGwsXG4gICAgICBpbnNlcnRSb3c6IG51bGwsXG4gICAgICBnZXRUZW1wbGF0ZTogXy5tZW1vaXplKCBmdW5jdGlvbigpIHtcbiAgICAgICAgbGV0IGNvbnRyb2wgPSB0aGlzXG4gICAgICAgIGxldCBjb21waWxlZCxcbiAgICAgICAgICAvKlxuICAgICAgICAgICAqIFVuZGVyc2NvcmUncyBkZWZhdWx0IEVSQi1zdHlsZSB0ZW1wbGF0ZXMgYXJlIGluY29tcGF0aWJsZSB3aXRoIFBIUFxuICAgICAgICAgICAqIHdoZW4gYXNwX3RhZ3MgaXMgZW5hYmxlZCwgc28gV29yZFByZXNzIHVzZXMgTXVzdGFjaGUtaW5zcGlyZWQgdGVtcGxhdGluZyBzeW50YXguXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAc2VlIHRyYWMgdGlja2V0ICMyMjM0NC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgZXZhbHVhdGU6IC88IyhbXFxzXFxTXSs/KSM+L2csXG4gICAgICAgICAgICBpbnRlcnBvbGF0ZTogL3t7eyhbXFxzXFxTXSs/KX19fS9nLFxuICAgICAgICAgICAgZXNjYXBlOiAve3soW159XSs/KX19KD8hfSkvZyxcbiAgICAgICAgICAgIHZhcmlhYmxlOiAnZGF0YSdcbiAgICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGEsIGlkLCBkYXRhTGV0aWFibGVOYW1lKSB7XG4gICAgICAgICAgaWYgKCBfLmlzVW5kZWZpbmVkKCBpZCApICkge1xuICAgICAgICAgICAgaWQgPSAndG1wbC1jdXN0b21pemUtY29udHJvbC0nICsgY29udHJvbC50eXBlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICFfLmlzVW5kZWZpbmVkKCBkYXRhTGV0aWFibGVOYW1lICkgJiZcbiAgICAgICAgICAgIF8uaXNTdHJpbmcoIGRhdGFMZXRpYWJsZU5hbWUgKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgb3B0aW9ucy52YXJpYWJsZSA9IGRhdGFMZXRpYWJsZU5hbWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9ucy52YXJpYWJsZSA9ICdkYXRhJ1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb21waWxlZCA9IF8udGVtcGxhdGUoICQoICcjJyArIGlkICkuaHRtbCgpLCBudWxsLCBvcHRpb25zIClcbiAgICAgICAgICByZXR1cm4gY29tcGlsZWQoIGRhdGEgKVxuICAgICAgICB9XG4gICAgICB9ICksXG4gICAgICBkcmFnX2Ryb3A6IGZ1bmN0aW9uKCkge1xuICAgICAgICBsZXQgdGhhdCA9IHRoaXNcblxuICAgICAgICAkKCAnLmhmZy0tZGV2aWNlLXBhbmVsJywgdGhhdC5jb250YWluZXIgKS5lYWNoKCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBsZXQgcGFuZWwgPSAkKCB0aGlzIClcbiAgICAgICAgICBsZXQgZGV2aWNlID0gcGFuZWwuZGF0YSggJ2RldmljZScgKVxuICAgICAgICAgIHRoYXQucGFuZWxzW2RldmljZV0gPSB7fVxuICAgICAgICAgICQoICcuaGZnLS1jYi1pdGVtcycsIHBhbmVsICkuZWFjaCggZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgIGxldCBkYXRhTmFtZSA9ICQoIHRoaXMgKS5hdHRyKCAnZGF0YS1pZCcgKSB8fCAnJ1xuICAgICAgICAgICAgbGV0IGlkID0gJ19zaWRfJyArIGRldmljZSArIGluZGV4XG4gICAgICAgICAgICBpZiAoIGRhdGFOYW1lICkge1xuICAgICAgICAgICAgICBpZCA9ICdfc2lkXycgKyBkZXZpY2UgKyAnLScgKyBkYXRhTmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJCggdGhpcyApLmF0dHIoICdpZCcsIGlkIClcbiAgICAgICAgICB9IClcbiAgICAgICAgICAkKCAnLmdyaWQtc3RhY2ssIC5oZmctLXNpZGViYXItaXRlbXMnLCBwYW5lbCApLmVhY2goIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IF9pZCA9ICQoIHRoaXMgKS5hdHRyKCAnZGF0YS1pZCcgKSB8fCAnJ1xuICAgICAgICAgICAgdGhhdC5wYW5lbHNbZGV2aWNlXVtfaWRdID0gJCggdGhpcyApXG4gICAgICAgICAgICAkKCB0aGlzICkuZHJvcHBhYmxlKCB7XG4gICAgICAgICAgICAgIG91dDogZnVuY3Rpb24oZXZlbnQsIHVpKSB7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG92ZXI6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuICAgICAgICAgICAgICAgIC8vbGV0ICR3cmFwcGVyID0gJCggdGhpcyApO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEBzZWUgaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vZHJvcHBhYmxlLyNldmVudC1vdmVyXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRyb3A6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuICAgICAgICAgICAgICAgIGxldCAkd3JhcHBlciA9ICQoIHRoaXMgKVxuICAgICAgICAgICAgICAgIHRoYXQuZ3JpZHN0ZXIoICR3cmFwcGVyLCB1aSwgZXZlbnQgKVxuICAgICAgICAgICAgICAgIHRoYXQuc2F2ZSgpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gKVxuICAgICAgICAgIH0gKVxuXG4gICAgICAgICAgbGV0IHNpZGViYXIgPSAkKCAnI19zaWRfbW9iaWxlLXNpZGViYXInLCBwYW5lbCApXG4gICAgICAgICAgbGV0IHNpZGViYXJJZCA9IHNpZGViYXIuYXR0ciggJ2lkJyApIHx8IGZhbHNlXG4gICAgICAgICAgJCggJy5ncmlkLXN0YWNrLWl0ZW0nLCBwYW5lbCApLmRyYWdnYWJsZSgge1xuICAgICAgICAgICAgcmV2ZXJ0OiAnaW52YWxpZCcsXG4gICAgICAgICAgICBjb25uZWN0VG9Tb3J0YWJsZTogc2lkZWJhcklkXG4gICAgICAgICAgICAgID8gJyMnICsgc2lkZWJhcklkXG4gICAgICAgICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICBzdGFydDogZnVuY3Rpb24oZXZlbnQsIHVpKSB7XG4gICAgICAgICAgICAgICQoICdib2R5JyApLmFkZENsYXNzKCAnYnVpbGRlci1pdGVtLW1vdmluZycgKVxuICAgICAgICAgICAgICAkKCAnLmhmZy0tY2ItaXRlbXMnLCBwYW5lbCApLmNzcyggJ3otaW5kZXgnLCAnJyApXG4gICAgICAgICAgICAgIHVpLmhlbHBlci5wYXJlbnQoKS5jc3MoICd6LWluZGV4JywgOTk5OSApXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24oZXZlbnQsIHVpKSB7XG4gICAgICAgICAgICAgICQoICdib2R5JyApLnJlbW92ZUNsYXNzKCAnYnVpbGRlci1pdGVtLW1vdmluZycgKVxuICAgICAgICAgICAgICAkKCAnLmhmZy0tY2ItaXRlbXMnLCBwYW5lbCApLmNzcyggJ3otaW5kZXgnLCAnJyApXG4gICAgICAgICAgICAgIHVpLmhlbHBlci5wYXJlbnQoKS5jc3MoICd6LWluZGV4JywgJycgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gKVxuXG4gICAgICAgICAgaWYgKCBzaWRlYmFyLmxlbmd0aCA+IDAgKSB7XG4gICAgICAgICAgICBzaWRlYmFyLnNvcnRhYmxlKCB7XG4gICAgICAgICAgICAgIHJldmVydDogdHJ1ZSxcbiAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbihldmVudCwgdWkpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnNhdmUoKVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICByZWNlaXZlOiBmdW5jdGlvbihldmVudCwgdWkpIHtcbiAgICAgICAgICAgICAgICAkKCB0aGlzIClcbiAgICAgICAgICAgICAgICAgIC5maW5kKCAnLmdyaWQtc3RhY2staXRlbScgKVxuICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoICdzdHlsZScgKVxuICAgICAgICAgICAgICAgICAgLmF0dHIoICdkYXRhLWdzLXdpZHRoJywgMSApXG4gICAgICAgICAgICAgICAgdGhhdC5zYXZlKClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSApXG5cbiAgICAgICAgICAgIHRoYXQucGFuZWxzW2RldmljZV1bJ3NpZGViYXInXSA9IHNpZGViYXJcbiAgICAgICAgICB9XG4gICAgICAgIH0gKVxuICAgICAgfSxcbiAgICAgIHNvcnRHcmlkOiBmdW5jdGlvbigkd3JhcHBlcikge1xuICAgICAgICAkKCAnLmdyaWQtc3RhY2staXRlbScsICR3cmFwcGVyICkuZWFjaCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbGV0IGVsID0gJCggdGhpcyApXG4gICAgICAgICAgbGV0IHggPSBlbC5hdHRyKCAnZGF0YS1ncy14JyApIHx8IDBcbiAgICAgICAgICB4ID0gcGFyc2VJbnQoIHggKVxuICAgICAgICAgIGxldCBuZXh0ID0gZWwubmV4dCgpXG4gICAgICAgICAgaWYgKCBuZXh0Lmxlbmd0aCA+IDAgKSB7XG4gICAgICAgICAgICBsZXQgbnggPSBuZXh0LmF0dHIoICdkYXRhLWdzLXgnICkgfHwgMFxuICAgICAgICAgICAgbnggPSBwYXJzZUludCggbnggKVxuICAgICAgICAgICAgaWYgKCB4ID4gbnggKSB7XG4gICAgICAgICAgICAgIGVsLmluc2VydEFmdGVyKCBuZXh0IClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gKVxuICAgICAgfSxcbiAgICAgIGdldFg6IGZ1bmN0aW9uKCRpdGVtKSB7XG4gICAgICAgIGxldCB4ID0gJGl0ZW0uYXR0ciggJ2RhdGEtZ3MteCcgKSB8fCAwXG4gICAgICAgIHJldHVybiBwYXJzZUludCggeCApXG4gICAgICB9LFxuICAgICAgZ2V0VzogZnVuY3Rpb24oJGl0ZW0sIGRmKSB7XG4gICAgICAgIGlmICggXy5pc1VuZGVmaW5lZCggZGYgKSApIHtcbiAgICAgICAgICBkZiA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgbGV0IHdcbiAgICAgICAgaWYgKCBkZiApIHtcbiAgICAgICAgICB3ID0gJGl0ZW0uYXR0ciggJ2RhdGEtZGYtd2lkdGgnICkgfHwgMVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHcgPSAkaXRlbS5hdHRyKCAnZGF0YS1ncy13aWR0aCcgKSB8fCAxXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KCB3IClcbiAgICAgIH0sXG4gICAgICBncmlkR2V0SXRlbUluZm86IGZ1bmN0aW9uKCRpdGVtLCBmbGFnLCAkd3JhcHBlcikge1xuICAgICAgICBsZXQgdGhhdCA9IHRoaXNcbiAgICAgICAgbGV0IHggPSB0aGF0LmdldFgoICRpdGVtIClcbiAgICAgICAgbGV0IHcgPSB0aGF0LmdldFcoICRpdGVtIClcbiAgICAgICAgbGV0IHNsb3RCZWZvcmUgPSAwXG4gICAgICAgIGxldCBzbG90QWZ0ZXIgPSAwXG4gICAgICAgIGxldCBpXG5cbiAgICAgICAgbGV0IGJyID0gZmFsc2VcbiAgICAgICAgLy8gR2V0IGVtcHR5IHNsb3RzIGJlZm9yZVxuICAgICAgICBpID0geCAtIDFcbiAgICAgICAgd2hpbGUgKGkgPj0gMCAmJiAhYnIpIHtcbiAgICAgICAgICBpZiAoIGZsYWdbaV0gPT09IDAgKSB7XG4gICAgICAgICAgICBzbG90QmVmb3JlKytcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnIgPSB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGktLVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IGVtcHR5IHNsb3RzIGFmdGVyXG4gICAgICAgIGJyID0gZmFsc2VcbiAgICAgICAgaSA9IHggKyB3XG4gICAgICAgIHdoaWxlIChpIDwgdGhhdC5jb2xzICYmICFicikge1xuICAgICAgICAgIGlmICggZmxhZ1tpXSA9PT0gMCApIHtcbiAgICAgICAgICAgIHNsb3RBZnRlcisrXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJyID0gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBpKytcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZmxhZzogZmxhZyxcbiAgICAgICAgICB4OiB4LFxuICAgICAgICAgIHc6IHcsXG4gICAgICAgICAgaXRlbTogJGl0ZW0sXG4gICAgICAgICAgYmVmb3JlOiBzbG90QmVmb3JlLCAvLyBlbXB0eSBiZWZvcmVcbiAgICAgICAgICBhZnRlcjogc2xvdEFmdGVyLCAvLyBlbXB0eSBhZnRlclxuICAgICAgICAgIGlkOiAkaXRlbS5hdHRyKCAnZGF0YS1pZCcgKSB8fCAnJyxcbiAgICAgICAgICB3cmFwcGVyOiAkd3JhcHBlclxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdXBkYXRlSXRlbXNQb3NpdGlvbnM6IGZ1bmN0aW9uKGZsYWcpIHtcbiAgICAgICAgbGV0IG1heENvbCA9IHRoaXMuY29sc1xuICAgICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPD0gbWF4Q29sOyBpKysgKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdHlwZW9mIGZsYWdbaV0gPT09ICdvYmplY3QnIHx8XG4gICAgICAgICAgICB0eXBlb2YgZmxhZ1tpXSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgZmxhZ1tpXS5hdHRyKCAnZGF0YS1ncy14JywgaSApXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZ3JpZHN0ZXI6IGZ1bmN0aW9uKCR3cmFwcGVyLCB1aSwgZXZlbnQpIHtcbiAgICAgICAgbGV0IGZsYWcgPSBbXVxuICAgICAgICBsZXQgbWF4Q29sID0gdGhpcy5jb2xzXG5cbiAgICAgICAgbGV0IGFkZEl0ZW1Ub0ZsYWcgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgbGV0IHggPSBub2RlLngsXG4gICAgICAgICAgICB3ID0gbm9kZS53XG4gICAgICAgICAgbGV0IGVsID0gbm9kZS5lbFxuXG4gICAgICAgICAgZm9yICggbGV0IGkgPSB4OyBpIDwgeCArIHc7IGkrKyApIHtcbiAgICAgICAgICAgIGlmICggaSA9PT0geCApIHtcbiAgICAgICAgICAgICAgZmxhZ1tpXSA9IGVsIC8vIG1lYW4gc3RhcnQgaXRlbSBpdGVtXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmbGFnW2ldID0gMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZW1vdmVOb2RlID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgIGxldCB4ID0gbm9kZS54LFxuICAgICAgICAgICAgdyA9IG5vZGUud1xuICAgICAgICAgIGZvciAoIGxldCBpID0geDsgaSA8IHggKyB3OyBpKysgKSB7XG4gICAgICAgICAgICBmbGFnW2ldID0gMFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBnZXRFbXB0eVNsb3RzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbGV0IGVtcHR5U2xvdHMgPSAwXG4gICAgICAgICAgZm9yICggbGV0IGkgPSAwOyBpIDwgbWF4Q29sOyBpKysgKSB7XG4gICAgICAgICAgICBpZiAoIGZsYWdbaV0gPT09IDAgKSB7XG4gICAgICAgICAgICAgIGVtcHR5U2xvdHMrK1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBlbXB0eVNsb3RzXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZ2V0UmlnaHRFbXB0eVNsb3RGcm9tWCA9IGZ1bmN0aW9uKHgsIHN0b3BXaGVuTm90RW1wdHkpIHtcbiAgICAgICAgICBsZXQgZW1wdHlTbG90cyA9IDBcbiAgICAgICAgICBmb3IgKCBsZXQgaSA9IHg7IGkgPCBtYXhDb2w7IGkrKyApIHtcbiAgICAgICAgICAgIGlmICggZmxhZ1tpXSA9PT0gMCApIHtcbiAgICAgICAgICAgICAgZW1wdHlTbG90cysrXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoIHN0b3BXaGVuTm90RW1wdHkgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5U2xvdHNcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZW1wdHlTbG90c1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGdldExlZnRFbXB0eVNsb3RGcm9tWCA9IGZ1bmN0aW9uKHgsIHN0b3BXaGVuTm90RW1wdHkpIHtcbiAgICAgICAgICBsZXQgZW1wdHlTbG90cyA9IDBcbiAgICAgICAgICBpZiAoIHR5cGVvZiBzdG9wV2hlbk5vdEVtcHR5ID09PSAndW5kZWZpbmVkJyApIHtcbiAgICAgICAgICAgIHN0b3BXaGVuTm90RW1wdHkgPSBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKCBsZXQgaSA9IHg7IGkgPj0gMDsgaS0tICkge1xuICAgICAgICAgICAgaWYgKCBmbGFnW2ldID09PSAwICkge1xuICAgICAgICAgICAgICBlbXB0eVNsb3RzKytcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICggc3RvcFdoZW5Ob3RFbXB0eSApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW1wdHlTbG90c1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBlbXB0eVNsb3RzXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaXNFbXB0eVggPSBmdW5jdGlvbih4KSB7XG4gICAgICAgICAgcmV0dXJuIGZsYWdbeF0gPT09IDBcblxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNoZWNrRW5vdWdoU3BhY2VGcm9tWCA9IGZ1bmN0aW9uKHgsIHcpIHtcbiAgICAgICAgICBsZXQgY2hlY2sgPSB0cnVlXG4gICAgICAgICAgbGV0IGkgPSB4XG4gICAgICAgICAgd2hpbGUgKGkgPCB4ICsgdykge1xuICAgICAgICAgICAgaWYgKCBmbGFnW2ldICE9PSAwICkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrK1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY2hlY2tcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBnZXRQcmV2QmxvY2sgPSBmdW5jdGlvbih4KSB7XG4gICAgICAgICAgaWYgKCB4IDwgMCApIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHg6IC0xLFxuICAgICAgICAgICAgICB3OiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGV0IGksXG4gICAgICAgICAgICBfeCA9IC0xLFxuICAgICAgICAgICAgX3h3LFxuICAgICAgICAgICAgZm91bmRcblxuICAgICAgICAgIGlmICggZmxhZ1t4XSA8PSAxICkge1xuICAgICAgICAgICAgaSA9IHhcbiAgICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICAgIHdoaWxlIChpID49IDAgJiYgIWZvdW5kKSB7XG4gICAgICAgICAgICAgIGlmICggZmxhZ1tpXSAhPT0gMSAmJiBmbGFnW2ldICE9PSAwICkge1xuICAgICAgICAgICAgICAgIF94ID0gaVxuICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGktLVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfeCA9IHhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpID0gX3ggKyAxXG4gICAgICAgICAgX3h3ID0gX3hcblxuICAgICAgICAgIHdoaWxlIChmbGFnW2ldID09PSAxKSB7XG4gICAgICAgICAgICBfeHcrK1xuICAgICAgICAgICAgaSsrXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBfeCxcbiAgICAgICAgICAgIHc6IF94dyArIDEgLSBfeFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBnZXROZXh0QmxvY2sgPSBmdW5jdGlvbih4KSB7XG4gICAgICAgICAgbGV0IGksXG4gICAgICAgICAgICBfeCA9IC0xLFxuICAgICAgICAgICAgX3h3LFxuICAgICAgICAgICAgZm91bmRcblxuICAgICAgICAgIGlmICggZmxhZ1t4XSA8IG1heENvbCApIHtcbiAgICAgICAgICAgIGkgPSB4XG4gICAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgICB3aGlsZSAoaSA8IG1heENvbCAmJiAhZm91bmQpIHtcbiAgICAgICAgICAgICAgaWYgKCBmbGFnW2ldICE9PSAxICYmIGZsYWdbaV0gIT09IDAgKSB7XG4gICAgICAgICAgICAgICAgX3ggPSBpXG4gICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaSsrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF94ID0geFxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIHdpZHRoIG9mIHRoaXMgaXRlbVxuICAgICAgICAgIGkgPSBfeCArIDFcbiAgICAgICAgICBfeHcgPSBfeCAvLyB0aGUgbWluIHdpZHRoIGlzIDFcblxuICAgICAgICAgIHdoaWxlIChmbGFnW2ldID09PSAxKSB7XG4gICAgICAgICAgICBfeHcrK1xuICAgICAgICAgICAgaSsrXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBfeCxcbiAgICAgICAgICAgIHc6IF94dyArIDEgLSBfeFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAgTW92ZSBhbGwgSXRlbXMgZm9ybSB4IHRvIGxlZnRcbiAgICAgICAgICogQHBhcmFtIHhcbiAgICAgICAgICogQHBhcmFtIG51bWJlciBwb3NpdGlvbiBsZWZ0IG5lZWQgdG8gbW92ZVxuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgICAgICovXG4gICAgICAgIGxldCBtb3ZlQWxsSXRlbXNGcm9tWFRvTGVmdCA9IGZ1bmN0aW9uKHgsIG51bWJlcikge1xuICAgICAgICAgIGxldCBiYWNrdXBGbGFnID0gZmxhZy5zbGljZSgpXG4gICAgICAgICAgbGV0IG1heE51bWJlciA9IGdldExlZnRFbXB0eVNsb3RGcm9tWCggeCApXG5cbiAgICAgICAgICBpZiAoIG1heE51bWJlciA9PT0gMCApIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IHByZXYgPSBnZXRQcmV2QmxvY2soIHggKVxuICAgICAgICAgIGxldCBuZXdYID0gcHJldi54ID49IDAgPyBwcmV2LnggKyBwcmV2LncgLSAxIDogeFxuICAgICAgICAgIGxldCBuTW92ZSA9IG51bWJlclxuICAgICAgICAgIGlmICggbnVtYmVyID4gbWF4TnVtYmVyICkge1xuICAgICAgICAgICAgbk1vdmUgPSBtYXhOdW1iZXJcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBGaW5kIGVtcHR5IHBvc2l0aW9ucyBmcm9tIHggdG8gbGVmdDtcbiAgICAgICAgICAvLyB4RSBpcyBuZXcgZW1wdHkgcG9zaXRpb24gZnJvbSB4XG4gICAgICAgICAgbGV0IHhFID0gMCxcbiAgICAgICAgICAgIGMgPSAwLFxuICAgICAgICAgICAgaSA9IG5ld1hcbiAgICAgICAgICB3aGlsZSAoYyA8PSBuTW92ZSAmJiBpID49IDApIHtcbiAgICAgICAgICAgIGlmICggZmxhZ1tpXSA9PT0gMCApIHtcbiAgICAgICAgICAgICAgYysrXG4gICAgICAgICAgICAgIHhFID0gaVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaS0tXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gTW92ZSBpdGVtIGZyb20geCB0byB4RSBhbmQgd2UgbmVlZCBlbXB0eSBmbGFnIGZyb20geCB0byB4RVxuICAgICAgICAgIGxldCBmbGFnTm9FbXB0eSA9IFtdLFxuICAgICAgICAgICAgaiA9IDBcbiAgICAgICAgICBmb3IgKCBpID0geEU7IGkgPD0gbmV3WDsgaSsrICkge1xuICAgICAgICAgICAgZmxhZ1tpXSA9IDBcbiAgICAgICAgICAgIGlmICggYmFja3VwRmxhZ1tpXSAhPT0gMCApIHtcbiAgICAgICAgICAgICAgZmxhZ05vRW1wdHlbal0gPSBiYWNrdXBGbGFnW2ldXG4gICAgICAgICAgICAgIGorK1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGogPSAwXG4gICAgICAgICAgZm9yICggaSA9IHhFOyBpIDw9IG5ld1g7IGkrKyApIHtcbiAgICAgICAgICAgIGlmICggdHlwZW9mIGZsYWdOb0VtcHR5W2pdICE9PSAndW5kZWZpbmVkJyApIHtcbiAgICAgICAgICAgICAgZmxhZ1tpXSA9IGZsYWdOb0VtcHR5W2pdXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmbGFnW2ldID0gMFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaisrXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gUmV0dXJuIHRoZSBudW1iZXIgcG9zaXRpb25zIG5lZWQgdG8gbW92ZVxuICAgICAgICAgIHJldHVybiBudW1iZXIgLSBuTW92ZVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG1vdmVBbGxJdGVtc0Zyb21YVG9SaWdodCA9IGZ1bmN0aW9uKHgsIG51bWJlcikge1xuICAgICAgICAgIGxldCBiYWNrdXBGbGFnID0gZmxhZy5zbGljZSgpXG4gICAgICAgICAgbGV0IG1heE51bWJlciA9IGdldFJpZ2h0RW1wdHlTbG90RnJvbVgoIHggKVxuICAgICAgICAgIGlmICggbWF4TnVtYmVyID09PSAwICkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlclxuICAgICAgICAgIH1cblxuICAgICAgICAgIGxldCBwcmV2ID0gZ2V0UHJldkJsb2NrKCB4IClcbiAgICAgICAgICBsZXQgbmV3WCA9IHByZXYueCA+PSAwID8gcHJldi54IDogeFxuICAgICAgICAgIGxldCBuTW92ZSA9IG51bWJlclxuICAgICAgICAgIGlmICggbnVtYmVyID4gbWF4TnVtYmVyICkge1xuICAgICAgICAgICAgbk1vdmUgPSBtYXhOdW1iZXJcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBGaW5kIGVtcHR5IHBvc2l0aW9ucyBmcm9tIHggdG8gcmlnaHQsIHN0b3Agd2hlbiBzZWUgYW55IGl0ZW0gd2hpbGUgZmluZGluZy5cbiAgICAgICAgICBsZXQgeEUgPSB4LFxuICAgICAgICAgICAgYyA9IDAsXG4gICAgICAgICAgICBpID0gbmV3WFxuICAgICAgICAgIHdoaWxlIChjIDwgbk1vdmUgJiYgaSA8IG1heENvbCkge1xuICAgICAgICAgICAgaWYgKCBmbGFnW2ldID09PSAwICkge1xuICAgICAgICAgICAgICBjKytcbiAgICAgICAgICAgICAgeEUgPSBpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKytcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBUaGUgbmV3IHBvc2l0aW9uIGlzIHgsIGFuZCBuZWVkIGVtcHR5IGZsYWcgZnJvbSB4IHRvIHhFXG4gICAgICAgICAgbGV0IGZsYWdOb0VtcHR5ID0gW10sXG4gICAgICAgICAgICBqID0gMFxuXG4gICAgICAgICAgZm9yICggaSA9IG5ld1g7IGkgPD0geEU7IGkrKyApIHtcbiAgICAgICAgICAgIGZsYWdbaV0gPSAwXG4gICAgICAgICAgICBpZiAoIGJhY2t1cEZsYWdbaV0gIT09IDAgKSB7XG4gICAgICAgICAgICAgIGZsYWdOb0VtcHR5W2pdID0gYmFja3VwRmxhZ1tpXVxuICAgICAgICAgICAgICBqKytcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBqID0gZmxhZ05vRW1wdHkubGVuZ3RoIC0gMVxuICAgICAgICAgIGZvciAoIGkgPSB4RTsgaSA+PSBuZXdYOyBpLS0gKSB7XG4gICAgICAgICAgICBpZiAoIHR5cGVvZiBmbGFnTm9FbXB0eVtqXSAhPT0gJ3VuZGVmaW5lZCcgKSB7XG4gICAgICAgICAgICAgIGZsYWdbaV0gPSBmbGFnTm9FbXB0eVtqXVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZmxhZ1tpXSA9IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGotLVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFJldHVybiB0aGUgbnVtYmVyIHBvc2l0aW9ucyBuZWVkIHRvIG1vdmVcbiAgICAgICAgICByZXR1cm4gbnVtYmVyIC0gbk1vdmVcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB1cGRhdGVJdGVtc1Bvc2l0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRoYXQudXBkYXRlSXRlbXNQb3NpdGlvbnMoIGZsYWcgKVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluc2VydCB0byBGbGFnIGFuIGl0ZW0gd2l0aCB0aGUgd2lkdGggaXMgeCBhbmQgcG9zaXRpb24gaXMgeFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gbm9kZSBvYmplY3QgSXRlbSBub2RlXG4gICAgICAgICAqIEBwYXJhbSBzd2FwIGJvb2xlYW4gc3dhcCBpdGVtcyBvciBub3RcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICBsZXQgaW5zZXJ0VG9GbGFnID0gZnVuY3Rpb24obm9kZSwgc3dhcCkge1xuICAgICAgICAgIGxldCB4ID0gbm9kZS54LFxuICAgICAgICAgICAgdyA9IG5vZGUud1xuXG4gICAgICAgICAgLy8gZ2V0IEVtcHR5IHNsb3RzXG4gICAgICAgICAgbGV0IGVtcHR5U2xvdHMgPSBnZXRFbXB0eVNsb3RzKClcblxuICAgICAgICAgIC8vIE5vdCBlbm91Z2ggZW1wdHkgc2xvdHMsIGZhbGxiYWNrLlxuICAgICAgICAgIGlmICggZW1wdHlTbG90cyA8PSAwICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCBfLmlzVW5kZWZpbmVkKCBzd2FwICkgKSB7XG4gICAgICAgICAgICBzd2FwID0gZmFsc2VcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsZXQgX3hcbiAgICAgICAgICBsZXQgX3JlXG4gICAgICAgICAgbGV0IF9sZVxuICAgICAgICAgIGxldCBfd1xuXG4gICAgICAgICAgLy8gQ2hlY2sgbuG6v3UgdOG7qyB24buLIHRyw60gaGnhu4duIHThuqFpIMSR4bunIGNo4buXIHRy4buRbmcgcuG7k2kgdGjDrCBrbyBj4bqnbiBk4buLY2ggY2h1eeG7g24gbuG7r2EuXG4gICAgICAgICAgaWYgKCAhc3dhcCApIHtcbiAgICAgICAgICAgIGlmICggaXNFbXB0eVgoIHggKSApIHtcbiAgICAgICAgICAgICAgLy8gTuG6v3UgxJHDoyDEkeG7pyBjaOG7lyB0cuG7kW5nIGtvIGPhuqduIHJlc2l6ZVxuICAgICAgICAgICAgICBfdyA9IHdcblxuICAgICAgICAgICAgICBpZiAoIGNoZWNrRW5vdWdoU3BhY2VGcm9tWCggeCwgX3cgKSApIHtcbiAgICAgICAgICAgICAgICBhZGRJdGVtVG9GbGFnKCBub2RlIClcbiAgICAgICAgICAgICAgICBub2RlLmVsLmF0dHIoICdkYXRhLWdzLXgnLCB4IClcbiAgICAgICAgICAgICAgICBub2RlLmVsLmF0dHIoICdkYXRhLWdzLXdpZHRoJywgX3cgKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBfcmUgPSBnZXRSaWdodEVtcHR5U2xvdEZyb21YKCB4LCB0cnVlIClcbiAgICAgICAgICAgICAgX2xlID0gZ2V0TGVmdEVtcHR5U2xvdEZyb21YKCB4IC0gMSwgdHJ1ZSApXG5cbiAgICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSB4ZW0gdOG7lW5nIHPhu5EgY2jhu5cgdHLhu5FuZyBjw7MgbOG7m24gaMahbiBjaGnhu4F1IHLhu5luZyBoaeG7h24gdOG6oWkga2jDtG5nXG4gICAgICAgICAgICAgIC8vIFbDoCBz4buRIHRy4buRbmcgY8OybiB0aGnhur91IHbhu4EgYsOqbiB0csOhaSBwaOG6o2kgbmjhu48gaMahbiBz4buRIGNo4buXIHRy4buRbmcgYsOqbiB0csOhaVxuICAgICAgICAgICAgICBpZiAoIF9yZSArIF9sZSA+PSB3ICYmIHcgLSBfcmUgPD0gX2xlICkge1xuICAgICAgICAgICAgICAgIF94ID0geCAtICggdyAtIF9yZSApXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3ggPSB4IC0gX2xlXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIF94IDwgMCApIHtcbiAgICAgICAgICAgICAgICBfeCA9IDBcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHdoaWxlIChfdyA+PSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBjaGVja0Vub3VnaFNwYWNlRnJvbVgoIF94LCBfdyApICkge1xuICAgICAgICAgICAgICAgICAgbm9kZS54ID0gX3hcbiAgICAgICAgICAgICAgICAgIG5vZGUudyA9IF93XG4gICAgICAgICAgICAgICAgICBhZGRJdGVtVG9GbGFnKCBub2RlIClcbiAgICAgICAgICAgICAgICAgIG5vZGUuZWwuYXR0ciggJ2RhdGEtZ3MteCcsIF94IClcbiAgICAgICAgICAgICAgICAgIG5vZGUuZWwuYXR0ciggJ2RhdGEtZ3Mtd2lkdGgnLCBfdyApXG4gICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdy0tXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2hlY2sgbuG6v3UgduG7iyB0csOtIGhp4buHbiB04bqhaSB4ICBjw7MgZ2nDoSB0cuG7iyBsw6AgMSB0aMOsIHRo4butIGzDuWkgduG7gSBzYXUgeGVtIGPDsyBjaOG7lyBuw6BvIMSR4bunIGNo4buXIHRy4buRbmcga28gP1xuICAgICAgICAgICAgaWYgKCBmbGFnW3hdID09PSAxICkge1xuICAgICAgICAgICAgICBsZXQgcHJldiA9IGdldFByZXZCbG9jayggeCApXG4gICAgICAgICAgICAgIGlmICggcHJldi54ID49IDAgKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgeCA+IHByZXYueCArIE1hdGguZmxvb3IoIHByZXYudyAvIDIgKSAmJlxuICAgICAgICAgICAgICAgICAgeCA+IHByZXYueFxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgX3ggPSBwcmV2LnggKyBwcmV2LndcbiAgICAgICAgICAgICAgICAgIF9yZSA9IGdldFJpZ2h0RW1wdHlTbG90RnJvbVgoIF94LCB0cnVlIClcbiAgICAgICAgICAgICAgICAgIGlmICggX3JlID49IHcgKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZEl0ZW1Ub0ZsYWcoIHtcbiAgICAgICAgICAgICAgICAgICAgICBlbDogbm9kZS5lbCxcbiAgICAgICAgICAgICAgICAgICAgICB4OiBfeCxcbiAgICAgICAgICAgICAgICAgICAgICB3OiB3XG4gICAgICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgICAgICBub2RlLmVsLmF0dHIoICdkYXRhLWdzLXgnLCBfeCApXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuZWwuYXR0ciggJ2RhdGEtZ3Mtd2lkdGgnLCB3IClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nXG4gICAgICAgICAgKVxuICAgICAgICAgIGxldCBfbW92ZVRvU3dhcCA9IGZ1bmN0aW9uKG5vZGUsIF94KSB7XG4gICAgICAgICAgICBsZXQgX2Jsb2NrUHJldlxuICAgICAgICAgICAgbGV0IF9ibG9ja05leHRcbiAgICAgICAgICAgIGxldCBfZW1wdHlTbG90cyA9IDBcbiAgICAgICAgICAgIGxldCBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgICBsZXQgaSwgZWxcblxuICAgICAgICAgICAgY29uc29sZS5sb2coICdpbnNlcnQgYXQgeCcsIF94IClcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnaW5zZXJ0IG5vZGUnLCBub2RlIClcblxuICAgICAgICAgICAgaWYgKCBpc0VtcHR5WCggX3ggKSApIHtcbiAgICAgICAgICAgICAgLy8gaWYgaW5zZXJ0IGF0IGVtcHR5IHhcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coICdlbXB0eV9hdF9YJywgX3ggKVxuICAgICAgICAgICAgICBfYmxvY2tQcmV2ID0gZ2V0UHJldkJsb2NrKCBfeCApXG4gICAgICAgICAgICAgIF9ibG9ja05leHQgPSBnZXROZXh0QmxvY2soIF94IClcbiAgICAgICAgICAgICAgaWYgKCBfYmxvY2tQcmV2LnggPiAtMSApIHtcbiAgICAgICAgICAgICAgICAvLyBpZiBkcm9wIGl0ZW0gYXQgcG9zaXRpb24gdGhhdCBoYXZlIGl0ZW0gYmVmb3JlXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coICdmb3VuZF9pdGVtX2xlZnQnLCBfYmxvY2tQcmV2IClcbiAgICAgICAgICAgICAgICBfZW1wdHlTbG90cyA9IGdldFJpZ2h0RW1wdHlTbG90RnJvbVgoXG4gICAgICAgICAgICAgICAgICBfYmxvY2tQcmV2LnhcbiAgICAgICAgICAgICAgICApIC8vIGZpbmQgbnVtYmVyIGVtcHR5IHNsb3RzIGZyb20geCB0b3Agd2hlbiBoYXZlIGl0ZW1cbiAgICAgICAgICAgICAgICBpZiAoIF9lbXB0eVNsb3RzID49IG5vZGUudyApIHtcbiAgICAgICAgICAgICAgICAgIC8vIElmIGVub3VnaCBzbG90IGZvciB0aGlzIGl0ZW1cbiAgICAgICAgICAgICAgICAgIGlmICggY2hlY2tFbm91Z2hTcGFjZUZyb21YKCBfeCwgbm9kZS53ICkgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnZm91bmQnLCBub2RlIClcbiAgICAgICAgICAgICAgICAgICAgeCA9IF94XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggbm9kZS5veCA+IF94ICkge1xuICAgICAgICAgICAgICAgICAgICAvLyBtb3ZlIGl0ZW0gZnJvbSBsZWZ0IHRvIHJpZ2h0XG4gICAgICAgICAgICAgICAgICAgIGkgPSBfYmxvY2tQcmV2LnggKyBfYmxvY2tQcmV2LndcbiAgICAgICAgICAgICAgICAgICAgZWwgPSBnZXRMZWZ0RW1wdHlTbG90RnJvbVgoIGkgKVxuICAgICAgICAgICAgICAgICAgICBpZiAoIGVsIDw9IG5vZGUudyApIHtcbiAgICAgICAgICAgICAgICAgICAgICBlbCA9IG5vZGUudyAtIGVsXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgZWwgPSBub2RlLndcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtb3ZlQWxsSXRlbXNGcm9tWFRvUmlnaHQoIGkgKyAxLCBlbCApXG4gICAgICAgICAgICAgICAgICAgIF9lbXB0eVNsb3RzID0gZ2V0UmlnaHRFbXB0eVNsb3RGcm9tWChcbiAgICAgICAgICAgICAgICAgICAgICBpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coICdsb29wX3N0YXJ0X2knLCBpIClcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGkgPiBfYmxvY2tQcmV2LnggKyBfYmxvY2tQcmV2LncgJiYgIWZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGVja0Vub3VnaFNwYWNlRnJvbVgoIGksIG5vZGUudyApICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coICdmb3VuZF9pbl9sb29wX19pJywgaSApXG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0gaVxuICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGktLVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCAhZm91bmQgJiYgbm9kZS5veCA8IF94ICkge1xuICAgICAgICAgICAgICAgICAgLy8gbW92ZSBpdGVtIGZyb20gbGVmdCB0byByaWdodFxuICAgICAgICAgICAgICAgICAgLy8gdHJ5IG1vdmUgaXRlbSB0byB0aGUgbGVmdFxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgICAgICd0cnlfbW92ZV9pdGVtc190b19sZWZ0JyxcbiAgICAgICAgICAgICAgICAgICAgX2Jsb2NrUHJldlxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgaSA9IF9ibG9ja1ByZXYueCArIF9ibG9ja1ByZXYudyAtIDFcbiAgICAgICAgICAgICAgICAgIGVsID0gZ2V0TGVmdEVtcHR5U2xvdEZyb21YKCBfYmxvY2tQcmV2LnggKVxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coICdlbCcsIGVsIClcbiAgICAgICAgICAgICAgICAgIGlmICggZWwgPiBub2RlLncgKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsID0gbm9kZS53XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBlbCAtPSAyXG4gICAgICAgICAgICAgICAgICBtb3ZlQWxsSXRlbXNGcm9tWFRvTGVmdCggX2Jsb2NrUHJldi54LCBlbCApXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICAgICAgJ3RyeV9tb3ZlX2l0ZW1zX3RvX2xlZnRfZmxhZycsXG4gICAgICAgICAgICAgICAgICAgIGZsYWdcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnZWwyJywgZWwgKVxuICAgICAgICAgICAgICAgICAgX2VtcHR5U2xvdHMgPSBnZXRSaWdodEVtcHR5U2xvdEZyb21YKCBpIClcbiAgICAgICAgICAgICAgICAgIGkgLT0gX2VtcHR5U2xvdHNcbiAgICAgICAgICAgICAgICAgIF9ibG9ja05leHQgPSBnZXROZXh0QmxvY2soIF94IClcbiAgICAgICAgICAgICAgICAgIGxldCBtYXggPSBfYmxvY2tQcmV2LnggKyBfYmxvY2tQcmV2LndcbiAgICAgICAgICAgICAgICAgIGlmICggX2Jsb2NrTmV4dC54ID4gLTEgKSB7XG4gICAgICAgICAgICAgICAgICAgIG1heCA9IF9ibG9ja05leHQueFxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coICdsb29wX3N0YXJ0IDJfaScsIGkgKVxuICAgICAgICAgICAgICAgICAgd2hpbGUgKGkgPCBtYXggJiYgIWZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hlY2tFbm91Z2hTcGFjZUZyb21YKCBpLCBub2RlLncgKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICAgICAgICAgICdmb3VuZF9pbl9sb29wX19AX19pJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgeCA9IGlcbiAgICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpKytcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoICFmb3VuZCApIHtcbiAgICAgICAgICAgICAgICAgIC8vIFRyeSB0byByZXNpemUgbm9kZSB3aWR0aDtcbiAgICAgICAgICAgICAgICAgIHggPSBfYmxvY2tQcmV2LnggKyBfYmxvY2tQcmV2LndcbiAgICAgICAgICAgICAgICAgIG5vZGUudyA9IF9lbXB0eVNsb3RzXG4gICAgICAgICAgICAgICAgICBub2RlLnggPSB4XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggJ3Jlc2l6ZV9uZXdfdycsIF9lbXB0eVNsb3RzIClcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCAncmVzaXplX25ld194JywgeCApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBfYmxvY2tOZXh0LnggPiAtMSApIHtcbiAgICAgICAgICAgICAgICAvLyB0cnkgdG8gZ2V0IHJpZ2h0IGl0ZW0gZm9ybSB4XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coICdmb3VuZF9pdGVtX3JpZ2h0JywgX2Jsb2NrTmV4dCApXG4gICAgICAgICAgICAgICAgX2Jsb2NrTmV4dCA9IGdldE5leHRCbG9jayggX3ggKVxuICAgICAgICAgICAgICAgIF9lbXB0eVNsb3RzID0gZ2V0UmlnaHRFbXB0eVNsb3RGcm9tWChcbiAgICAgICAgICAgICAgICAgIF94LFxuICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coICdtb3ZlX2FsbF9pdGVtX3RvIFJpZ2h0JyApXG4gICAgICAgICAgICAgICAgbGV0IG5Nb3ZlID1cbiAgICAgICAgICAgICAgICAgIF9lbXB0eVNsb3RzID49IG5vZGUud1xuICAgICAgICAgICAgICAgICAgICA/IG5vZGUud1xuICAgICAgICAgICAgICAgICAgICA6IF9lbXB0eVNsb3RzXG4gICAgICAgICAgICAgICAgbW92ZUFsbEl0ZW1zRnJvbVhUb1JpZ2h0KCBfeCwgbk1vdmUgKVxuICAgICAgICAgICAgICAgIGkgPSBfYmxvY2tOZXh0LnhcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggJ2xvb3Bfc3RhcnQgUmlnaHQnLCBpIClcbiAgICAgICAgICAgICAgICB3aGlsZSAoaSA+PSAwICYmICFmb3VuZCkge1xuICAgICAgICAgICAgICAgICAgaWYgKCBjaGVja0Vub3VnaFNwYWNlRnJvbVgoIGksIG5vZGUudyApICkge1xuICAgICAgICAgICAgICAgICAgICB4ID0gaVxuICAgICAgICAgICAgICAgICAgICBub2RlLnggPSB4XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggJ2ZvdW5kX2luX3doaWxlX3InLCBpIClcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGktLVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICggIWZvdW5kICkge1xuICAgICAgICAgICAgICAgICAgLy8gVHJ5IHRvIHJlc2l6ZSBub2RlIHdpZHRoO1xuICAgICAgICAgICAgICAgICAgeCA9IF94XG4gICAgICAgICAgICAgICAgICBub2RlLncgPSBfZW1wdHlTbG90c1xuICAgICAgICAgICAgICAgICAgbm9kZS54ID0geFxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coICdyZXNpemVfcl9uZXdfdycsIF9lbXB0eVNsb3RzIClcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCAncmVzaXplX3JfbmV3X3gnLCB4IClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gdGhlIHJvdyBpcyBlbXB0eVxuICAgICAgICAgICAgICAgIC8vIERvIHNvbXRoaW5nXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGlmIHggaXMgbm90IGVtcHR5XG4gICAgICAgICAgICAgIC8vIGluc2VydCBiZWZvcmUgaXRlbSwgdGhhdCBkcm9wIGluXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCAneCBpcyBub3QgZW1wdHknIClcbiAgICAgICAgICAgICAgX2Jsb2NrUHJldiA9IGdldFByZXZCbG9jayggX3ggKVxuXG4gICAgICAgICAgICAgIGlmICggbm9kZS5veCA8IF9ibG9ja1ByZXYueCApIHtcbiAgICAgICAgICAgICAgICAvLyBkcm9wIGZyb20gbGVmdCB0byByaWdodFxuICAgICAgICAgICAgICAgIG1vdmVBbGxJdGVtc0Zyb21YVG9MZWZ0KCBfeCwgbm9kZS53IClcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggJ01vdmUgQWxsIGl0ZW1zIHRvIGxlZnQnIClcbiAgICAgICAgICAgICAgICBpZiAoIGlzRW1wdHlYKCBfeCApICkge1xuICAgICAgICAgICAgICAgICAgeCA9IF94XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHdoaWxlIChcbiAgICAgICAgICAgICAgICAgICAgIWlzRW1wdHlYKCBfeCApICYmXG4gICAgICAgICAgICAgICAgICAgIF94IDw9IHRoYXQuY29scyAtIDFcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIF94KytcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHggPSBfeFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtb3ZlQWxsSXRlbXNGcm9tWFRvUmlnaHQoIF94LCBub2RlLncgKVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnTW92ZSBBbGwgaXRlbXMgdG8gcmlnaHQnIClcbiAgICAgICAgICAgICAgICBpZiAoIGlzRW1wdHlYKCBfeCApICkge1xuICAgICAgICAgICAgICAgICAgeCA9IF94XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHdoaWxlICghaXNFbXB0eVgoIF94ICkgJiYgX3ggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBfeC0tXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB4ID0gX3hcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCB4ID4gdGhhdC5jb2xzICkge1xuICAgICAgICAgICAgICB4ID0gdGhhdC5jb2xzIC0gMVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9kZS54ID0geFxuICAgICAgICAgICAgY29uc29sZS5sb2coICduZXcgbm9kZSB4JywgeCApXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX21vdmVUb1N3YXAoIG5vZGUsIF8uY2xvbmUoIHggKSApXG5cbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyggJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyApO1xuICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICBsZXQgbmV3WFxuICAgICAgICAgIGxldCBpXG4gICAgICAgICAgbGV0IGxlID0gMFxuXG4gICAgICAgICAgLy9jb25zb2xlLmxvZyggJ2luX3RoZV9lbmRfeCcsIHggKTtcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCAnaW5fdGhlX2VuZF93JywgdyApO1xuICAgICAgICAgIGlmICggeCArIHcgPiB0aGF0LmNvbHMgLSAxICkge1xuICAgICAgICAgICAgbGUgPSBnZXRMZWZ0RW1wdHlTbG90RnJvbVgoIHgsIHRydWUgKVxuICAgICAgICAgICAgY29uc29sZS5sb2coICdsZScsIGxlIClcbiAgICAgICAgICAgIGlmICggbGUgPiAwICkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyggJ21vdmVfTGVmdCcsIHggKyB3IC0gdGhhdC5jb2xzIC0gMSApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHVwZGF0ZUl0ZW1zUG9zaXRpb25zKClcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCAnRmxhZyB1cGRhdGUnLCBmbGFnICk7XG4gICAgICAgICAgd2hpbGUgKHcgPj0gMSkge1xuICAgICAgICAgICAgaWYgKCBlbXB0eVNsb3RzID49IHcgKSB7XG4gICAgICAgICAgICAgIGlmICggY2hlY2tFbm91Z2hTcGFjZUZyb21YKCB4LCB3ICkgKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coICcnLCB7IHg6IHgsIHc6IHcgfSApXG4gICAgICAgICAgICAgICAgbm9kZS53ID0gd1xuICAgICAgICAgICAgICAgIGFkZEl0ZW1Ub0ZsYWcoIG5vZGUgKVxuICAgICAgICAgICAgICAgIG5vZGUuZWwuYXR0ciggJ2RhdGEtZ3MteCcsIHggKVxuICAgICAgICAgICAgICAgIG5vZGUuZWwuYXR0ciggJ2RhdGEtZ3Mtd2lkdGgnLCB3IClcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgbGUgPSBnZXRMZWZ0RW1wdHlTbG90RnJvbVgoIHgsIHRydWUgKVxuICAgICAgICAgICAgICBuZXdYID0geCAtIGxlXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnbmV3WCcsIG5ld1ggKVxuICAgICAgICAgICAgICBpID0gbmV3WFxuICAgICAgICAgICAgICB3aGlsZSAoaSA8IG1heENvbCkge1xuICAgICAgICAgICAgICAgIGlmICggY2hlY2tFbm91Z2hTcGFjZUZyb21YKCBpLCB3ICkgKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggJ0luc2VydCBpbiBXaGlsZScsIHtcbiAgICAgICAgICAgICAgICAgICAgeDogaSxcbiAgICAgICAgICAgICAgICAgICAgdzogd1xuICAgICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAgICAgICBub2RlLncgPSB3XG4gICAgICAgICAgICAgICAgICBhZGRJdGVtVG9GbGFnKCB7IGVsOiBub2RlLmVsLCB4OiBpLCB3OiB3IH0gKVxuICAgICAgICAgICAgICAgICAgbm9kZS5lbC5hdHRyKCAnZGF0YS1ncy14JywgaSApXG4gICAgICAgICAgICAgICAgICBub2RlLmVsLmF0dHIoICdkYXRhLWdzLXdpZHRoJywgdyApXG4gICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpKytcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdy0tXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdyA9IG5vZGUud1xuICAgICAgICAgIHdoaWxlICh3ID49IDEpIHtcbiAgICAgICAgICAgIGkgPSAwXG4gICAgICAgICAgICB3aGlsZSAoaSA8IG1heENvbCkge1xuICAgICAgICAgICAgICBpZiAoIGNoZWNrRW5vdWdoU3BhY2VGcm9tWCggaSwgdyApICkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnSW5zZXJ0IGluIFdoaWxlIDInLCB7XG4gICAgICAgICAgICAgICAgICB4OiBpLFxuICAgICAgICAgICAgICAgICAgdzogd1xuICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgIGFkZEl0ZW1Ub0ZsYWcoIHsgZWw6IG5vZGUuZWwsIHg6IGksIHc6IHcgfSApXG4gICAgICAgICAgICAgICAgbm9kZS5lbC5hdHRyKCAnZGF0YS1ncy14JywgaSApXG4gICAgICAgICAgICAgICAgbm9kZS5lbC5hdHRyKCAnZGF0YS1ncy13aWR0aCcsIHcgKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaSsrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3LS1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zb2xlLmxvZyggJ0luc2VydCBFTkQgV2hpbGUnLCB7IHg6IGksIHc6IHcgfSApXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc3dhcCA9IGZ1bmN0aW9uKG5vZGUsIG5ld1gpIHtcbiAgICAgICAgICBsZXQgdyA9IG5vZGUud1xuXG4gICAgICAgICAgcmVtb3ZlTm9kZSggbm9kZSApXG5cbiAgICAgICAgICBsZXQgYmxvY2syID0gZ2V0UHJldkJsb2NrKCBuZXdYIClcblxuICAgICAgICAgIGxldCBibG9jazJSaWdodCA9IDBcbiAgICAgICAgICBpZiAoIGJsb2NrMi54ID4gLTEgKSB7XG4gICAgICAgICAgICBibG9jazJSaWdodCA9IGJsb2NrMi54ICsgYmxvY2syLndcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCBjaGVja0Vub3VnaFNwYWNlRnJvbVgoIG5ld1gsIHcgKSApIHtcbiAgICAgICAgICAgIGFkZEl0ZW1Ub0ZsYWcoIHsgZWw6IG5vZGUuZWwsIHg6IG5ld1gsIHc6IHcgfSApXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICBibG9jazJSaWdodCA+IDAgJiZcbiAgICAgICAgICAgIGNoZWNrRW5vdWdoU3BhY2VGcm9tWCggYmxvY2syUmlnaHQsIHcgKSAmJlxuICAgICAgICAgICAgbmV3WCA+PSBibG9jazJSaWdodFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgbGV0IGJsb2NrMyA9IGdldE5leHRCbG9jayggbmV3WCApXG4gICAgICAgICAgICBpZiAoIGJsb2NrMy54ID4gLTEgKSB7XG4gICAgICAgICAgICAgIGlmICggbm9kZS53ICsgbmV3WCA+PSBibG9jazMueCApIHtcbiAgICAgICAgICAgICAgICBsZXQgX25ld1ggPSBfLmNsb25lKCBuZXdYIClcbiAgICAgICAgICAgICAgICB3aGlsZSAoX25ld1ggPiBibG9jazJSaWdodCkge1xuICAgICAgICAgICAgICAgICAgaWYgKCBjaGVja0Vub3VnaFNwYWNlRnJvbVgoIF9uZXdYLCB3ICkgKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZEl0ZW1Ub0ZsYWcoIHtcbiAgICAgICAgICAgICAgICAgICAgICBlbDogbm9kZS5lbCxcbiAgICAgICAgICAgICAgICAgICAgICB4OiBfbmV3WCxcbiAgICAgICAgICAgICAgICAgICAgICB3OiB3XG4gICAgICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgX25ld1gtLVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIG5ld1ggKyB3ID4gdGhhdC5jb2xzICkge1xuICAgICAgICAgICAgICAvLyBO4bq/dSBuZXdYICsgdyB2xrDhu6N0IHF1w6Egc+G7kSBjb2xzLiB0aMOsIHRo4butIGzDuWkgbOG6oWkgeGVtICBjw7MgxJHhu6cgY2jhu5cga28gP1xuICAgICAgICAgICAgICBsZXQgX3ggPSB0aGF0LmNvbHMgLSB3XG4gICAgICAgICAgICAgIGlmICggY2hlY2tFbm91Z2hTcGFjZUZyb21YKCBfeCwgdyApICkge1xuICAgICAgICAgICAgICAgIGFkZEl0ZW1Ub0ZsYWcoIHsgZWw6IG5vZGUuZWwsIHg6IF94LCB3OiB3IH0gKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZEl0ZW1Ub0ZsYWcoIHsgZWw6IG5vZGUuZWwsIHg6IGJsb2NrMlJpZ2h0LCB3OiB3IH0gKVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBub2RlLnggPSBuZXdYXG5cbiAgICAgICAgICBpbnNlcnRUb0ZsYWcoIG5vZGUsIHRydWUgKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBsZXQgdGhhdCA9IHRoaXNcbiAgICAgICAgZmxhZyA9IHRoYXQuZ2V0RmxhZyggJHdyYXBwZXIgKVxuICAgICAgICBsZXQgYmFja3VwRmxhZyA9IGZsYWcuc2xpY2UoKVxuICAgICAgICBsZXQgd09mZnNldCA9ICR3cmFwcGVyLm9mZnNldCgpXG4gICAgICAgIHRoYXQuZHJhZ2dpbmdJdGVtID0gdWkuZHJhZ2dhYmxlXG4gICAgICAgIGxldCB3aWR0aCA9ICR3cmFwcGVyLndpZHRoKClcbiAgICAgICAgbGV0IGNvbFdpZHRoID0gd2lkdGggLyB0aGF0LmNvbHNcbiAgICAgICAgbGV0IHhcbiAgICAgICAgbGV0IGlPZmZzZXQgPSB1aS5vZmZzZXRcbiAgICAgICAgbGV0IHcsIGN3LCBpdGVtV2lkdGgsIGluVGhpc1Jvd1xuICAgICAgICBjdyA9IHRoYXQuZ2V0VyggdWkuZHJhZ2dhYmxlLCBmYWxzZSApXG4gICAgICAgIHcgPSB0aGF0LmdldFcoIHVpLmRyYWdnYWJsZSwgdHJ1ZSApXG4gICAgICAgIGl0ZW1XaWR0aCA9IHVpLmRyYWdnYWJsZS53aWR0aCgpXG5cbiAgICAgICAgY29uc29sZS5sb2coICdEUk9QIElURU0gV0lEVEgnLCB3IClcbiAgICAgICAgY29uc29sZS5sb2coICdEUk9QIElURU0gY3cgV0lEVEgnLCBjdyApXG4gICAgICAgIGxldCBveCA9IHRoYXQuZ2V0WCggdWkuZHJhZ2dhYmxlIClcbiAgICAgICAgaWYgKCBpc1JUTCApIHtcbiAgICAgICAgICByZW1vdmVOb2RlKCB7XG4gICAgICAgICAgICBlbDogdWkuZHJhZ2dhYmxlLFxuICAgICAgICAgICAgeDogb3gsXG4gICAgICAgICAgICB3OiB3XG4gICAgICAgICAgfSApXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgeGMgPSAwLFxuICAgICAgICAgIHhpID0gMCxcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG5cbiAgICAgICAgaWYgKCAhdWkuZHJhZ2dhYmxlLnBhcmVudCgpLmlzKCAkd3JhcHBlciApICkge1xuICAgICAgICAgIGluVGhpc1JvdyA9IGZhbHNlXG4gICAgICAgICAgY29uc29sZS5sb2coICdOb3QgaW4gdGhpcyByb3cnIClcbiAgICAgICAgICBpZiAoIHcgPCBjdyApIHtcbiAgICAgICAgICAgIHcgPSBjd1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpblRoaXNSb3cgPSB0cnVlXG4gICAgICAgICAgY29uc29sZS5sb2coICdJdGVtIGluIHRoaXMgcm93JyApXG4gICAgICAgICAgdyA9IGN3XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoICFpc1JUTCApIHtcbiAgICAgICAgICB4YyA9IE1hdGgucm91bmQoICggZXZlbnQuY2xpZW50WCAtIHdPZmZzZXQubGVmdCApIC8gY29sV2lkdGggKVxuICAgICAgICAgIHhpID0gTWF0aC5yb3VuZChcbiAgICAgICAgICAgICggaU9mZnNldC5sZWZ0IC0gd09mZnNldC5sZWZ0IC0gMTAgKSAvIGNvbFdpZHRoXG4gICAgICAgICAgKVxuICAgICAgICAgIGlmICggeGkgPCAwICkge1xuICAgICAgICAgICAgeGkgPSAwXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHhjID0gTWF0aC5yb3VuZChcbiAgICAgICAgICAgICggd09mZnNldC5sZWZ0ICsgd2lkdGggKyAxMCAtIGV2ZW50LmNsaWVudFggKSAvIGNvbFdpZHRoXG4gICAgICAgICAgKVxuXG4gICAgICAgICAgeGkgPSBNYXRoLnJvdW5kKFxuICAgICAgICAgICAgKCB3T2Zmc2V0LmxlZnQgK1xuICAgICAgICAgICAgICB3aWR0aCAtXG4gICAgICAgICAgICAgICggaU9mZnNldC5sZWZ0ICsgaXRlbVdpZHRoICsgMTAgKSApIC9cbiAgICAgICAgICAgIGNvbFdpZHRoXG4gICAgICAgICAgKVxuICAgICAgICAgIGlmICggeGkgPCAwICkge1xuICAgICAgICAgICAgeGkgPSAwXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICggeGMgPiB0aGF0LmNvbHMgKSB7XG4gICAgICAgICAgeGMgPSB0aGF0LmNvbHNcbiAgICAgICAgfVxuXG4gICAgICAgIHggPSB4aVxuICAgICAgICBsZXQgX2lcbiAgICAgICAgX2kgPSB4aVxuXG4gICAgICAgIGlmICggaXNSVEwgKSB7XG4gICAgICAgICAgaWYgKCAhaXNFbXB0eVgoIF9pICkgKSB7XG4gICAgICAgICAgICB3aGlsZSAoX2kgPCB0aGF0LmNvbHMgJiYgIWZvdW5kKSB7XG4gICAgICAgICAgICAgIGlmICggaXNFbXB0eVgoIF9pICkgKSB7XG4gICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX2krK1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIHggPiB4YyApIHtcbiAgICAgICAgICAgICAgLy8geCA9IHhjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoICFpc0VtcHR5WCggeCApICkge1xuICAgICAgICAgICAgd2hpbGUgKHggPD0geGMgJiYgIWZvdW5kKSB7XG4gICAgICAgICAgICAgIGlmICggaXNFbXB0eVgoIHggKSApIHtcbiAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWVcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB4KytcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCB4ID4geGMgKSB7XG4gICAgICAgICAgICAgIHggPSB4Y1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggIWZvdW5kICkge1xuICAgICAgICAgIGlmICggaW5UaGlzUm93ICkge1xuICAgICAgICAgICAgeCA9IHhpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHggPSB4Y1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggeCA8IDAgKSB7XG4gICAgICAgICAgeCA9IDBcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggeCArIHcgPj0gdGhhdC5jb2xzICkge1xuICAgICAgICAgIGZvdW5kID0gdHJ1ZVxuICAgICAgICAgIF9pID0geFxuICAgICAgICAgIHdoaWxlIChfaSArIHcgPiB0aGF0LmNvbHMgJiYgZm91bmQpIHtcbiAgICAgICAgICAgIGlmICggIWlzRW1wdHlYKCBfaSApICkge1xuICAgICAgICAgICAgICBfaSsrXG4gICAgICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIF9pLS1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4ID0gX2lcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBub2RlID0ge1xuICAgICAgICAgIGVsOiB1aS5kcmFnZ2FibGUsXG4gICAgICAgICAgeDogeCxcbiAgICAgICAgICB3OiB3LFxuICAgICAgICAgIG94OiBveCxcbiAgICAgICAgICBvdzogY3dcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggbm9kZS54IDw9IDAgKSB7XG4gICAgICAgICAgbm9kZS54ID0gMFxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGRpZCA9IGZhbHNlXG4gICAgICAgIGlmICggaW5UaGlzUm93ICkge1xuICAgICAgICAgIG5vZGUueCA9IHBhcnNlSW50KCB1aS5kcmFnZ2FibGUuYXR0ciggJ2RhdGEtZ3MteCcgKSB8fCAwIClcbiAgICAgICAgICBub2RlLncgPSBwYXJzZUludCggdWkuZHJhZ2dhYmxlLmF0dHIoICdkYXRhLWdzLXdpZHRoJyApIHx8IDEgKVxuICAgICAgICAgIHN3YXAoIG5vZGUsIHggKVxuICAgICAgICAgIGRpZCA9IHRydWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkaWQgPSBpbnNlcnRUb0ZsYWcoIG5vZGUgKVxuICAgICAgICAgIC8vIGlmICggbm9kZS5lbFswXS5kYXRhc2V0ICkge1xuICAgICAgICAgIC8vIFx0JCggJyNhY2NvcmRpb24tc2VjdGlvbi0nICsgbm9kZS5lbFswXS5kYXRhc2V0LnNlY3Rpb24gKS5yZW1vdmVDbGFzcyggJ2hmZy1zZWN0aW9uLWluYWN0aXZlJyApO1xuICAgICAgICAgIC8vIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCAnRHJvcCBvbiBYOiAnICsgeCArICcsIHdpZHRoOiAnKyB3ICk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCAnRHJvcCBGbGFnOiAnLCBmbGFnICk7XG5cbiAgICAgICAgaWYgKCAhZGlkICkge1xuICAgICAgICAgIHVpLmRyYWdnYWJsZS5yZW1vdmVBdHRyKCAnc3R5bGUnIClcbiAgICAgICAgICBjb25zb2xlLmxvZyggJ0NhbiBub3QgaW5zZXJ0JyApXG4gICAgICAgICAgZmxhZyA9IGJhY2t1cEZsYWcgLy8gcm9sbGJhY2s7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gQWRkIGRyb3AgaXRlbSBmcm9tIHNvbWV3aGVyZSB0byBjdXJyZW50IHJvd1xuICAgICAgICAgIHVpLmRyYWdnYWJsZS5yZW1vdmVDbGFzcyggJ2l0ZW0tZnJvbS1saXN0JyApXG5cbiAgICAgICAgICAkd3JhcHBlci5hcHBlbmQoIHVpLmRyYWdnYWJsZSApXG4gICAgICAgICAgdWkuZHJhZ2dhYmxlLnJlbW92ZUF0dHIoICdzdHlsZScgKVxuICAgICAgICAgIGNvbnNvbGUubG9nKCAnRElEIEZsYWc6ICcsIGZsYWcgKVxuICAgICAgICAgIC8vdWkuZHJhZ2dhYmxlLmF0dHIoICdkYXRhLWdzLXgnLCB4ICk7XG4gICAgICAgICAgLy91aS5kcmFnZ2FibGUuYXR0ciggJ2RhdGEtZ3MteScsIHkgKTtcbiAgICAgICAgICB0aGF0LmRyYWdnaW5nSXRlbSA9IG51bGxcbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZUl0ZW1zUG9zaXRpb25zKClcbiAgICAgICAgdGhhdC51cGRhdGVBbGxHcmlkcygpXG5cbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgfSxcbiAgICAgIHVwZGF0ZUFsbEdyaWRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzXG4gICAgICAgIF8uZWFjaCggdGhhdC5wYW5lbHNbdGhhdC5hY3RpdmVQYW5lbF0sIGZ1bmN0aW9uKHJvdywgcm93SWQpIHtcbiAgICAgICAgICB0aGF0LnVwZGF0ZUdyaWRGbGFnKCByb3cgKVxuICAgICAgICB9IClcbiAgICAgIH0sXG4gICAgICBzZXRHcmlkV2lkdGg6IGZ1bmN0aW9uKCR3cmFwcGVyLCB1aSkge1xuICAgICAgICBsZXQgdGhhdCA9IHRoaXNcbiAgICAgICAgbGV0ICRpdGVtID0gdWkuZWxlbWVudFxuICAgICAgICBsZXQgd2lkdGggPSAkd3JhcHBlci53aWR0aCgpXG4gICAgICAgIGxldCBpdGVtV2lkdGggPSB1aS5zaXplLndpZHRoXG4gICAgICAgIGxldCBvcmlnaW5hbEVsZW1lbnRXaWR0aCA9IHVpLm9yaWdpbmFsU2l6ZS53aWR0aFxuICAgICAgICBsZXQgY29sV2lkdGggPSBNYXRoLmNlaWwoIHdpZHRoIC8gdGhhdC5jb2xzICkgLSAxXG4gICAgICAgIGxldCBpc1NoaWZ0TGVmdCwgaXNTaGlmdFJpZ2h0XG5cbiAgICAgICAgaWYgKCAhaXNSVEwgKSB7XG4gICAgICAgICAgaXNTaGlmdExlZnQgPSB1aS5vcmlnaW5hbFBvc2l0aW9uLmxlZnQgPiB1aS5wb3NpdGlvbi5sZWZ0XG4gICAgICAgICAgaXNTaGlmdFJpZ2h0ID0gdWkub3JpZ2luYWxQb3NpdGlvbi5sZWZ0IDwgdWkucG9zaXRpb24ubGVmdFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlzU2hpZnRMZWZ0ID0gdWkub3JpZ2luYWxQb3NpdGlvbi5sZWZ0ID4gdWkucG9zaXRpb24ubGVmdFxuICAgICAgICAgIGlzU2hpZnRSaWdodCA9IG9yaWdpbmFsRWxlbWVudFdpZHRoICE9PSBpdGVtV2lkdGhcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBvdyA9IHVpLm9yaWdpbmFsRWxlbWVudC5hdHRyKCAnZGF0YS1ncy13aWR0aCcgKSB8fCAxXG4gICAgICAgIGxldCBveCA9IHVpLm9yaWdpbmFsRWxlbWVudC5hdHRyKCAnZGF0YS1ncy14JyApIHx8IDBcbiAgICAgICAgb3cgPSBwYXJzZUludCggb3cgKVxuICAgICAgICBveCA9IHBhcnNlSW50KCBveCApXG5cbiAgICAgICAgbGV0IGFkZFdcbiAgICAgICAgbGV0IG5ld1hcbiAgICAgICAgbGV0IG5ld1dcbiAgICAgICAgbGV0IGZsYWcgPSB0aGF0LmdldEZsYWcoICR3cmFwcGVyIClcbiAgICAgICAgbGV0IGl0ZW1JbmZvID0gdGhhdC5ncmlkR2V0SXRlbUluZm8oXG4gICAgICAgICAgdWkub3JpZ2luYWxFbGVtZW50LFxuICAgICAgICAgIGZsYWcsXG4gICAgICAgICAgJHdyYXBwZXJcbiAgICAgICAgKVxuXG4gICAgICAgIGlmICggaXNTaGlmdExlZnQgKSB7XG4gICAgICAgICAgaWYgKCAhaXNSVEwgKSB7XG4gICAgICAgICAgICAvLyBPa1xuICAgICAgICAgICAgbmV3WCA9IE1hdGguZmxvb3IoICggdWkucG9zaXRpb24ubGVmdCAtIDEgKSAvIGNvbFdpZHRoIClcbiAgICAgICAgICAgIGFkZFcgPSBveCAtIG5ld1hcbiAgICAgICAgICAgIGlmICggYWRkVyA+IGl0ZW1JbmZvLmJlZm9yZSApIHtcbiAgICAgICAgICAgICAgYWRkVyA9IGl0ZW1JbmZvLmJlZm9yZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuZXdYID0gb3ggLSBhZGRXXG4gICAgICAgICAgICBuZXdXID0gb3cgKyBhZGRXXG4gICAgICAgICAgICAkaXRlbS5hdHRyKCAnZGF0YS1ncy14JywgbmV3WCApLnJlbW92ZUF0dHIoICdzdHlsZScgKVxuICAgICAgICAgICAgJGl0ZW0uYXR0ciggJ2RhdGEtZ3Mtd2lkdGgnLCBuZXdXICkucmVtb3ZlQXR0ciggJ3N0eWxlJyApXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFJUTFxuXG4gICAgICAgICAgICAvLyBPa1xuICAgICAgICAgICAgbmV3WCA9IE1hdGguZmxvb3IoICggdWkucG9zaXRpb24ubGVmdCAtIDEgKSAvIGNvbFdpZHRoIClcbiAgICAgICAgICAgIG5ld1ggPSB0aGF0LmNvbHMgLSBuZXdYXG4gICAgICAgICAgICBhZGRXID0gbmV3WCAtIG94IC0gb3dcbiAgICAgICAgICAgIGlmICggYWRkVyA+IGl0ZW1JbmZvLmFmdGVyICkge1xuICAgICAgICAgICAgICBhZGRXID0gaXRlbUluZm8uYWZ0ZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld1cgPSBvdyArIGFkZFdcbiAgICAgICAgICAgICRpdGVtLmF0dHIoICdkYXRhLWdzLXgnLCBveCApLnJlbW92ZUF0dHIoICdzdHlsZScgKVxuICAgICAgICAgICAgJGl0ZW0uYXR0ciggJ2RhdGEtZ3Mtd2lkdGgnLCBuZXdXICkucmVtb3ZlQXR0ciggJ3N0eWxlJyApXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhhdC51cGRhdGVHcmlkRmxhZyggJHdyYXBwZXIgKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9IGVsc2UgaWYgKCBpc1NoaWZ0UmlnaHQgKSB7XG4gICAgICAgICAgaWYgKCAhaXNSVEwgKSB7XG4gICAgICAgICAgICAvLyBPa1xuICAgICAgICAgICAgbmV3WCA9IE1hdGgucm91bmQoICggdWkucG9zaXRpb24ubGVmdCAtIDEgKSAvIGNvbFdpZHRoIClcbiAgICAgICAgICAgIGFkZFcgPSBuZXdYIC0gb3hcbiAgICAgICAgICAgIG5ld1cgPSBvdyAtIGFkZFdcbiAgICAgICAgICAgIGlmICggbmV3VyA8PSAwICkge1xuICAgICAgICAgICAgICBuZXdXID0gMVxuICAgICAgICAgICAgICBhZGRXID0gMFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3WCA9IG94ICsgYWRkV1xuICAgICAgICAgICAgJGl0ZW0uYXR0ciggJ2RhdGEtZ3MteCcsIG5ld1ggKS5yZW1vdmVBdHRyKCAnc3R5bGUnIClcbiAgICAgICAgICAgICRpdGVtLmF0dHIoICdkYXRhLWdzLXdpZHRoJywgbmV3VyApLnJlbW92ZUF0dHIoICdzdHlsZScgKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBSVExcblxuICAgICAgICAgICAgaWYgKCB1aS5vcmlnaW5hbFBvc2l0aW9uLmxlZnQgIT09IHVpLnBvc2l0aW9uLmxlZnQgKSB7XG4gICAgICAgICAgICAgIC8vIE7hur91IHJlc2l6ZSDhu58gbcOpcCB0csOhaSBj4bunYSBJdGVtXG4gICAgICAgICAgICAgIC8vIE9rXG4gICAgICAgICAgICAgIG5ld1ggPSBNYXRoLmZsb29yKFxuICAgICAgICAgICAgICAgICggdWkucG9zaXRpb24ubGVmdCAtIDEgKSAvIGNvbFdpZHRoXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgbmV3WCA9IHRoYXQuY29scyAtIG5ld1hcbiAgICAgICAgICAgICAgYWRkVyA9IG93ICsgb3ggLSBuZXdYXG4gICAgICAgICAgICAgIGlmICggYWRkVyA+IG93ICkge1xuICAgICAgICAgICAgICAgIGFkZFcgPSAwXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbmV3WCA9IG94XG4gICAgICAgICAgICAgIG5ld1cgPSBvdyAtIGFkZFdcbiAgICAgICAgICAgICAgaWYgKCBuZXdYIDw9IDAgKSB7XG4gICAgICAgICAgICAgICAgbmV3WCA9IDBcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnZGlmZlJpZ2h0X1JUTF9DT0xfTmV3IF9fbGVmdCcgKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gTuG6v3UgcmVzaXplIOG7nyBtw6lwIHBo4bqjaSBj4bunYSBJdGVtXG4gICAgICAgICAgICAgIC8vIE9rXG4gICAgICAgICAgICAgIG5ld1ggPSBNYXRoLmNlaWwoXG4gICAgICAgICAgICAgICAgKCB1aS5wb3NpdGlvbi5sZWZ0ICsgdWkuc2l6ZS53aWR0aCAtIDExICkgL1xuICAgICAgICAgICAgICAgIGNvbFdpZHRoXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgbmV3WCA9IHRoYXQuY29scyAtIG5ld1hcbiAgICAgICAgICAgICAgYWRkVyA9IG94IC0gbmV3WFxuICAgICAgICAgICAgICBpZiAoIGFkZFcgPiBpdGVtSW5mby5iZWZvcmUgKSB7XG4gICAgICAgICAgICAgICAgYWRkVyA9IGl0ZW1JbmZvLmJlZm9yZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG5ld1ggPSBveCAtIGFkZFdcbiAgICAgICAgICAgICAgbmV3VyA9IG93ICsgYWRkV1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJGl0ZW0uYXR0ciggJ2RhdGEtZ3MteCcsIG5ld1ggKS5yZW1vdmVBdHRyKCAnc3R5bGUnIClcbiAgICAgICAgICAgICRpdGVtLmF0dHIoICdkYXRhLWdzLXdpZHRoJywgbmV3VyApLnJlbW92ZUF0dHIoICdzdHlsZScgKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoYXQudXBkYXRlR3JpZEZsYWcoICR3cmFwcGVyIClcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB3XG4gICAgICAgIGxldCB4ID0gaXRlbUluZm8ueFxuICAgICAgICBsZXQgeENcblxuICAgICAgICAvLyBSZXNpemUgZnJvbSBsZWZ0IHRvIHJpZ2h0XG4gICAgICAgIC8vT2tcbiAgICAgICAgeEMgPSBNYXRoLmNlaWwoICggdWkucG9zaXRpb24ubGVmdCArIHVpLnNpemUud2lkdGggLSAxMSApIC8gY29sV2lkdGggKVxuICAgICAgICB3ID0gaXRlbUluZm8udyArICggeEMgLSAoIHggKyBpdGVtSW5mby53ICkgKVxuICAgICAgICBpZiAoIGl0ZW1JbmZvLnggKyB3ID4gaXRlbUluZm8ueCArIGl0ZW1JbmZvLncgKyBpdGVtSW5mby5hZnRlciApIHtcbiAgICAgICAgICB3ID0gaXRlbUluZm8udyArIGl0ZW1JbmZvLmFmdGVyXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIGl0ZW1XaWR0aCA8IHVpLm9yaWdpbmFsU2l6ZS53aWR0aCApIHtcbiAgICAgICAgICAvLyBSZXNpemUgZnJvbSByaWdodCB0byBsZWZ0XG4gICAgICAgICAgLy8gT2tcbiAgICAgICAgICB4QyA9IE1hdGgucm91bmQoXG4gICAgICAgICAgICAoIHVpLnBvc2l0aW9uLmxlZnQgKyB1aS5zaXplLndpZHRoIC0gMTEgKSAvIGNvbFdpZHRoIClcbiAgICAgICAgICBpZiAoIHhDIDw9IHggKSB7XG4gICAgICAgICAgICB4QyA9IHggKyAxXG4gICAgICAgICAgfVxuICAgICAgICAgIHcgPSBpdGVtSW5mby53IC0gKCB4ICsgaXRlbUluZm8udyAtIHhDIClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggdyA8PSAwICkge1xuICAgICAgICAgIHcgPSAxXG4gICAgICAgIH1cblxuICAgICAgICAkaXRlbS5hdHRyKCAnZGF0YS1ncy13aWR0aCcsIHcgKS5yZW1vdmVBdHRyKCAnc3R5bGUnIClcbiAgICAgICAgdGhhdC51cGRhdGVHcmlkRmxhZyggJHdyYXBwZXIgKVxuICAgICAgfSxcbiAgICAgIGdldEZsYWc6IGZ1bmN0aW9uKCRyb3cpIHtcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzXG4gICAgICAgIGxldCBmbGFnID0gJHJvdy5kYXRhKCAnZ3JpZFJvd0ZsYWcnICkgfHwgW11cbiAgICAgICAgbGV0IGlcbiAgICAgICAgaWYgKCBfLmlzRW1wdHkoIGZsYWcgKSApIHtcbiAgICAgICAgICBmb3IgKCBpID0gMDsgaSA8IHRoYXQuY29sczsgaSsrICkge1xuICAgICAgICAgICAgZmxhZ1tpXSA9IDBcbiAgICAgICAgICB9XG4gICAgICAgICAgJHJvdy5kYXRhKCAnZ3JpZFJvd0ZsYWcnLCBmbGFnIClcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmbGFnXG4gICAgICB9LFxuICAgICAgdXBkYXRlR3JpZEZsYWc6IGZ1bmN0aW9uKCRyb3cpIHtcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzXG4gICAgICAgIGxldCByb3dGbGFnID0gW11cbiAgICAgICAgbGV0IGlcbiAgICAgICAgZm9yICggaSA9IDA7IGkgPCB0aGF0LmNvbHM7IGkrKyApIHtcbiAgICAgICAgICByb3dGbGFnW2ldID0gMFxuICAgICAgICB9XG4gICAgICAgIGxldCBpdGVtc1xuICAgICAgICBpdGVtcyA9ICQoICcuZ3JpZC1zdGFjay1pdGVtJywgJHJvdyApXG4gICAgICAgIGl0ZW1zLmVhY2goIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgJCggdGhpcyApLnJlbW92ZUF0dHIoICdzdHlsZScgKVxuICAgICAgICAgIGxldCB4ID0gdGhhdC5nZXRYKCAkKCB0aGlzICkgKVxuICAgICAgICAgIGxldCB3ID0gdGhhdC5nZXRXKCAkKCB0aGlzICkgKVxuXG4gICAgICAgICAgZm9yICggaSA9IHg7IGkgPCB4ICsgdzsgaSsrICkge1xuICAgICAgICAgICAgaWYgKCBpID09PSB4ICkge1xuICAgICAgICAgICAgICByb3dGbGFnW2ldID0gJCggdGhpcyApXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByb3dGbGFnW2ldID0gMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSApXG5cbiAgICAgICAgJHJvdy5kYXRhKCAnZ3JpZFJvd0ZsYWcnLCByb3dGbGFnIClcbiAgICAgICAgdGhhdC51cGRhdGVJdGVtc1Bvc2l0aW9ucyggcm93RmxhZyApXG4gICAgICAgIHRoYXQuc29ydEdyaWQoICRyb3cgKVxuICAgICAgICByZXR1cm4gcm93RmxhZ1xuICAgICAgfSxcbiAgICAgIGFkZE5ld1dpZGdldDogZnVuY3Rpb24oJGl0ZW0sIHJvdykge1xuICAgICAgICBsZXQgdGhhdCA9IHRoaXNcbiAgICAgICAgbGV0IHBhbmVsID0gdGhhdC5jb250YWluZXIuZmluZChcbiAgICAgICAgICAnLmhmZy0tZGV2aWNlLXBhbmVsLmhmZy0tcGFuZWwtJyArXG4gICAgICAgICAgdGhhdC5hY3RpdmVQYW5lbFxuICAgICAgICApXG4gICAgICAgIGxldCBlbCA9IHJvd1xuICAgICAgICBpZiAoICFfLmlzT2JqZWN0KCBlbCApICkge1xuICAgICAgICAgIGVsID0gcGFuZWwuZmluZCggJy5oZmctLWNiLWl0ZW1zJyApLmZpcnN0KClcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBlbEl0ZW0gPSAkaXRlbVxuICAgICAgICBlbEl0ZW0uZHJhZ2dhYmxlKCB7XG4gICAgICAgICAgcmV2ZXJ0OiAnaW52YWxpZCcsXG4gICAgICAgICAgYXBwZW5kVG86IHBhbmVsLFxuICAgICAgICAgIHNjcm9sbDogZmFsc2UsXG4gICAgICAgICAgekluZGV4OiA5OTk5OSxcbiAgICAgICAgICBoYW5kbGU6ICcuZ3JpZC1zdGFjay1pdGVtLWNvbnRlbnQnLFxuICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbihldmVudCwgdWkpIHtcbiAgICAgICAgICAgICQoICdib2R5JyApLmFkZENsYXNzKCAnYnVpbGRlci1pdGVtLW1vdmluZycgKVxuICAgICAgICAgICAgJCggJy5oZmctLWNiLWl0ZW1zJywgcGFuZWwgKS5jc3MoICd6LWluZGV4JywgJycgKVxuICAgICAgICAgICAgdWkuaGVscGVyLnBhcmVudCgpLmNzcyggJ3otaW5kZXgnLCA5OTk5IClcbiAgICAgICAgICB9LFxuICAgICAgICAgIHN0b3A6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuICAgICAgICAgICAgJCggJ2JvZHknICkucmVtb3ZlQ2xhc3MoICdidWlsZGVyLWl0ZW0tbW92aW5nJyApXG4gICAgICAgICAgICAkKCAnLmhmZy0tY2ItaXRlbXMnLCBwYW5lbCApLmNzcyggJ3otaW5kZXgnLCAnJyApXG4gICAgICAgICAgICB0aGF0LnNhdmUoKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZHJhZzogZnVuY3Rpb24oZXZlbnQsIHVpKSB7XG4gICAgICAgICAgfVxuICAgICAgICB9ICkucmVzaXphYmxlKCB7XG4gICAgICAgICAgaGFuZGxlczogJ3csIGUnLFxuICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbihldmVudCwgdWkpIHtcbiAgICAgICAgICAgIC8vIFJUTFxuICAgICAgICAgICAgdWkub3JpZ2luYWxFbGVtZW50LmNzcygge1xuICAgICAgICAgICAgICByaWdodDogJ2F1dG8nLFxuICAgICAgICAgICAgICBsZWZ0OiB1aS5wb3NpdGlvbi5sZWZ0XG4gICAgICAgICAgICB9IClcbiAgICAgICAgICB9LFxuICAgICAgICAgIHN0b3A6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuICAgICAgICAgICAgdGhhdC5zZXRHcmlkV2lkdGgoIHVpLmVsZW1lbnQucGFyZW50KCksIHVpIClcbiAgICAgICAgICAgIHRoYXQuc2F2ZSgpXG4gICAgICAgICAgfVxuICAgICAgICB9IClcblxuICAgICAgICBlbC5hcHBlbmQoIGVsSXRlbSApXG4gICAgICAgIHRoYXQudXBkYXRlR3JpZEZsYWcoIGVsIClcbiAgICAgICAgaWYgKCBlbEl0ZW1bMF0gKSB7XG4gICAgICAgICAgJCggJyNhY2NvcmRpb24tc2VjdGlvbi0nICsgZWxJdGVtWzBdLmRhdGFzZXQuc2VjdGlvbiApXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoICdoZmctc2VjdGlvbi1pbmFjdGl2ZScgKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYWRkUGFuZWw6IGZ1bmN0aW9uKGRldmljZSkge1xuICAgICAgICBsZXQgdGhhdCA9IHRoaXNcbiAgICAgICAgbGV0IHRlbXBsYXRlID0gdGhhdC5nZXRUZW1wbGF0ZSgpXG4gICAgICAgIGxldCB0ZW1wbGF0ZUlkID0gJ3RtcGwtaGZnLS1jYi1wYW5lbCdcbiAgICAgICAgaWYgKCAkKCAnIycgKyB0ZW1wbGF0ZUlkICkubGVuZ3RoID09PSAwICkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGlmICggIV8uaXNPYmplY3QoIG9wdGlvbnMucm93cyApICkge1xuICAgICAgICAgIG9wdGlvbnMucm93cyA9IHt9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGh0bWwgPSB0ZW1wbGF0ZShcbiAgICAgICAgICB7XG4gICAgICAgICAgICBkZXZpY2U6IGRldmljZSxcbiAgICAgICAgICAgIGlkOiBvcHRpb25zLmlkLFxuICAgICAgICAgICAgcm93czogb3B0aW9ucy5yb3dzXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0ZW1wbGF0ZUlkXG4gICAgICAgIClcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAnPGRpdiBjbGFzcz1cImhmZy0tZGV2aWNlLXBhbmVsIGhmZy12ZXJ0aWNhbC1wYW5lbCBoZmctLXBhbmVsLScgK1xuICAgICAgICAgIGRldmljZSArXG4gICAgICAgICAgJ1wiIGRhdGEtZGV2aWNlPVwiJyArXG4gICAgICAgICAgZGV2aWNlICtcbiAgICAgICAgICAnXCI+JyArXG4gICAgICAgICAgaHRtbCArXG4gICAgICAgICAgJzwvZGl2PidcbiAgICAgICAgKVxuICAgICAgfSxcbiAgICAgIGFkZERldmljZVBhbmVsczogZnVuY3Rpb24oKSB7XG4gICAgICAgIGxldCB0aGF0ID0gdGhpc1xuICAgICAgICBfLmVhY2goIHRoYXQuZGV2aWNlcywgZnVuY3Rpb24oZGV2aWNlTmFtZSwgZGV2aWNlKSB7XG4gICAgICAgICAgbGV0IHBhbmVsSFRNTCA9IHRoYXQuYWRkUGFuZWwoIGRldmljZSApXG4gICAgICAgICAgJCggJy5oZmctLWNiLWRldmljZXMtc3dpdGNoZXInLCB0aGF0LmNvbnRhaW5lciApLmFwcGVuZChcbiAgICAgICAgICAgICc8YSBocmVmPVwiI1wiIGNsYXNzPVwic3dpdGNoLXRvIHN3aXRjaC10by0nICtcbiAgICAgICAgICAgIGRldmljZSArXG4gICAgICAgICAgICAnXCIgZGF0YS1kZXZpY2U9XCInICtcbiAgICAgICAgICAgIGRldmljZSArXG4gICAgICAgICAgICAnXCI+PHNwYW4gY2xhc3M9XCJpY29uICcgKyBkZXZpY2UgKyAnLWljb25cIj48L3NwYW4+PHNwYW4+JyArXG4gICAgICAgICAgICBkZXZpY2VOYW1lICtcbiAgICAgICAgICAgICc8L3NwYW4+PC9hPidcbiAgICAgICAgICApXG4gICAgICAgICAgJCggJy5oZmctLWNiLWJvZHknLCB0aGF0LmNvbnRhaW5lciApLmFwcGVuZCggcGFuZWxIVE1MIClcbiAgICAgICAgICAkKCAnLmhmZy13aWRnZXRzLXBhbmVsLWlubmVyJywgdGhhdC53aWRnZXRTaWRlYmFyQ29udGFpbmVyIClcbiAgICAgICAgICAgIC5hcHBlbmQoICc8ZGl2IGNsYXNzPVwiIGhmZy0td2lkZ2V0cyBoZmctLXdpZGdldHMtJyArIGRldmljZSArXG4gICAgICAgICAgICAgICdcIiBkYXRhLWRldmljZT1cIicgKyBkZXZpY2UgKyAnXCI+PC9kaXY+JyApXG4gICAgICAgIH0gKVxuXG4gICAgICAgIGxldCB0bXBsVXBzZWxsID0gJCggJyNoZmctdXBzZWxsLXRtcGwnIClcbiAgICAgICAgaWYgKCB0bXBsVXBzZWxsLmxlbmd0aCApIHtcbiAgICAgICAgICAkKCB0bXBsVXBzZWxsLmh0bWwoKSApLmluc2VydEFmdGVyKFxuICAgICAgICAgICAgJCggJy5oZmctLWNiLWRldmljZXMtc3dpdGNoZXInLCB0aGF0LmNvbnRhaW5lciApXG4gICAgICAgICAgKVxuICAgICAgICB9XG5cdFx0JCh0aGF0LmNvbnRhaW5lcikuZmluZCgnLndlbGNvbWUtbm90aWNlJykucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuXHRcdCQodGhhdC5jb250YWluZXIpLmZpbmQoJy5jb25kaXRpb25hbC1oZWFkZXInKS5hZGRDbGFzcygnaGlkZGVuJyk7XG4gICAgICB9LFxuICAgICAgYWRkSXRlbTogZnVuY3Rpb24obm9kZSwgaW5kZXgpIHtcbiAgICAgICAgbGV0IHRlbXBsYXRlID0gdGhpcy5nZXRUZW1wbGF0ZSgpXG4gICAgICAgIGxldCB0ZW1wbGF0ZUlkID0gJ3RtcGwtaGZnLS1jYi1pdGVtJ1xuICAgICAgICBpZiAoICQoICcjJyArIHRlbXBsYXRlSWQgKS5sZW5ndGggPT09IDAgKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgbm9kZVsnZWxlbWVudE9yZGVyJ10gPSBpbmRleFxuICAgICAgICBsZXQgaHRtbCA9IHRlbXBsYXRlKCBub2RlLCB0ZW1wbGF0ZUlkIClcbiAgICAgICAgcmV0dXJuICQoIGh0bWwgKVxuICAgICAgfSxcbiAgICAgIGFkZEF2YWlsYWJsZUl0ZW1zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzXG4gICAgICAgIF8uZWFjaCggdGhhdC5kZXZpY2VzLCBmdW5jdGlvbihkZXZpY2VOYW1lLCBkZXZpY2UpIHtcbiAgICAgICAgICBfLmVhY2goIHRoYXQuaXRlbXMsIGZ1bmN0aW9uKG5vZGUsIGluZGV4KSB7XG4gICAgICAgICAgICBsZXQgX2QgPSB0cnVlXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICFfLmlzVW5kZWZpbmVkKCBub2RlLmRldmljZXMgKSAmJlxuICAgICAgICAgICAgICAhXy5pc0VtcHR5KCBub2RlLmRldmljZXMgKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGlmICggXy5pc1N0cmluZyggbm9kZS5kZXZpY2VzICkgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBub2RlLmRldmljZXMgIT09IGRldmljZSApIHtcbiAgICAgICAgICAgICAgICAgIF9kID0gZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IF9oYXNEID0gZmFsc2VcbiAgICAgICAgICAgICAgICBfLmVhY2goIG5vZGUuZGV2aWNlcywgZnVuY3Rpb24oX3YpIHtcbiAgICAgICAgICAgICAgICAgIGlmICggZGV2aWNlID09PSBfdiApIHtcbiAgICAgICAgICAgICAgICAgICAgX2hhc0QgPSB0cnVlXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAgICAgaWYgKCAhX2hhc0QgKSB7XG4gICAgICAgICAgICAgICAgICBfZCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIF9kICkge1xuICAgICAgICAgICAgICBpbmRleCA9IE9iamVjdC5rZXlzKCB0aGF0Lml0ZW1zICkuaW5kZXhPZiggaW5kZXggKVxuICAgICAgICAgICAgICBsZXQgaXRlbSA9IHRoYXQuYWRkSXRlbSggbm9kZSwgaW5kZXggKVxuICAgICAgICAgICAgICAkKCAnLmhmZy0td2lkZ2V0cy0nICsgZGV2aWNlLCB0aGF0LndpZGdldFNpZGViYXJDb250YWluZXIgKVxuICAgICAgICAgICAgICAgIC5wcmVwZW5kKCBpdGVtIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IClcbiAgICAgICAgfSApXG4gICAgICB9LFxuICAgICAgc3dpdGNoVG9EZXZpY2U6IGZ1bmN0aW9uKGRldmljZSwgdG9nZ2xlQnV0dG9uKSB7XG4gICAgICAgIGxldCB0aGF0ID0gdGhpc1xuICAgICAgICBsZXQgbnVtYmVyRGV2aWNlcyA9IF8uc2l6ZSggdGhhdC5kZXZpY2VzIClcbiAgICAgICAgaWYgKCBudW1iZXJEZXZpY2VzID4gMSApIHtcbiAgICAgICAgICAkKFxuICAgICAgICAgICAgJy5oZmctLWNiLWRldmljZXMtc3dpdGNoZXIgYScsXG4gICAgICAgICAgICB0aGF0LmNvbnRhaW5lclxuICAgICAgICAgICkucmVtb3ZlQ2xhc3MoICdoZmctLXRhYi1hY3RpdmUnIClcbiAgICAgICAgICAkKFxuICAgICAgICAgICAgJy5oZmctLWNiLWRldmljZXMtc3dpdGNoZXIgLnN3aXRjaC10by0nICsgZGV2aWNlLFxuICAgICAgICAgICAgdGhhdC5jb250YWluZXJcbiAgICAgICAgICApLmFkZENsYXNzKCAnaGZnLS10YWItYWN0aXZlJyApXG4gICAgICAgICAgJCggJy5oZmctLWRldmljZS1wYW5lbCcsIHRoYXQuY29udGFpbmVyICkuYWRkQ2xhc3MoXG4gICAgICAgICAgICAnaGZnLS1wYW5lbC1oaWRlJ1xuICAgICAgICAgIClcbiAgICAgICAgICAkKFxuICAgICAgICAgICAgJy5oZmctLWRldmljZS1wYW5lbC5oZmctLXBhbmVsLScgKyBkZXZpY2UsXG4gICAgICAgICAgICB0aGF0LmNvbnRhaW5lclxuICAgICAgICAgICkucmVtb3ZlQ2xhc3MoICdoZmctLXBhbmVsLWhpZGUnIClcbiAgICAgICAgICB0aGF0LmFjdGl2ZVBhbmVsID0gZGV2aWNlXG5cbiAgICAgICAgICAkKCAnLmhmZy0tZGV2aWNlLXBhbmVsIC5oZmctYXZhaWxhYmxlLWl0ZW1zIC5pdGVtLWZyb20tbGlzdCcgKVxuICAgICAgICAgICAgLmVhY2goIGZ1bmN0aW9uKGluZGV4LCBpdGVtKSB7XG4gICAgICAgICAgICAgICQoICcjYWNjb3JkaW9uLXNlY3Rpb24tJyArICQoIGl0ZW0gKVswXS5kYXRhc2V0LnNlY3Rpb24gKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyggJ2hmZy1zZWN0aW9uLWluYWN0aXZlJyApXG4gICAgICAgICAgICB9IClcblxuICAgICAgICAgICQoICcuaGZnLS1kZXZpY2UtcGFuZWwuaGZnLS1wYW5lbC0nICsgZGV2aWNlICtcbiAgICAgICAgICAgICcgLmhmZy1hdmFpbGFibGUtaXRlbXMgLml0ZW0tZnJvbS1saXN0JyApXG4gICAgICAgICAgICAuZWFjaCggZnVuY3Rpb24oaW5kZXgsIGl0ZW0pIHtcbiAgICAgICAgICAgICAgJCggJyNhY2NvcmRpb24tc2VjdGlvbi0nICsgJCggaXRlbSApWzBdLmRhdGFzZXQuc2VjdGlvbiApXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCAnaGZnLXNlY3Rpb24taW5hY3RpdmUnIClcbiAgICAgICAgICAgIH0gKVxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgJCggJy5oZmctLWRldmljZS1wYW5lbC5oZmctLXBhbmVsLScgKyBkZXZpY2UgK1xuICAgICAgICAgICAgJyAuaGZnLWF2YWlsYWJsZS1pdGVtcyAuaXRlbS1mcm9tLWxpc3QnIClcbiAgICAgICAgICAgIC5lYWNoKCBmdW5jdGlvbihpbmRleCwgaXRlbSkge1xuICAgICAgICAgICAgICAkKCAnI2FjY29yZGlvbi1zZWN0aW9uLScgKyAkKCBpdGVtIClbMF0uZGF0YXNldC5zZWN0aW9uIClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoICdoZmctc2VjdGlvbi1pbmFjdGl2ZScgKVxuICAgICAgICAgICAgfSApXG5cbiAgICAgICAgICAkKFxuICAgICAgICAgICAgJy5oZmctLWNiLWRldmljZXMtc3dpdGNoZXIgYScsXG4gICAgICAgICAgICB0aGF0LmNvbnRhaW5lclxuICAgICAgICAgICkuYWRkQ2xhc3MoICdoZmctLXRhYi1hY3RpdmUnIClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5pc1VuZGVmaW5lZCggdG9nZ2xlQnV0dG9uICkgfHwgdG9nZ2xlQnV0dG9uICkge1xuICAgICAgICAgIGlmICggZGV2aWNlID09PSAnZGVza3RvcCcgKSB7XG4gICAgICAgICAgICAkKCAnI2N1c3RvbWl6ZS1mb290ZXItYWN0aW9ucyAucHJldmlldy1kZXNrdG9wJyApLnRyaWdnZXIoXG4gICAgICAgICAgICAgICdjbGljaydcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJCggJyNjdXN0b21pemUtZm9vdGVyLWFjdGlvbnMgLnByZXZpZXctbW9iaWxlJyApLnRyaWdnZXIoXG4gICAgICAgICAgICAgICdjbGljaydcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBhZGRFeGlzdGluZ1Jvd3NJdGVtczogZnVuY3Rpb24oKSB7XG4gICAgICAgIGxldCB0aGF0ID0gdGhpc1xuICAgICAgICBsZXQgZGF0YSA9IGZhbHNlXG4gICAgICAgIGlmICggd3BjdXN0b21pemUuY29udHJvbCggdGhhdC5jb250cm9sSWQgKS5zZXR0aW5nLmdldCgpICkge1xuICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKFxuICAgICAgICAgICAgd3BjdXN0b21pemUuY29udHJvbCggdGhhdC5jb250cm9sSWQgKS5zZXR0aW5nLmdldCgpIClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggIV8uaXNPYmplY3QoIGRhdGEgKSApIHtcbiAgICAgICAgICBkYXRhID0ge31cbiAgICAgICAgfVxuXG4gICAgICAgIF8uZWFjaCggdGhhdC5wYW5lbHMsIGZ1bmN0aW9uKCRyb3dzLCBkZXZpY2UpIHtcbiAgICAgICAgICBsZXQgZGV2aWNlRGF0YSA9IHt9XG4gICAgICAgICAgaWYgKCBfLmlzT2JqZWN0KCBkYXRhW2RldmljZV0gKSApIHtcbiAgICAgICAgICAgIGRldmljZURhdGEgPSBkYXRhW2RldmljZV1cbiAgICAgICAgICB9XG4gICAgICAgICAgXy5lYWNoKCBkZXZpY2VEYXRhLCBmdW5jdGlvbihpdGVtcywgcm93SWQpIHtcbiAgICAgICAgICAgIGlmICggIV8uaXNVbmRlZmluZWQoIGl0ZW1zICkgKSB7XG4gICAgICAgICAgICAgIF8uZWFjaCggaXRlbXMsIGZ1bmN0aW9uKG5vZGUsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgbGV0IGl0ZW0gPSAkKFxuICAgICAgICAgICAgICAgICAgJy5oZmctLXdpZGdldHNbZGF0YS1kZXZpY2U9XCInICtcbiAgICAgICAgICAgICAgICAgIGRldmljZSArXG4gICAgICAgICAgICAgICAgICAnXCJdIC5ncmlkLXN0YWNrLWl0ZW1bZGF0YS1pZD1cIicgK1xuICAgICAgICAgICAgICAgICAgbm9kZS5pZCArXG4gICAgICAgICAgICAgICAgICAnXCJdJ1xuICAgICAgICAgICAgICAgICkuZmlyc3QoKVxuICAgICAgICAgICAgICAgIGl0ZW0uYXR0ciggJ2RhdGEtZ3Mtd2lkdGgnLCBub2RlLndpZHRoIClcbiAgICAgICAgICAgICAgICBpdGVtLmF0dHIoICdkYXRhLWdzLXgnLCBub2RlLnggKVxuICAgICAgICAgICAgICAgIGl0ZW0ucmVtb3ZlQ2xhc3MoICdpdGVtLWZyb20tbGlzdCcgKVxuICAgICAgICAgICAgICAgIHRoYXQuYWRkTmV3V2lkZ2V0KCBpdGVtLCAkcm93c1tyb3dJZF0gKVxuICAgICAgICAgICAgICAgICQoICcjYWNjb3JkaW9uLXNlY3Rpb24tJyArIG5vZGUuaWQgKVxuICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCAnaGZnLXNlY3Rpb24taW5hY3RpdmUnIClcbiAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSApXG4gICAgICAgICAgdGhhdC5oaWRlRHVwbGljYXRlcyggZGV2aWNlIClcbiAgICAgICAgfSApXG5cbiAgICAgICAgdGhhdC5yZWFkeSA9IHRydWVcbiAgICAgIH0sXG4gICAgICBmb2N1czogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLm9uKFxuICAgICAgICAgICdjbGljaycsXG4gICAgICAgICAgJy5oZmctLWNiLWl0ZW0tc2V0dGluZywgLmhmZy0tY2ItaXRlbS1hZG1pbi1zZXR0aW5nLCAuaGZnLS1jYi1pdGVtLW5hbWUsIC5pdGVtLXRvb2x0aXAnLFxuICAgICAgICAgIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgbGV0IHNlY3Rpb24gPSAkKCB0aGlzICkuZGF0YSggJ3NlY3Rpb24nICkgfHwgJydcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnQ2xpY2tlZCBzZWN0aW9uJyAsIHNlY3Rpb24gKTtcblxuICAgICAgICAgICAgaWYgKCBzZWN0aW9uLmluZGV4T2YoJ25ldmVfJykgIT09IC0xICkge1xuICAgICAgICAgICAgXHRzZWN0aW9uID0gc2VjdGlvbi5yZXBsYWNlKCAnbmV2ZV8nLCAnJyApO1xuXHRcdFx0XHRjb25zb2xlLmxvZyggJ05ldyBzZWN0aW9uJyAsIHNlY3Rpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0bGV0IHdpZGdldCA9ICQoIHRoaXMgKS5kYXRhKCAnd2lkZ2V0JyApIHx8ICcnXG5cdFx0XHRpZiAoIHdpZGdldCApIHtcblx0XHRcdFx0Y29uc29sZS5sb2coICdDbGlja2VkIHdpZGdldCcgLCB3aWRnZXQgKTtcblx0XHRcdFx0c2VjdGlvbiA9IHdpZGdldFxuXHRcdFx0fVxuXG4gICAgICAgICAgICBsZXQgY29udHJvbCA9ICQoIHRoaXMgKS5hdHRyKCAnZGF0YS1jb250cm9sJyApIHx8ICcnXG4gICAgICAgICAgICBsZXQgZGlkID0gZmFsc2VcbiAgICAgICAgICAgIGlmICggY29udHJvbCApIHtcbiAgICAgICAgICAgICAgaWYgKCAhXy5pc1VuZGVmaW5lZCggd3BjdXN0b21pemUuY29udHJvbCggY29udHJvbCApICkgKSB7XG4gICAgICAgICAgICAgICAgd3BjdXN0b21pemUuY29udHJvbCggY29udHJvbCApLmZvY3VzKClcbiAgICAgICAgICAgICAgICBkaWQgPSB0cnVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggIWRpZCApIHtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHNlY3Rpb24gJiZcbiAgICAgICAgICAgICAgICAhXy5pc1VuZGVmaW5lZCggd3BjdXN0b21pemUuc2VjdGlvbiggc2VjdGlvbiApIClcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIFx0Y29uc29sZS5sb2coICdCZWZvcmUgZm9jdXMgc2VjdGlvbicgKVxuICAgICAgICAgICAgICAgIHdwY3VzdG9taXplLnNlY3Rpb24oIHNlY3Rpb24gKS5mb2N1cygpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIClcblxuICAgICAgICAvLyBGb2N1cyByb3dzXG4gICAgICAgIHRoaXMuY29udGFpbmVyLm9uKFxuICAgICAgICAgICdjbGljaycsXG4gICAgICAgICAgJy5oZmctLWNiLXJvdy1zZXR0aW5ncycsXG4gICAgICAgICAgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgICBsZXQgaWQgPSAkKCB0aGlzICkuYXR0ciggJ2RhdGEtaWQnICkgfHwgJydcblxuICAgICAgICAgICAgbGV0IHNlY3Rpb24gPSBvcHRpb25zLmlkICsgJ18nICsgaWRcblxuICAgICAgICAgICAgaWYgKCAhXy5pc1VuZGVmaW5lZCggd3BjdXN0b21pemUuc2VjdGlvbiggc2VjdGlvbiApICkgKSB7XG4gICAgICAgICAgICAgIHdwY3VzdG9taXplLnNlY3Rpb24oIHNlY3Rpb24gKS5mb2N1cygpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICB9LFxuICAgICAgY2xvc2VDb21wb25lbnRzU2lkZWJhcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICQoICcud2lkZ2V0cy1wYW5lbC0tdmlzaWJsZScgKS5yZW1vdmVDbGFzcyggJ3dpZGdldHMtcGFuZWwtLXZpc2libGUnIClcbiAgICAgICAgJCggJy5oZmctLXdpZGdldHMud2lkZ2V0cy0tdmlzaWJsZScgKS5yZW1vdmVDbGFzcyggJ3dpZGdldHMtLXZpc2libGUnIClcbiAgICAgICAgJCggdGhpcy53aWRnZXRTaWRlYmFyQ29udGFpbmVyIClcbiAgICAgICAgICAuZmluZCggJy5jb21wb25lbnQtc2VhcmNoJyApXG4gICAgICAgICAgLnZhbCggJycgKVxuICAgICAgICAgIC50cmlnZ2VyKCAna2V5dXAnIClcbiAgICAgICAgJCggdGhpcy53aWRnZXRTaWRlYmFyQ29udGFpbmVyIClcbiAgICAgICAgICAucmVtb3ZlQ2xhc3MoICdwcmV2aWV3LXJpZ2h0IHByZXZpZXctbGVmdCcgKVxuICAgICAgICAkKCAnYm9keScgKS5yZW1vdmVDbGFzcyggJ2hmZy0td2lkZ2V0cy1vcGVuJyApXG4gICAgICAgICQoICcuaGZnLS1jb21wb25lbnQtcHJldmlldy52aXNpYmxlJyApLnJlbW92ZUNsYXNzKCAndmlzaWJsZScgKVxuICAgICAgfSxcbiAgICAgIGluaXRDb21wb25lbnRzU2lkZWJhcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIGxldCB0aGF0ID0gdGhpc1xuXG4gICAgICAgICQoIHRoYXQuY29udGFpbmVyICkub24oICdjbGljaycsICcuYWRkLWJ1dHRvbi0tZ3JpZCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICB0aGF0Lmluc2VydFBvaW50ID0gJCggdGhpcyApLmRhdGEoICdzbG90JyApXG4gICAgICAgICAgdGhhdC5pbnNlcnRSb3cgPSAkKCB0aGlzIClcbiAgICAgICAgICAgIC5jbG9zZXN0KCAnLmhmZy0tcm93LWlubmVyJyApXG4gICAgICAgICAgICAuZmluZCggJy5oZmctLWNiLWl0ZW1zJyApXG4gICAgICAgICAgICAuZGF0YSggJ2lkJyApXG5cbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICB0aGF0LmNsb3NlQ29tcG9uZW50c1NpZGViYXIoKVxuICAgICAgICAgIGxldCBwb3MgPSBlLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgICAgIGxldCBzaWRlYmFyID0gJCggJy53cC1mdWxsLW92ZXJsYXknICkuaGFzQ2xhc3MoICdjb2xsYXBzZWQnICkgP1xuICAgICAgICAgICAgMCA6XG4gICAgICAgICAgICAkKCAnI2N1c3RvbWl6ZS1jb250cm9scycgKS5vdXRlcldpZHRoKClcbiAgICAgICAgICBsZXQgd2lkdGggPSAkKCB0aGF0LndpZGdldFNpZGViYXJDb250YWluZXIgKS5vdXRlcldpZHRoKClcbiAgICAgICAgICBsZXQgaGVpZ2h0ID0gJCggdGhhdC53aWRnZXRTaWRlYmFyQ29udGFpbmVyICkub3V0ZXJIZWlnaHQoKVxuICAgICAgICAgIGxldCBwb3NpdGlvblN0eWxlID0ge1xuICAgICAgICAgICAgdG9wOiBwb3MudG9wIC0gKCBoZWlnaHQgKyA1IClcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIHRoYXQuaW5zZXJ0UG9pbnQgPiA2ICkge1xuICAgICAgICAgICAgJCggdGhhdC53aWRnZXRTaWRlYmFyQ29udGFpbmVyICkuYWRkQ2xhc3MoICdwcmV2aWV3LWxlZnQnIClcbiAgICAgICAgICAgIHBvc2l0aW9uU3R5bGUubGVmdCA9IHBvcy5sZWZ0IC0gc2lkZWJhciAtIHdpZHRoICsgd2lkdGggLyA3ICtcbiAgICAgICAgICAgICAgJCggdGhpcyApLm91dGVyV2lkdGgoKVxuICAgICAgICAgIH0gZWxzZSBpZiAoIHRoYXQuaW5zZXJ0UG9pbnQgPCA1ICkge1xuICAgICAgICAgICAgJCggdGhhdC53aWRnZXRTaWRlYmFyQ29udGFpbmVyICkuYWRkQ2xhc3MoICdwcmV2aWV3LXJpZ2h0JyApXG4gICAgICAgICAgICBwb3NpdGlvblN0eWxlLmxlZnQgPSBwb3MubGVmdCAtIHNpZGViYXIgLSB3aWR0aCAvIDdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcG9zaXRpb25TdHlsZS5sZWZ0ID0gcG9zLmxlZnQgLSBzaWRlYmFyIC0gd2lkdGggLyAyICtcbiAgICAgICAgICAgICAgJCggdGhpcyApLm91dGVyV2lkdGgoKSAvIDJcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkKCB0aGF0LndpZGdldFNpZGViYXJDb250YWluZXIgKS5jc3MoIHBvc2l0aW9uU3R5bGUgKVxuXG4gICAgICAgICAgbGV0IHBhbmVsID0gJCggdGhpcyApLmNsb3Nlc3QoICcuaGZnLS1kZXZpY2UtcGFuZWwnICksXG4gICAgICAgICAgICBkZXZpY2UgPSBwYW5lbFswXS5nZXRBdHRyaWJ1dGUoICdkYXRhLWRldmljZScgKVxuXG4gICAgICAgICAgJCggdGhhdC53aWRnZXRTaWRlYmFyQ29udGFpbmVyICkuYWRkQ2xhc3MoICd3aWRnZXRzLXBhbmVsLS12aXNpYmxlJyApXG4gICAgICAgICAgJCggdGhhdC53aWRnZXRTaWRlYmFyQ29udGFpbmVyIClcbiAgICAgICAgICAgIC5maW5kKCAnIC5oZmctLXdpZGdldHMtJyArIGRldmljZSApXG4gICAgICAgICAgICAuYWRkQ2xhc3MoICd3aWRnZXRzLS12aXNpYmxlJyApXG4gICAgICAgIH0gKVxuXG4gICAgICAgICQoIHRoYXQud2lkZ2V0U2lkZWJhckNvbnRhaW5lciApXG4gICAgICAgICAgLm9uKCAnY2xpY2snLCAnLmhmZy13aWRnZXRzLXBhbmVsLWhlYWRlciAuY2xvc2UnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB0aGF0LmNsb3NlQ29tcG9uZW50c1NpZGViYXIoKVxuICAgICAgICAgIH0gKVxuXG4gICAgICAgICQoIHRoYXQud2lkZ2V0U2lkZWJhckNvbnRhaW5lciApXG4gICAgICAgICAgLm9uKCAna2V5dXAgaW5wdXQnLCAnLmNvbXBvbmVudC1zZWFyY2gnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBsZXQgcXVlcnkgPSBlLnRhcmdldC52YWx1ZS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICBfLmVhY2goIHRoYXQud2lkZ2V0U2lkZWJhckNvbnRhaW5lci5maW5kKCAnLmdyaWQtc3RhY2staXRlbScgKSxcbiAgICAgICAgICAgICAgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgICAgICQoIGl0ZW0gKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgaWYgKCAkKCB0aGlzICkuaGFzQ2xhc3MoICdkdXBsaWNhdGUnICkgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgJCggdGhpcyApLnRvZ2dsZShcbiAgICAgICAgICAgICAgICAgICAgJCggdGhpcyApLnRleHQoKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoIHF1ZXJ5ICkgPlxuICAgICAgICAgICAgICAgICAgICAtMSApXG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAgIH0gKVxuICAgICAgICAgIH0gKVxuXG4gICAgICAgICQoIHRoYXQud2lkZ2V0U2lkZWJhckNvbnRhaW5lciApXG4gICAgICAgICAgLm9uKCAnY2xpY2snLCAnLmdyaWQtc3RhY2staXRlbScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHRoYXQuY2xvc2VDb21wb25lbnRzU2lkZWJhcigpXG4gICAgICAgICAgICBsZXQgZGF0YSA9IEpTT04ucGFyc2UoXG4gICAgICAgICAgICAgIHdwY3VzdG9taXplLmNvbnRyb2woIHRoYXQuY29udHJvbElkICkuc2V0dGluZy5nZXQoKSApLFxuICAgICAgICAgICAgICBkZXZpY2UgPSAkKCB0aGlzICkuY2xvc2VzdCggJy5oZmctLXdpZGdldHMnICkuZGF0YSggJ2RldmljZScgKSxcbiAgICAgICAgICAgICAgd2lkdGggPSAkKCB0aGlzICkuZGF0YSggJ2RmLXdpZHRoJyApLFxuICAgICAgICAgICAgICBpdGVtSWQgPSAkKCB0aGlzICkuZGF0YSggJ2lkJyApXG5cbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBoYXZlIHByb3BlciBvYmplY3RzIHNldCB1cCBmb3Igd2hhdCByb3cgd2UncmUgdHJ5aW5nIHRvIGluc2VydCBpbi5cbiAgICAgICAgICAgIGlmICggdHlwZW9mIGRhdGFbZGV2aWNlXSA9PT0gJ3VuZGVmaW5lZCcgKSB7XG4gICAgICAgICAgICAgIGRhdGFbZGV2aWNlXSA9IHt9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggdHlwZW9mIGRhdGFbZGV2aWNlXVt0aGF0Lmluc2VydFJvd10gPT09ICd1bmRlZmluZWQnICkge1xuICAgICAgICAgICAgICBkYXRhW2RldmljZV1bdGhhdC5pbnNlcnRSb3ddID0ge31cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRGVmYXVsdCBkYXRhIGdldHMgcmVmb3JtYXR0ZWQgYWZ0ZXIgb25lIGNoYW5nZS5cbiAgICAgICAgICAgIC8vIFdlJ3JlIHVzaW5nIG9ubHkgdGhlIHZhbHVlcywgb3IgYWRkaW5nIHdpZGdldHMgdG8gdGhlIHNpZGViYXIgaXMgZ29pbmcgdG8gYnJlYWsuXG4gICAgICAgICAgICAvLyBKdXN0IGRvbid0IGNoYW5nZSB0aGUgbGluZSBiZWxvdyBwbHMuXG4gICAgICAgICAgICBsZXQgZGF0YUluUm93ID0gT2JqZWN0LnZhbHVlcyggZGF0YVtkZXZpY2VdW3RoYXQuaW5zZXJ0Um93XSApXG4gICAgICAgICAgICBsZXQgbmV3SXRlbSA9IHtcbiAgICAgICAgICAgICAgeDogdGhhdC5pbnNlcnRQb2ludCxcbiAgICAgICAgICAgICAgeTogMSxcbiAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICBoZWlnaHQ6IDEsXG4gICAgICAgICAgICAgIGlkOiBpdGVtSWRcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0YUluUm93LnB1c2goIG5ld0l0ZW0gKVxuXG4gICAgICAgICAgICAkKCB0aGlzICkuYXR0ciggJ2RhdGEtZ3MteCcsIHRoYXQuaW5zZXJ0UG9pbnQgKVxuICAgICAgICAgICAgJCggdGhpcyApLmF0dHIoICdkYXRhLWdzLXdpZHRoJywgd2lkdGggKVxuXG4gICAgICAgICAgICBkYXRhSW5Sb3cuc29ydCggZnVuY3Rpb24oY3VycmVudCwgbmV4dCkge1xuICAgICAgICAgICAgICBpZiAoIGN1cnJlbnQueCA8IG5leHQueCApIHJldHVybiAtMVxuICAgICAgICAgICAgICBpZiAoIGN1cnJlbnQueCA+IG5leHQueCApIHJldHVybiAxXG4gICAgICAgICAgICAgIHJldHVybiAwXG4gICAgICAgICAgICB9IClcblxuICAgICAgICAgICAgZm9yICggbGV0IGkgPSAwOyBpIDwgZGF0YUluUm93Lmxlbmd0aDsgaSsrICkge1xuICAgICAgICAgICAgICBpZiAoIGRhdGFJblJvd1tpXS5pZCA9PT0gaXRlbUlkICkge1xuICAgICAgICAgICAgICAgIGlmICggaSA9PT0gZGF0YUluUm93Lmxlbmd0aCAtIDEgKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoIGRhdGFJblJvd1tpXS54ICsgZGF0YUluUm93W2ldLndpZHRoID4gMTIgKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFJblJvd1tpXS53aWR0aCA9IGRhdGFJblJvd1tpXS54ICsgZGF0YUluUm93W2ldLndpZHRoIC1cbiAgICAgICAgICAgICAgICAgICAgICAxMlxuICAgICAgICAgICAgICAgICAgICAkKCB0aGlzICkuYXR0ciggJ2RhdGEtZ3Mtd2lkdGgnLCBkYXRhSW5Sb3dbaV0ud2lkdGggKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBpZiAoIGRhdGFJblJvd1tpXS54ICsgZGF0YUluUm93W2ldLndpZHRoID5cbiAgICAgICAgICAgICAgICAgICAgZGF0YUluUm93W2kgKyAxXS54ICkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhSW5Sb3dbaV0ud2lkdGggPSBkYXRhSW5Sb3dbaSArIDFdLnggLSBkYXRhSW5Sb3dbaV0ueFxuICAgICAgICAgICAgICAgICAgICAkKCB0aGlzICkuYXR0ciggJ2RhdGEtZ3Mtd2lkdGgnLCBkYXRhSW5Sb3dbaV0ud2lkdGggKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGl0ZW0gPSAkKCB0aGlzICkuZmluZCggJy5ncmlkLXN0YWNrLWl0ZW0tY29udGVudCcgKVxuICAgICAgICAgICAgaXRlbS5hZGRDbGFzcyggJ2hmZy1oaWdobGlnaHQnIClcbiAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpdGVtLnJlbW92ZUNsYXNzKCAnaGZnLWhpZ2hsaWdodCcgKVxuICAgICAgICAgICAgfSwgMzUwMCApXG4gICAgICAgICAgICAkKCAnI19zaWRfJyArIGRldmljZSArICctJyArIHRoYXQuaW5zZXJ0Um93LCB0aGF0LmNvbnRhaW5lclswXSApXG4gICAgICAgICAgICAgIC5hcHBlbmQoIHRoaXMgKVxuICAgICAgICAgICAgdGhhdC5hZGROZXdXaWRnZXQoICQoIHRoaXMgKSxcbiAgICAgICAgICAgICAgJCggdGhhdC5jb250YWluZXJbMF0gKVxuICAgICAgICAgICAgICAgIC5maW5kKCAnICNfc2lkXycgKyBkZXZpY2UgKyAnLScgKyB0aGF0Lmluc2VydFJvdyApIClcbiAgICAgICAgICAgIHdwY3VzdG9taXplLnNlY3Rpb24oIHRoaXMuZ2V0QXR0cmlidXRlKCAnZGF0YS1zZWN0aW9uJyApICkuZm9jdXMoKVxuICAgICAgICAgICAgdGhhdC5zYXZlKClcbiAgICAgICAgICAgIHRoYXQuaW5zZXJ0Um93ID0gbnVsbFxuICAgICAgICAgICAgdGhhdC5pbnNlcnRQb2ludCA9IG51bGxcbiAgICAgICAgICAgIHRoYXQuaGlkZUR1cGxpY2F0ZXMoIGRldmljZSApXG4gICAgICAgICAgfSApXG4gICAgICB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzXG4gICAgICAgICQoIHRoYXQuY29udGFpbmVyICkub24oXG4gICAgICAgICAgJ2NsaWNrJyxcbiAgICAgICAgICAnLmhmZy0tZGV2aWNlLXBhbmVsIC5oZmctLWNiLWl0ZW0tcmVtb3ZlJyxcbiAgICAgICAgICBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgIGxldCBpdGVtID0gJCggdGhpcyApLmNsb3Nlc3QoICcuZ3JpZC1zdGFjay1pdGVtJyApLFxuICAgICAgICAgICAgICBwYW5lbCA9IGl0ZW0uY2xvc2VzdCggJy5oZmctLWRldmljZS1wYW5lbCcgKSxcbiAgICAgICAgICAgICAgZGV2aWNlID0gcGFuZWxbMF0uZ2V0QXR0cmlidXRlKCAnZGF0YS1kZXZpY2UnIClcblxuICAgICAgICAgICAgaXRlbS5hdHRyKCAnZGF0YS1ncy14JywgMCApXG4gICAgICAgICAgICBpdGVtLnJlbW92ZUF0dHIoICdzdHlsZScgKVxuICAgICAgICAgICAgJCggdGhhdC53aWRnZXRTaWRlYmFyQ29udGFpbmVyIClcbiAgICAgICAgICAgICAgLmZpbmQoICcuaGZnLS13aWRnZXRzLScgKyBkZXZpY2UgKVxuICAgICAgICAgICAgICAucHJlcGVuZCggaXRlbSApXG4gICAgICAgICAgICAkKCAnI2FjY29yZGlvbi1zZWN0aW9uLScgKyBpdGVtWzBdLmRhdGFzZXQuc2VjdGlvbiApXG4gICAgICAgICAgICAgIC5hZGRDbGFzcyggJ2hmZy1zZWN0aW9uLWluYWN0aXZlJyApXG4gICAgICAgICAgICB0aGF0LnVwZGF0ZUFsbEdyaWRzKClcbiAgICAgICAgICAgIHRoYXQuaGlkZUR1cGxpY2F0ZXMoIGRldmljZSApXG4gICAgICAgICAgICB0aGF0LnNhdmUoKVxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgfSxcbiAgICAgIHJlbW92ZUFsbEl0ZW1zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzXG4gICAgICAgICQoIHRoYXQuY29udGFpbmVyIClcbiAgICAgICAgICAuZmluZCggJy5ncmlkLXN0YWNrLWl0ZW0nIClcbiAgICAgICAgICAuZWFjaCggZnVuY3Rpb24oaW5kZXgsIGl0ZW0pIHtcbiAgICAgICAgICAgIGxldCBwYW5lbCA9ICQoIGl0ZW0gKS5jbG9zZXN0KCAnLmhmZy0tZGV2aWNlLXBhbmVsJyApLFxuICAgICAgICAgICAgICBkZXZpY2UgPSBwYW5lbFswXS5nZXRBdHRyaWJ1dGUoICdkYXRhLWRldmljZScgKVxuICAgICAgICAgICAgJCggaXRlbSApLmF0dHIoICdkYXRhLWdzLXgnLCAwIClcbiAgICAgICAgICAgICQoIGl0ZW0gKS5yZW1vdmVBdHRyKCAnc3R5bGUnIClcbiAgICAgICAgICAgICQoIHRoYXQud2lkZ2V0U2lkZWJhckNvbnRhaW5lciApXG4gICAgICAgICAgICAgIC5maW5kKCAnLmhmZy0td2lkZ2V0cy0nICsgZGV2aWNlIClcbiAgICAgICAgICAgICAgLnByZXBlbmQoIGl0ZW0gKVxuICAgICAgICAgICAgdGhhdC51cGRhdGVBbGxHcmlkcygpXG4gICAgICAgICAgICB0aGF0LmhpZGVEdXBsaWNhdGVzKCBkZXZpY2UgKVxuICAgICAgICAgIH0gKVxuICAgICAgfSxcbiAgICAgIGhpZGVEdXBsaWNhdGVzOiBmdW5jdGlvbihkZXZpY2UpIHtcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzXG4gICAgICAgIGxldCBpdGVtcyA9ICQoIHRoYXQud2lkZ2V0U2lkZWJhckNvbnRhaW5lciApXG4gICAgICAgICAgLmZpbmQoICcuaGZnLS13aWRnZXRzLScgKyBkZXZpY2UgKyAnIC5ncmlkLXN0YWNrLWl0ZW0nIClcbiAgICAgICAgbGV0IG1hcCA9IHt9XG4gICAgICAgIF8uZWFjaCggaXRlbXMsIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICBsZXQgc2x1ZyA9ICQoIGl0ZW0gKS5kYXRhKCAnc2x1ZycgKVxuICAgICAgICAgIGlmICggc2x1ZyA9PT0gJ2hmZy1nZW5lcmljLWNvbXBvbmVudCcgKSByZXR1cm4gZmFsc2VcbiAgICAgICAgICBpZiAoIHR5cGVvZiBtYXBbc2x1Z10gPT09ICd1bmRlZmluZWQnICkge1xuICAgICAgICAgICAgbWFwW3NsdWddID0gW11cbiAgICAgICAgICB9XG4gICAgICAgICAgbWFwW3NsdWddLnB1c2goIGl0ZW0gKVxuICAgICAgICB9IClcblxuICAgICAgICBfLmVhY2goIG1hcCwgZnVuY3Rpb24oY29tcG9uZW50cywgc2x1Zykge1xuICAgICAgICAgIGlmICggY29tcG9uZW50cy5sZW5ndGggPCAyICkge1xuICAgICAgICAgICAgJCggY29tcG9uZW50c1swXSApLnJlbW92ZUNsYXNzKCAnZHVwbGljYXRlJyApXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgXy5lYWNoKCBjb21wb25lbnRzLCBmdW5jdGlvbihjb21wb25lbnQsIGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoIGluZGV4ID09PSAwICkge1xuICAgICAgICAgICAgICAkKCBjb21wb25lbnQgKS5yZW1vdmVDbGFzcyggJ2R1cGxpY2F0ZScgKVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICQoIGNvbXBvbmVudCApLmFkZENsYXNzKCAnZHVwbGljYXRlJyApXG4gICAgICAgICAgfSApXG4gICAgICAgIH0gKVxuICAgICAgfSxcbiAgICAgIGVuY29kZVZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoIHZhbHVlIClcbiAgICAgIH0sXG4gICAgICBsaXN0ZW5Gb3JMYXlvdXRTaWRlbG9hZGluZygpIHtcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICduZXZlLWNoYW5nZWQtYnVpbGRlci12YWx1ZScsIGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgIGlmICggIWUuZGV0YWlsICkgcmV0dXJuIGZhbHNlXG5cbiAgICAgICAgICBpZiggZS5kZXRhaWwuaWQgIT09IHRoYXQuaWQgKSByZXR1cm4gZmFsc2VcblxuICAgICAgICAgIHdwY3VzdG9taXplLmNvbnRyb2woIHRoYXQuY29udHJvbElkIClcbiAgICAgICAgICAgIC5zZXR0aW5nXG4gICAgICAgICAgICAuc2V0KCB0aGF0LmVuY29kZVZhbHVlKCBlLmRldGFpbC52YWx1ZSApIClcblxuICAgICAgICAgIHRoYXQucmVtb3ZlQWxsSXRlbXMoKVxuICAgICAgICAgIHRoYXQuYWRkRXhpc3RpbmdSb3dzSXRlbXMoKVxuICAgICAgICB9IClcbiAgICAgIH0sXG4gICAgICBkZWNvZGVWYWx1ZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoIHZhbHVlIClcbiAgICAgIH0sXG4gICAgICBzYXZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzXG4gICAgICAgIGlmICggIXRoYXQucmVhZHkgKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZGF0YSA9IHt9XG4gICAgICAgIF8uZWFjaCggdGhhdC5wYW5lbHMsIGZ1bmN0aW9uKCRyb3dzLCBkZXZpY2UpIHtcbiAgICAgICAgICBkYXRhW2RldmljZV0gPSB7fVxuICAgICAgICAgIF8uZWFjaCggJHJvd3MsIGZ1bmN0aW9uKHJvdywgcm93SWQpIHtcbiAgICAgICAgICAgIGRhdGFbZGV2aWNlXVtyb3dJZF0gPSBfLm1hcChcbiAgICAgICAgICAgICAgJCggJyA+IC5ncmlkLXN0YWNrLWl0ZW0nLCByb3cgKSxcbiAgICAgICAgICAgICAgZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgICAgICBlbCA9ICQoIGVsIClcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgeDogdGhhdC5nZXRYKCBlbCApLFxuICAgICAgICAgICAgICAgICAgeTogMSxcbiAgICAgICAgICAgICAgICAgIHdpZHRoOiB0aGF0LmdldFcoIGVsICksXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEsXG4gICAgICAgICAgICAgICAgICBpZDogZWwuZGF0YSggJ2lkJyApIHx8ICcnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgfSApXG4gICAgICAgIH0gKVxuXG4gICAgICAgIHdwY3VzdG9taXplLmNvbnRyb2woIHRoYXQuY29udHJvbElkIClcbiAgICAgICAgICAuc2V0dGluZ1xuICAgICAgICAgIC5zZXQoIHRoYXQuZW5jb2RlVmFsdWUoIGRhdGEgKSApXG4gICAgICB9LFxuICAgICAgc2hvd1BhbmVsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmZpbmQoICcuYWRkLWJ1dHRvbi0tZ3JpZCcgKS5hZGRDbGFzcyggJ2hmZy1oaWdobGlnaHQnIClcbiAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGhhdC5jb250YWluZXIuZmluZCggJy5hZGQtYnV0dG9uLS1ncmlkJyApXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoICdoZmctaGlnaGxpZ2h0JyApXG4gICAgICAgIH0sIDEwMDAgKVxuICAgICAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVDbGFzcyggJ2hmZy0tYnVpbGRlci0taGlkZScgKVxuICAgICAgICAgIC5hZGRDbGFzcyggJ2hmZy0tYnVpbGRlci1zaG93JyApXG4gICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxldCBoID0gdGhhdC5jb250YWluZXIuaGVpZ2h0KClcbiAgICAgICAgICAkKCAnI2N1c3RvbWl6ZS1wcmV2aWV3JyApXG4gICAgICAgICAgICAuYWRkQ2xhc3MoICdjYi0tcHJldmlldy1wYW5lbC1zaG93JyApXG4gICAgICAgICAgICAuY3NzKCB7IGJvdHRvbTogaCAtIDEsICdtYXJnaW4tdG9wJzogJzBweCcgfSApXG5cbiAgICAgICAgfSwgMTAwIClcbiAgICAgIH0sXG4gICAgICBoaWRlUGFuZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVDbGFzcyggJ2hmZy0tYnVpbGRlci1zaG93JyApXG4gICAgICAgICQoICcjY3VzdG9taXplLXByZXZpZXcnIClcbiAgICAgICAgICAucmVtb3ZlQ2xhc3MoICdjYi0tcHJldmlldy1wYW5lbC1zaG93JyApXG4gICAgICAgICAgLnJlbW92ZUF0dHIoICdzdHlsZScgKVxuICAgICAgfSxcbiAgICAgIHRvZ2dsZVBhbmVsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzXG4gICAgICAgIHdwY3VzdG9taXplLnN0YXRlKCAnZXhwYW5kZWRQYW5lbCcgKS5iaW5kKCBmdW5jdGlvbihwYW5lVmlzaWJsZSkge1xuICAgICAgICAgIGlmICggd3BjdXN0b21pemUucGFuZWwoIG9wdGlvbnMucGFuZWwgKS5leHBhbmRlZCgpICkge1xuICAgICAgICAgICAgJGRvY3VtZW50LnRyaWdnZXIoICdoZmdfcGFuZWxfYnVpbGRlcl9vcGVuJywgW1xuICAgICAgICAgICAgICBvcHRpb25zLnBhbmVsXG4gICAgICAgICAgICBdIClcbiAgICAgICAgICAgIHRvcC5fY3VycmVudF9idWlsZGVyX3BhbmVsID0gaWRcbiAgICAgICAgICAgIHRoYXQuc2hvd1BhbmVsKClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhhdC5oaWRlUGFuZWwoKVxuICAgICAgICAgICAgdGhhdC5jbG9zZUNvbXBvbmVudHNTaWRlYmFyKClcbiAgICAgICAgICB9XG4gICAgICAgIH0gKVxuXG4gICAgICAgIHRoYXQuY29udGFpbmVyLm9uKCAnY2xpY2snLCAnLmhmZy0tcGFuZWwtY2xvc2UnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgdGhhdC5jb250YWluZXIudG9nZ2xlQ2xhc3MoICdoZmctLWJ1aWxkZXItLWhpZGUnIClcbiAgICAgICAgICBpZiAoIHRoYXQuY29udGFpbmVyLmhhc0NsYXNzKCAnaGZnLS1idWlsZGVyLS1oaWRlJyApICkge1xuICAgICAgICAgICAgJCggJyNjdXN0b21pemUtcHJldmlldycgKS5yZW1vdmVDbGFzcyhcbiAgICAgICAgICAgICAgJ2NiLS1wcmV2aWV3LXBhbmVsLXNob3cnXG4gICAgICAgICAgICApXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICQoICcjY3VzdG9taXplLXByZXZpZXcnICkuYWRkQ2xhc3MoXG4gICAgICAgICAgICAgICdjYi0tcHJldmlldy1wYW5lbC1zaG93J1xuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgfSApXG4gICAgICB9LFxuICAgICAgcGFuZWxMYXlvdXRDU1M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvL3dwY3VzdG9taXplLnN0YXRlKCAncGFuZVZpc2libGUnICkuZ2V0KClcbiAgICAgICAgbGV0IHNpZGViYXJXaWR0aCA9ICQoICcjY3VzdG9taXplLWNvbnRyb2xzJyApLndpZHRoKClcbiAgICAgICAgaWYgKCAhd3BjdXN0b21pemUuc3RhdGUoICdwYW5lVmlzaWJsZScgKS5nZXQoKSApIHtcbiAgICAgICAgICBzaWRlYmFyV2lkdGggPSAwXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCBpc1JUTCApIHtcbiAgICAgICAgICB0aGlzLmNvbnRhaW5lci5maW5kKCAnLmhmZy0tY2ItaW5uZXInIClcbiAgICAgICAgICAgIC5jc3MoIHsgJ21hcmdpbi1yaWdodCc6IHNpZGViYXJXaWR0aCB9IClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNvbnRhaW5lci5maW5kKCAnLmhmZy0tY2ItaW5uZXInIClcbiAgICAgICAgICAgIC5jc3MoIHsgJ21hcmdpbi1sZWZ0Jzogc2lkZWJhcldpZHRoIH0gKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcG9wdWxhdGVDb21wb25lbnRQcmV2aWV3czogZnVuY3Rpb24oKSB7XG4gICAgICAgIGxldCB0aGF0ID0gdGhpc1xuICAgICAgICBsZXQgdGVtcGxhdGUgPSB0aGF0LmdldFRlbXBsYXRlKClcbiAgICAgICAgbGV0IHByZXZpZXdUZW1wbGF0ZSA9ICd0bXBsLWhmZy0td2lkZ2V0cy1wcmV2aWV3J1xuICAgICAgICBfLmVhY2goIHRoYXQuZGV2aWNlcywgZnVuY3Rpb24oZGV2aWNlTmFtZSwgZGV2aWNlKSB7XG4gICAgICAgICAgXy5lYWNoKCB0aGF0Lml0ZW1zLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICBpZiAoIG5vZGUuZGVzY3JpcHRpb24gPT09IG51bGwgKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGNvbXBvbmVudFByZXZpZXcgPSB0ZW1wbGF0ZSggbm9kZSwgcHJldmlld1RlbXBsYXRlIClcbiAgICAgICAgICAgICQoIHRoYXQud2lkZ2V0U2lkZWJhckNvbnRhaW5lciApLmFwcGVuZCggY29tcG9uZW50UHJldmlldyApXG4gICAgICAgICAgfSApXG4gICAgICAgIH0gKVxuICAgICAgfSxcbiAgICAgIGluaXQ6IGZ1bmN0aW9uKGNvbnRyb2xJZCwgaXRlbXMsIGRldmljZXMpIHtcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzXG4gICAgICAgIGxldCB0ZW1wbGF0ZSA9IHRoYXQuZ2V0VGVtcGxhdGUoKVxuICAgICAgICBsZXQgdGVtcGxhdGVJZCA9ICd0bXBsLWhmZy0tYnVpbGRlci1wYW5lbCdcbiAgICAgICAgbGV0IHNpZGViYXJJZCA9ICd0bXBsLWhmZy0td2lkZ2V0cy1zaWRlYmFyJ1xuICAgICAgICBsZXQgaHRtbCA9IHRlbXBsYXRlKCBvcHRpb25zLCB0ZW1wbGF0ZUlkIClcbiAgICAgICAgbGV0IHdpZGdldHNTaWRlYmFyID0gdGVtcGxhdGUoIG9wdGlvbnMsIHNpZGViYXJJZCApXG4gICAgICAgIHRoYXQuY29udGFpbmVyID0gJCggaHRtbCApXG4gICAgICAgIHRoYXQud2lkZ2V0U2lkZWJhckNvbnRhaW5lciA9ICQoIHdpZGdldHNTaWRlYmFyIClcbiAgICAgICAgJCggJ2JvZHkgLndwLWZ1bGwtb3ZlcmxheScgKVxuICAgICAgICAgIC5hcHBlbmQoIHRoYXQuY29udGFpbmVyIClcbiAgICAgICAgICAuYXBwZW5kKCB0aGF0LndpZGdldFNpZGViYXJDb250YWluZXIgKVxuICAgICAgICB0aGF0LmNvbnRyb2xJZCA9IGNvbnRyb2xJZFxuICAgICAgICB0aGF0Lml0ZW1zID0gaXRlbXNcbiAgICAgICAgdGhhdC5kZXZpY2VzID0gZGV2aWNlc1xuICAgICAgICBpZiAoIG9wdGlvbnMuc2VjdGlvbiApIHtcbiAgICAgICAgICB3cGN1c3RvbWl6ZS5zZWN0aW9uKCBvcHRpb25zLnNlY3Rpb24gKVxuICAgICAgICAgICAgLmNvbnRhaW5lclxuICAgICAgICAgICAgLmFkZENsYXNzKCAnaGZnLS1oaWRlJyApXG4gICAgICAgIH1cblxuICAgICAgICB0aGF0LmFkZERldmljZVBhbmVscygpXG4gICAgICAgIHRoYXQuc3dpdGNoVG9EZXZpY2UoIHRoYXQuYWN0aXZlUGFuZWwgKVxuICAgICAgICB0aGF0LmFkZEF2YWlsYWJsZUl0ZW1zKClcbiAgICAgICAgdGhhdC5wb3B1bGF0ZUNvbXBvbmVudFByZXZpZXdzKClcbiAgICAgICAgdGhhdC5zd2l0Y2hUb0RldmljZSggdGhhdC5hY3RpdmVQYW5lbCApXG4gICAgICAgIHRoYXQuZHJhZ19kcm9wKClcbiAgICAgICAgdGhhdC5pbml0Q29tcG9uZW50c1NpZGViYXIoKVxuICAgICAgICB0aGF0LmZvY3VzKClcbiAgICAgICAgdGhhdC5yZW1vdmUoKVxuICAgICAgICB0aGF0LmFkZEV4aXN0aW5nUm93c0l0ZW1zKClcbiAgICAgICAgdGhhdC5saXN0ZW5Gb3JMYXlvdXRTaWRlbG9hZGluZygpXG5cbiAgICAgICAgaWYgKCB3cGN1c3RvbWl6ZS5wYW5lbCggb3B0aW9ucy5wYW5lbCApLmV4cGFuZGVkKCkgKSB7XG4gICAgICAgICAgdGhhdC5zaG93UGFuZWwoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoYXQuaGlkZVBhbmVsKClcbiAgICAgICAgICB0aGF0LmNsb3NlQ29tcG9uZW50c1NpZGViYXIoKVxuICAgICAgICB9XG5cbiAgICAgICAgd3BjdXN0b21pemUucHJldmlld2VkRGV2aWNlLmJpbmQoIGZ1bmN0aW9uKG5ld0RldmljZSkge1xuICAgICAgICAgIGlmICggbmV3RGV2aWNlID09PSAnZGVza3RvcCcgKSB7XG4gICAgICAgICAgICB0aGF0LnN3aXRjaFRvRGV2aWNlKCAnZGVza3RvcCcsIGZhbHNlIClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhhdC5zd2l0Y2hUb0RldmljZSggJ21vYmlsZScsIGZhbHNlIClcbiAgICAgICAgICB9XG4gICAgICAgIH0gKVxuXG4gICAgICAgIHRoYXQudG9nZ2xlUGFuZWwoKVxuICAgICAgICBpZiAoIHdwY3VzdG9taXplLnN0YXRlKCAncGFuZVZpc2libGUnICkuZ2V0KCkgKSB7XG4gICAgICAgICAgdGhhdC5wYW5lbExheW91dENTUygpXG4gICAgICAgIH1cbiAgICAgICAgd3BjdXN0b21pemUuc3RhdGUoICdwYW5lVmlzaWJsZScgKS5iaW5kKCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aGF0LnBhbmVsTGF5b3V0Q1NTKClcbiAgICAgICAgfSApXG5cbiAgICAgICAgJCggd2luZG93ICkucmVzaXplKFxuICAgICAgICAgIF8udGhyb3R0bGUoIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhhdC5wYW5lbExheW91dENTUygpXG4gICAgICAgICAgfSwgMTAwIClcbiAgICAgICAgKVxuXG4gICAgICAgIC8vIFN3aXRjaCBwYW5lbC5cbiAgICAgICAgdGhhdC5jb250YWluZXIub24oXG4gICAgICAgICAgJ2NsaWNrJyxcbiAgICAgICAgICAnLmhmZy0tY2ItZGV2aWNlcy1zd2l0Y2hlciBhLnN3aXRjaC10bycsXG4gICAgICAgICAgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgICBsZXQgZGV2aWNlID0gJCggdGhpcyApLmRhdGEoICdkZXZpY2UnIClcbiAgICAgICAgICAgIHRoYXQuc3dpdGNoVG9EZXZpY2UoIGRldmljZSApXG4gICAgICAgICAgfVxuICAgICAgICApXG5cbiAgICAgICAgJGRvY3VtZW50LnRyaWdnZXIoICdoZmdfYnVpbGRlcl9wYW5lbF9sb2FkZWQnLCBbaWQsIHRoYXRdIClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBCdWlsZGVyLmluaXQoIG9wdGlvbnMuY29udHJvbF9pZCwgb3B0aW9ucy5pdGVtcywgb3B0aW9ucy5kZXZpY2VzIClcbiAgICByZXR1cm4gQnVpbGRlclxuICB9XG5cbn0oIGpRdWVyeSApICk7XG5cbiggZnVuY3Rpb24oJCwgd3BjdXN0b21pemUpIHtcbiAgbGV0ICRkb2N1bWVudCA9ICQoIGRvY3VtZW50IClcblxuICB3cGN1c3RvbWl6ZS5iaW5kKCAncmVhZHknLCBmdW5jdGlvbihlLCBiKSB7XG4gICAgXy5lYWNoKCBIRkdfTGF5b3V0X0J1aWxkZXIuYnVpbGRlcnMsIGZ1bmN0aW9uKG9wdHMsIGlkKSB7XG4gICAgICBoZmdQYW5lbHNbaWRdID0gbmV3IEN1c3RvbWl6ZUJ1aWxkZXJWMSggb3B0cywgaWQgKVxuICAgIH0gKVxuXG4gICAgd3BjdXN0b21pemUuYmluZCggJ3BhbmUtY29udGVudHMtcmVmbG93ZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgICBsZXQgcGFuZWxXaWRnZXRzTGVuZ3RoID0gJChcbiAgICAgICAgICAnI3N1Yi1hY2NvcmRpb24tcGFuZWwtd2lkZ2V0cyAubm8td2lkZ2V0LWFyZWFzLXJlbmRlcmVkLW5vdGljZSAuZm9vdGVyX21vdmVkX3dpZGdldHNfdGV4dCcgKS5sZW5ndGhcbiAgICAgICAgaWYgKCBwYW5lbFdpZGdldHNMZW5ndGggPT09IDAgKSB7XG4gICAgICAgICAgJChcbiAgICAgICAgICAgICcjc3ViLWFjY29yZGlvbi1wYW5lbC13aWRnZXRzIC5uby13aWRnZXQtYXJlYXMtcmVuZGVyZWQtbm90aWNlJ1xuICAgICAgICAgICkuYXBwZW5kKFxuICAgICAgICAgICAgJzxwIGNsYXNzPVwiZm9vdGVyX21vdmVkX3dpZGdldHNfdGV4dFwiPicgK1xuICAgICAgICAgICAgSEZHX0xheW91dF9CdWlsZGVyLmZvb3Rlcl9tb3ZlZF93aWRnZXRzX3RleHQgK1xuICAgICAgICAgICAgJzwvcD4nXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9LCAxMDAwIClcbiAgICB9IClcblxuICAgIC8vIFdoZW4gZm9jdXMgc2VjdGlvblxuICAgIHdwY3VzdG9taXplLnN0YXRlKCAnZXhwYW5kZWRTZWN0aW9uJyApLmJpbmQoIGZ1bmN0aW9uKHNlY3Rpb24pIHtcbiAgICAgICQoICcuaGZnLS1kZXZpY2UtcGFuZWwgLmdyaWQtc3RhY2staXRlbScgKS5yZW1vdmVDbGFzcyhcbiAgICAgICAgJ2l0ZW0tYWN0aXZlJ1xuICAgICAgKVxuICAgICAgJCggJy5oZmctLWNiLXJvdycgKS5yZW1vdmVDbGFzcyggJ3Jvdy1hY3RpdmUnIClcbiAgICAgIGlmICggc2VjdGlvbiApIHtcbiAgICAgICAgJCggJy5oZmctLWNiLXJvd1tkYXRhLWlkPVwiJyArIHNlY3Rpb24uaWQgKyAnXCJdJyApLmFkZENsYXNzKFxuICAgICAgICAgICdyb3ctYWN0aXZlJ1xuICAgICAgICApXG4gICAgICAgICQoXG4gICAgICAgICAgJy5oZmctLWRldmljZS1wYW5lbCAuZ3JpZC1zdGFjay1pdGVtLmZvci1zLScgK1xuICAgICAgICAgIHNlY3Rpb24uaWRcbiAgICAgICAgKS5hZGRDbGFzcyggJ2l0ZW0tYWN0aXZlJyApXG4gICAgICB9XG4gICAgfSApXG4gIH0gKVxuXG4gIC8vIEZvY3VzXG4gICRkb2N1bWVudC5vbiggJ2NsaWNrJywgJy5mb2N1cy1zZWN0aW9uJywgZnVuY3Rpb24oZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGxldCBpZCA9ICQoIHRoaXMgKS5hdHRyKCAnZGF0YS1pZCcgKSB8fCAnJ1xuICAgIGlmICggIWlkICkge1xuICAgICAgaWQgPSAkKCB0aGlzICkuYXR0ciggJ2hyZWYnICkgfHwgJydcbiAgICAgIGlkID0gaWQucmVwbGFjZSggJyMnLCAnJyApXG4gICAgfVxuXG4gICAgaWYgKCBpZCApIHtcbiAgICAgIGlmICggd3BjdXN0b21pemUuc2VjdGlvbiggaWQgKSApIHtcbiAgICAgICAgd3BjdXN0b21pemUuc2VjdGlvbiggaWQgKS5mb2N1cygpXG4gICAgICB9XG4gICAgfVxuICB9IClcblxuICAkZG9jdW1lbnQub24oICdjbGljaycsICcuZm9jdXMtY29udHJvbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBsZXQgaWQgPSAkKCB0aGlzICkuYXR0ciggJ2RhdGEtaWQnICkgfHwgJydcbiAgICBpZiAoICFpZCApIHtcbiAgICAgIGlkID0gJCggdGhpcyApLmF0dHIoICdocmVmJyApIHx8ICcnXG4gICAgICBpZCA9IGlkLnJlcGxhY2UoICcjJywgJycgKVxuICAgIH1cbiAgICBpZiAoIGlkICkge1xuICAgICAgaWYgKCB3cGN1c3RvbWl6ZS5jb250cm9sKCBpZCApICkge1xuICAgICAgICB3cGN1c3RvbWl6ZS5jb250cm9sKCBpZCApLmZvY3VzKClcbiAgICAgIH1cbiAgICB9XG4gIH0gKVxuXG4gICRkb2N1bWVudC5vbiggJ2NsaWNrJywgJy5mb2N1cy1wYW5lbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBsZXQgaWQgPSAkKCB0aGlzICkuYXR0ciggJ2RhdGEtaWQnICkgfHwgJydcbiAgICBpZiAoICFpZCApIHtcbiAgICAgIGlkID0gJCggdGhpcyApLmF0dHIoICdocmVmJyApIHx8ICcnXG4gICAgICBpZCA9IGlkLnJlcGxhY2UoICcjJywgJycgKVxuICAgIH1cbiAgICBpZiAoIGlkICkge1xuICAgICAgaWYgKCB3cGN1c3RvbWl6ZS5wYW5lbCggaWQgKSApIHtcbiAgICAgICAgd3BjdXN0b21pemUucGFuZWwoIGlkICkuZm9jdXMoKVxuICAgICAgfVxuICAgIH1cbiAgfSApXG5cbiAgJGRvY3VtZW50Lm9uKCAnbW91c2VvdmVyJywgJy5oZmctLXdpZGdldHMgLmdyaWQtc3RhY2staXRlbScsIGZ1bmN0aW9uKGUpIHtcbiAgICBsZXQgaXRlbSA9ICQoIHRoaXMgKVxuICAgIGxldCBpZCA9IGl0ZW0uYXR0ciggJ2RhdGEtaWQnIClcbiAgICBsZXQgZGVzY3JpcHRpb24gPSAkKCBpdGVtIClcbiAgICAgIC5jbG9zZXN0KCAnLmhmZy0td2lkZ2V0cy1wYW5lbCcgKVxuICAgICAgLmZpbmQoICdbZGF0YS1mb3ItY29tcG9uZW50PVwiJyArIGlkICsgJ1wiXScgKVxuXG4gICAgZGVzY3JpcHRpb24uYWRkQ2xhc3MoICd2aXNpYmxlJyApXG4gIH0gKVxuXG4gICRkb2N1bWVudC5vbiggJ21vdXNlbGVhdmUnLCAnLmhmZy0td2lkZ2V0cyAuZ3JpZC1zdGFjay1pdGVtJywgZnVuY3Rpb24oZSkge1xuICAgIGxldCBpdGVtID0gJCggdGhpcyApXG4gICAgbGV0IGlkID0gaXRlbS5hdHRyKCAnZGF0YS1pZCcgKVxuICAgIGxldCBkZXNjcmlwdGlvbiA9ICQoIGl0ZW0gKVxuICAgICAgLmNsb3Nlc3QoICcuaGZnLS13aWRnZXRzLXBhbmVsJyApXG4gICAgICAuZmluZCggJ1tkYXRhLWZvci1jb21wb25lbnQ9XCInICsgaWQgKyAnXCJdJyApXG5cbiAgICBkZXNjcmlwdGlvbi5yZW1vdmVDbGFzcyggJ3Zpc2libGUnIClcbiAgfSApXG5cbiAgJGRvY3VtZW50Lm9uKCAnbW91c2VvdmVyJywgJy5oZmctLWNiLXJvdyAuZ3JpZC1zdGFjay1pdGVtJywgZnVuY3Rpb24oZSkge1xuICAgIGxldCBpdGVtID0gJCggdGhpcyApXG4gICAgbGV0IG5hbWVXID1cbiAgICAgICQoICcuaGZnLS1jYi1pdGVtLXJlbW92ZScsIGl0ZW0gKS5vdXRlcldpZHRoKCkgK1xuICAgICAgJCggJy5oZmctLWNiLWl0ZW0tc2V0dGluZycsIGl0ZW0gKS5vdXRlcldpZHRoKClcbiAgICBsZXQgaXRlbVcgPSAkKCAnLmdyaWQtc3RhY2staXRlbS1jb250ZW50JywgaXRlbSApLmlubmVyV2lkdGgoKVxuICAgIGlmICggbmFtZVcgPiBpdGVtVyAtIDUwICkge1xuICAgICAgaXRlbS5hZGRDbGFzcyggJ3Nob3ctdG9vbHRpcCcgKVxuICAgIH1cbiAgfSApXG5cbiAgJGRvY3VtZW50Lm9uKCAnbW91c2VsZWF2ZScsICcuaGZnLS1jYi1yb3cgLmdyaWQtc3RhY2staXRlbScsIGZ1bmN0aW9uKGUpIHtcbiAgICAkKCB0aGlzICkucmVtb3ZlQ2xhc3MoICdzaG93LXRvb2x0aXAnIClcbiAgfSApXG5cbiAgd3BjdXN0b21pemUuYmluZCggJ3JlYWR5JywgZnVuY3Rpb24oKSB7XG4gICAgd3BjdXN0b21pemUuc2VjdGlvbi5lYWNoKCBmdW5jdGlvbihzZWN0aW9uKSB7XG4gICAgICBzZWN0aW9uLmV4cGFuZGVkLmJpbmQoIGZ1bmN0aW9uKGlzRXhwYW5kaW5nKSB7XG4gICAgICAgIGxldCBpblNpZGViYXIgPSBbXVxuICAgICAgICAkKFxuICAgICAgICAgICcuaGZnLS1zaWRlYmFyLWl0ZW1zIC5ncmlkLXN0YWNrLWl0ZW0gLmdyaWQtc3RhY2staXRlbS1jb250ZW50IC5oZmctLWNiLWl0ZW0tbmFtZScgKVxuICAgICAgICAgIC5lYWNoKCBmdW5jdGlvbihpbmRleCwgZWwpIHtcbiAgICAgICAgICAgIGluU2lkZWJhci5wdXNoKCAkKCBlbCApLmRhdGEoICdzZWN0aW9uJyApIClcbiAgICAgICAgICB9IClcbiAgICAgICAgLy8gaW5TaWRlYmFyLnB1c2goICdoZWFkZXJfbWVudV9pY29uJyApO1xuICAgICAgICBpblNpZGViYXIucHVzaCggJ2hmZ19oZWFkZXJfbGF5b3V0X3NpZGViYXInIClcblxuICAgICAgICBpZiAoIGluU2lkZWJhci5pbmRleE9mKCBzZWN0aW9uLmlkICkgIT09IC0xICYmIGlzRXhwYW5kaW5nICYmXG4gICAgICAgICAgd3BjdXN0b21pemUucHJldmlld2VkRGV2aWNlLmdldCgpICE9PSAnZGVza3RvcCcgKSB7XG4gICAgICAgICAgdG9nZ2xlTW9iaWxlTWVudSggdHJ1ZSApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdG9nZ2xlTW9iaWxlTWVudSggZmFsc2UgKVxuICAgICAgICB9XG4gICAgICB9IClcbiAgICB9IClcblxuICAgIHdwY3VzdG9taXplLnByZXZpZXdlci5iaW5kKCAnbmV2ZS10b2dnbGUtbmF2YmFyJywgZnVuY3Rpb24oKSB7XG4gICAgICAkKCAnLmhmZy0tY3Atc2lkZWJhciAudG9nZ2xlJyApLnRvZ2dsZUNsYXNzKCAnYWN0aXZlJyApXG4gICAgfSApXG4gIH0gKVxuXG4gICRkb2N1bWVudC5vbiggJ2NsaWNrJywgJy5oZmctLWNwLXNpZGViYXIgLnRvZ2dsZScsIGZ1bmN0aW9uKCkge1xuICAgIHRvZ2dsZU1vYmlsZU1lbnUoKVxuICB9IClcbiAgJGRvY3VtZW50Lm9uKCAnY2xpY2snLFxuICAgICcuaGZnLS1jcC1zaWRlYmFyIC5oZmctLWNiLXJvdy1zZXR0aW5ncywuaGZnLS1jcC1zaWRlYmFyIC5ncmlkLXN0YWNrLWl0ZW0nLFxuICAgIGZ1bmN0aW9uKCkge1xuICAgICAgdG9nZ2xlTW9iaWxlTWVudSggdHJ1ZSApXG4gICAgfSApXG5cbiAgLy9RdWljayBsaW5rc1xuICAkZG9jdW1lbnQub24oICdjbGljaycsICcucXVpY2stbGlua3MgYScsIGZ1bmN0aW9uKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgdmFyIGNvbnRyb2wgPSAkKCB0aGlzICkuZGF0YSggJ2NvbnRyb2wtZm9jdXMnIClcblx0aWYoIGNvbnRyb2wgPT09ICd0b2dnbGVfc2lkZWJhcicgKSB7XG5cdCAgdG9nZ2xlTW9iaWxlTWVudSh0cnVlKTtcblx0ICByZXR1cm4gZmFsc2U7XG5cdH1cbiAgICB3cC5jdXN0b21pemUuY29udHJvbCggY29udHJvbCApLmZvY3VzKClcbiAgICAkKCAnbGFiZWwuJyArIGNvbnRyb2wgKS5jbGljaygpXG4gIH0gKVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZU1vYmlsZU1lbnUodHlwZSkge1xuICAgIGxldCBpdGVtID0gJCggJy5oZmctLWNwLXNpZGViYXIgLnRvZ2dsZScgKVxuICAgIGlmICggdHlwZSA9PT0gdHJ1ZSApIHtcbiAgICAgIGl0ZW0uYWRkQ2xhc3MoICdhY3RpdmUnIClcbiAgICAgIHdwY3VzdG9taXplLnByZXZpZXdlci5zZW5kKCAnaGVhZGVyX3NpZGViYXJfb3BlbicgKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmICggdHlwZSA9PT0gZmFsc2UgKSB7XG4gICAgICBpdGVtLnJlbW92ZUNsYXNzKCAnYWN0aXZlJyApXG4gICAgICB3cGN1c3RvbWl6ZS5wcmV2aWV3ZXIuc2VuZCggJ2hlYWRlcl9zaWRlYmFyX2Nsb3NlJyApXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaWYgKCBpdGVtLmhhc0NsYXNzKCAnYWN0aXZlJyApICkge1xuICAgICAgd3BjdXN0b21pemUucHJldmlld2VyLnNlbmQoICdoZWFkZXJfc2lkZWJhcl9jbG9zZScgKVxuICAgIH0gZWxzZSB7XG4gICAgICB3cGN1c3RvbWl6ZS5wcmV2aWV3ZXIuc2VuZCggJ2hlYWRlcl9zaWRlYmFyX29wZW4nIClcbiAgICB9XG4gICAgaXRlbS50b2dnbGVDbGFzcyggJ2FjdGl2ZScgKVxuICB9XG59ICkoIGpRdWVyeSwgd3AuY3VzdG9taXplIHx8IG51bGwgKVxuXG5oYXNoQ29kZSA9IGZ1bmN0aW9uKHN0cmluZykge1xuICB2YXIgaGFzaCA9IDAsIGksIGNoclxuICBpZiAoIHN0cmluZy5sZW5ndGggPT09IDAgKSByZXR1cm4gaGFzaFxuICBmb3IgKCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKysgKSB7XG4gICAgY2hyID0gdGhpcy5jaGFyQ29kZUF0KCBpIClcbiAgICBoYXNoID0gKCAoIGhhc2ggPDwgNSApIC0gaGFzaCApICsgY2hyXG4gICAgaGFzaCB8PSAwIC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG4gIHJldHVybiBoYXNoXG59XG5cbndwLmN1c3RvbWl6ZS5zZWN0aW9uQ29uc3RydWN0b3JbJ2hmZ19pbnN0cnVjdGlvbnMnXSA9IHdwLmN1c3RvbWl6ZS5TZWN0aW9uLmV4dGVuZChcbiAge1xuXG4gICAgLy8gTm8gZXZlbnRzIGZvciB0aGlzIHR5cGUgb2Ygc2VjdGlvbi5cbiAgICBhdHRhY2hFdmVudHM6IGZ1bmN0aW9uKCkge1xuICAgIH0sXG5cbiAgICAvLyBBbHdheXMgbWFrZSB0aGUgc2VjdGlvbiBhY3RpdmUuXG4gICAgaXNDb250ZXh0dWFsbHlBY3RpdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH0gKVxuIl0sIm5hbWVzIjpbImNoZWNrIiwiaXQiLCJNYXRoIiwiZ2xvYmFsIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsInNlbGYiLCJ0aGlzIiwiRnVuY3Rpb24iLCJmYWlscyIsImV4ZWMiLCJlcnJvciIsImRlc2NyaXB0b3JzIiwicmVxdWlyZSQkMCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiZnVuY3Rpb25CaW5kTmF0aXZlIiwidGVzdCIsImJpbmQiLCJoYXNPd25Qcm9wZXJ0eSIsIk5BVElWRV9CSU5EIiwiY2FsbCIsInByb3RvdHlwZSIsImZ1bmN0aW9uQ2FsbCIsImFwcGx5IiwiYXJndW1lbnRzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJOQVNIT1JOX0JVRyIsIm9iamVjdFByb3BlcnR5SXNFbnVtZXJhYmxlIiwiZiIsIlYiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsIm1hdGNoIiwidmVyc2lvbiIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsImJpdG1hcCIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJGdW5jdGlvblByb3RvdHlwZSIsInVuY3VycnlUaGlzV2l0aEJpbmQiLCJmdW5jdGlvblVuY3VycnlUaGlzIiwiZm4iLCJ1bmN1cnJ5VGhpcyIsInRvU3RyaW5nIiwic3RyaW5nU2xpY2UiLCJzbGljZSIsImNsYXNzb2ZSYXciLCJyZXF1aXJlJCQxIiwiY2xhc3NvZiIsInJlcXVpcmUkJDIiLCIkT2JqZWN0Iiwic3BsaXQiLCJpbmRleGVkT2JqZWN0IiwiaXNOdWxsT3JVbmRlZmluZWQiLCIkVHlwZUVycm9yIiwiVHlwZUVycm9yIiwicmVxdWlyZU9iamVjdENvZXJjaWJsZSIsIkluZGV4ZWRPYmplY3QiLCJ0b0luZGV4ZWRPYmplY3QiLCJkb2N1bWVudEFsbCIsImRvY3VtZW50IiwiYWxsIiwiZG9jdW1lbnRBbGxfMSIsIklTX0hUTUxEREEiLCJ1bmRlZmluZWQiLCJpc0NhbGxhYmxlIiwiYXJndW1lbnQiLCJpc09iamVjdCIsImdldEJ1aWx0SW4iLCJuYW1lc3BhY2UiLCJtZXRob2QiLCJsZW5ndGgiLCJvYmplY3RJc1Byb3RvdHlwZU9mIiwiaXNQcm90b3R5cGVPZiIsImVuZ2luZVVzZXJBZ2VudCIsIm5hdmlnYXRvciIsIlN0cmluZyIsInVzZXJBZ2VudCIsInByb2Nlc3MiLCJEZW5vIiwidmVyc2lvbnMiLCJ2OCIsImVuZ2luZVY4VmVyc2lvbiIsIlY4X1ZFUlNJT04iLCIkU3RyaW5nIiwic3ltYm9sQ29uc3RydWN0b3JEZXRlY3Rpb24iLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2wiLCJTeW1ib2wiLCJzaGFtIiwidXNlU3ltYm9sQXNVaWQiLCJpdGVyYXRvciIsImlzU3ltYm9sIiwicmVxdWlyZSQkMyIsIiRTeW1ib2wiLCJ0cnlUb1N0cmluZyIsImFDYWxsYWJsZSIsImdldE1ldGhvZCIsIlAiLCJmdW5jIiwiZGVmaW5lR2xvYmFsUHJvcGVydHkiLCJrZXkiLCJTSEFSRUQiLCJzaGFyZWRTdG9yZSIsInN0b3JlIiwic2hhcmVkTW9kdWxlIiwicHVzaCIsIm1vZGUiLCJjb3B5cmlnaHQiLCJsaWNlbnNlIiwic291cmNlIiwidG9PYmplY3QiLCJoYXNPd25Qcm9wZXJ0eV8xIiwiaGFzT3duIiwiaWQiLCJwb3N0Zml4IiwicmFuZG9tIiwidWlkIiwic2hhcmVkIiwiTkFUSVZFX1NZTUJPTCIsInJlcXVpcmUkJDQiLCJVU0VfU1lNQk9MX0FTX1VJRCIsInJlcXVpcmUkJDUiLCJXZWxsS25vd25TeW1ib2xzU3RvcmUiLCJjcmVhdGVXZWxsS25vd25TeW1ib2wiLCJ3aXRob3V0U2V0dGVyIiwid2VsbEtub3duU3ltYm9sIiwibmFtZSIsIm9yZGluYXJ5VG9QcmltaXRpdmUiLCJpbnB1dCIsInByZWYiLCJ2YWwiLCJ2YWx1ZU9mIiwiVE9fUFJJTUlUSVZFIiwidG9QcmltaXRpdmUiLCJyZXN1bHQiLCJleG90aWNUb1ByaW0iLCJ0b1Byb3BlcnR5S2V5IiwiRVhJU1RTIiwiY3JlYXRlRWxlbWVudCIsImRvY3VtZW50Q3JlYXRlRWxlbWVudCIsImllOERvbURlZmluZSIsImEiLCJERVNDUklQVE9SUyIsInByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlIiwicmVxdWlyZSQkNiIsIklFOF9ET01fREVGSU5FIiwicmVxdWlyZSQkNyIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJvYmplY3RHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJPIiwidjhQcm90b3R5cGVEZWZpbmVCdWciLCJhbk9iamVjdCIsIlY4X1BST1RPVFlQRV9ERUZJTkVfQlVHIiwiJGRlZmluZVByb3BlcnR5IiwiRU5VTUVSQUJMRSIsIkNPTkZJR1VSQUJMRSIsIldSSVRBQkxFIiwib2JqZWN0RGVmaW5lUHJvcGVydHkiLCJBdHRyaWJ1dGVzIiwiY3VycmVudCIsImRlZmluZVByb3BlcnR5TW9kdWxlIiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5Iiwib2JqZWN0IiwiZ2V0RGVzY3JpcHRvciIsImZ1bmN0aW9uTmFtZSIsIlBST1BFUiIsImZ1bmN0aW9uVG9TdHJpbmciLCJpbnNwZWN0U291cmNlIiwic2V0IiwiaGFzIiwiV2Vha01hcCIsIndlYWtNYXBCYXNpY0RldGVjdGlvbiIsImtleXMiLCJzaGFyZWRLZXkiLCJoaWRkZW5LZXlzIiwiTkFUSVZFX1dFQUtfTUFQIiwiT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQiLCJzdGF0ZSIsIm1ldGFkYXRhIiwiZmFjYWRlIiwiU1RBVEUiLCJpbnRlcm5hbFN0YXRlIiwiZW5mb3JjZSIsImdldHRlckZvciIsIlRZUEUiLCJ0eXBlIiwiQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUiLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsImdldEludGVybmFsU3RhdGUiLCJyZXBsYWNlIiwiam9pbiIsIkNPTkZJR1VSQUJMRV9MRU5HVEgiLCJURU1QTEFURSIsIm1ha2VCdWlsdEluIiwibWFrZUJ1aWx0SW5Nb2R1bGUiLCJleHBvcnRzIiwib3B0aW9ucyIsImdldHRlciIsInNldHRlciIsImFyaXR5IiwiY29uc3RydWN0b3IiLCJkZWZpbmVCdWlsdEluIiwic2ltcGxlIiwidW5zYWZlIiwibm9uQ29uZmlndXJhYmxlIiwibm9uV3JpdGFibGUiLCJjZWlsIiwiZmxvb3IiLCJ0cnVuYyIsIngiLCJuIiwidG9JbnRlZ2VyT3JJbmZpbml0eSIsIm51bWJlciIsIm1heCIsIm1pbiIsInRvQWJzb2x1dGVJbmRleCIsImluZGV4IiwiaW50ZWdlciIsInRvTGVuZ3RoIiwibGVuZ3RoT2ZBcnJheUxpa2UiLCJvYmoiLCJjcmVhdGVNZXRob2QiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiZWwiLCJmcm9tSW5kZXgiLCJhcnJheUluY2x1ZGVzIiwiaW5jbHVkZXMiLCJpbmRleE9mIiwib2JqZWN0S2V5c0ludGVybmFsIiwibmFtZXMiLCJpIiwiZW51bUJ1Z0tleXMiLCJpbnRlcm5hbE9iamVjdEtleXMiLCJjb25jYXQiLCJvYmplY3RHZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIm9iamVjdEdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5TmFtZXNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlIiwiY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyIsInRhcmdldCIsImV4Y2VwdGlvbnMiLCJyZXBsYWNlbWVudCIsImlzRm9yY2VkIiwiZmVhdHVyZSIsImRldGVjdGlvbiIsImRhdGEiLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInN0cmluZyIsInRvTG93ZXJDYXNlIiwiaXNGb3JjZWRfMSIsIl9leHBvcnQiLCJ0YXJnZXRQcm9wZXJ0eSIsInNvdXJjZVByb3BlcnR5IiwiVEFSR0VUIiwiR0xPQkFMIiwiU1RBVElDIiwic3RhdCIsImRvbnRDYWxsR2V0U2V0IiwiZm9yY2VkIiwiZnVuY3Rpb25VbmN1cnJ5VGhpc0NsYXVzZSIsImlzQXJyYXkiLCJBcnJheSIsInRvU3RyaW5nVGFnU3VwcG9ydCIsIlRPX1NUUklOR19UQUdfU1VQUE9SVCIsIlRPX1NUUklOR19UQUciLCJDT1JSRUNUX0FSR1VNRU5UUyIsInRhZyIsInRyeUdldCIsImNhbGxlZSIsIm5vb3AiLCJlbXB0eSIsImNvbnN0cnVjdCIsImNvbnN0cnVjdG9yUmVnRXhwIiwiSU5DT1JSRUNUX1RPX1NUUklORyIsImlzQ29uc3RydWN0b3JNb2Rlcm4iLCJpc0NvbnN0cnVjdG9yTGVnYWN5IiwiaXNDb25zdHJ1Y3RvciIsImNhbGxlZCIsIlNQRUNJRVMiLCIkQXJyYXkiLCJhcnJheVNwZWNpZXNDb25zdHJ1Y3RvciIsIm9yaWdpbmFsQXJyYXkiLCJDIiwidGhhdCIsImFycmF5U3BlY2llc0NyZWF0ZSIsIklTX01BUCIsIklTX0ZJTFRFUiIsIklTX1NPTUUiLCJJU19FVkVSWSIsIklTX0ZJTkRfSU5ERVgiLCJJU19GSUxURVJfUkVKRUNUIiwiTk9fSE9MRVMiLCJjYWxsYmFja2ZuIiwic3BlY2lmaWNDcmVhdGUiLCJib3VuZEZ1bmN0aW9uIiwiY3JlYXRlIiwiYXJyYXlJdGVyYXRpb24iLCJmb3JFYWNoIiwibWFwIiwiZmlsdGVyIiwic29tZSIsImV2ZXJ5IiwiZmluZCIsImZpbmRJbmRleCIsImZpbHRlclJlamVjdCIsIm9iamVjdEtleXMiLCJvYmplY3REZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydGllcyIsIlByb3BlcnRpZXMiLCJwcm9wcyIsImFjdGl2ZVhEb2N1bWVudCIsImh0bWwiLCJkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlIiwiUFJPVE9UWVBFIiwiU0NSSVBUIiwiSUVfUFJPVE8iLCJFbXB0eUNvbnN0cnVjdG9yIiwic2NyaXB0VGFnIiwiY29udGVudCIsIkxUIiwiTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCIsIndyaXRlIiwiY2xvc2UiLCJ0ZW1wIiwicGFyZW50V2luZG93IiwiTnVsbFByb3RvT2JqZWN0IiwiQWN0aXZlWE9iamVjdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwiSlMiLCJkb21haW4iLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwiRiIsIm9iamVjdENyZWF0ZSIsIlVOU0NPUEFCTEVTIiwiQXJyYXlQcm90b3R5cGUiLCIkIiwiJGZpbmQiLCJhZGRUb1Vuc2NvcGFibGVzIiwiRklORCIsIlNLSVBTX0hPTEVTIiwicHJvdG8iLCJjcmVhdGVQcm9wZXJ0eSIsInByb3BlcnR5S2V5IiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsIk1FVEhPRF9OQU1FIiwiYXJyYXkiLCJmb28iLCJCb29sZWFuIiwiYXJyYXlTbGljZSIsInJlcXVpcmUkJDgiLCJuYXRpdmVTbGljZSIsInJlcXVpcmUkJDEwIiwiSEFTX1NQRUNJRVNfU1VQUE9SVCIsInJlcXVpcmUkJDkiLCJzdGFydCIsImVuZCIsIkNvbnN0cnVjdG9yIiwiayIsImZpbiIsImFycmF5TWV0aG9kSXNTdHJpY3QiLCIkaW5kZXhPZiIsIm5hdGl2ZUluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwic2VhcmNoRWxlbWVudCIsIm5hdGl2ZUtleXMiLCJyZTEiLCJyZTIiLCIkUmVnRXhwIiwiUmVnRXhwIiwiVU5TVVBQT1JURURfWSIsInJlIiwibGFzdEluZGV4IiwiTUlTU0VEX1NUSUNLWSIsInN0aWNreSIsInJlZ2V4cFN0aWNreUhlbHBlcnMiLCJCUk9LRU5fQ0FSRVQiLCJyZWdleHBVbnN1cHBvcnRlZERvdEFsbCIsImRvdEFsbCIsImZsYWdzIiwicmVnZXhwVW5zdXBwb3J0ZWROY2ciLCJncm91cHMiLCJyZWdleHBGbGFncyIsImhhc0luZGljZXMiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwidW5pY29kZSIsInVuaWNvZGVTZXRzIiwic3RpY2t5SGVscGVycyIsIlVOU1VQUE9SVEVEX0RPVF9BTEwiLCJVTlNVUFBPUlRFRF9OQ0ciLCJuYXRpdmVSZXBsYWNlIiwibmF0aXZlRXhlYyIsInBhdGNoZWRFeGVjIiwiY2hhckF0IiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwiTlBDR19JTkNMVURFRCIsInJlQ29weSIsImdyb3VwIiwic3RyIiwicmF3IiwiY2hhcnNBZGRlZCIsInN0ckNvcHkiLCJyZWdleHBFeGVjIiwiZnVuY3Rpb25BcHBseSIsIlJlZmxlY3QiLCJSZWdFeHBQcm90b3R5cGUiLCJjaGFyQ29kZUF0IiwiQ09OVkVSVF9UT19TVFJJTkciLCJwb3MiLCJmaXJzdCIsInNlY29uZCIsIlMiLCJwb3NpdGlvbiIsInNpemUiLCJjb2RlQXQiLCJTVUJTVElUVVRJT05fU1lNQk9MUyIsIlNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEIiwiZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMiLCJLRVkiLCJGT1JDRUQiLCJTSEFNIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsInVuY3VycmllZE5hdGl2ZVJlZ0V4cE1ldGhvZCIsIm1ldGhvZHMiLCJuYXRpdmVNZXRob2QiLCJyZWdleHAiLCJhcmcyIiwiZm9yY2VTdHJpbmdNZXRob2QiLCJ1bmN1cnJpZWROYXRpdmVNZXRob2QiLCIkZXhlYyIsImRvbmUiLCJyZXF1aXJlJCQxMSIsImFkdmFuY2VTdHJpbmdJbmRleCIsInJlcXVpcmUkJDEzIiwiZ2V0U3Vic3RpdHV0aW9uIiwibWF0Y2hlZCIsImNhcHR1cmVzIiwibmFtZWRDYXB0dXJlcyIsInRhaWxQb3MiLCJtIiwic3ltYm9scyIsImNoIiwiY2FwdHVyZSIsInJlZ0V4cEV4ZWMiLCJSIiwiUkVQTEFDRSIsInJlcXVpcmUkJDE2Iiwic3RyaW5nSW5kZXhPZiIsIlJFUExBQ0VfS0VFUFNfJDAiLCJSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSIsIl8iLCJtYXliZUNhbGxOYXRpdmUiLCJVTlNBRkVfU1VCU1RJVFVURSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwicmVwbGFjZXIiLCJyeCIsInJlcyIsImZ1bmN0aW9uYWxSZXBsYWNlIiwiZnVsbFVuaWNvZGUiLCJyZXN1bHRzIiwiYWNjdW11bGF0ZWRSZXN1bHQiLCJuZXh0U291cmNlUG9zaXRpb24iLCJqIiwicmVwbGFjZXJBcmdzIiwiJGZpbHRlciIsImNvcnJlY3RQcm90b3R5cGVHZXR0ZXIiLCJnZXRQcm90b3R5cGVPZiIsIkNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiIsIk9iamVjdFByb3RvdHlwZSIsIm9iamVjdEdldFByb3RvdHlwZU9mIiwiSUVfQlVHIiwiVE9fRU5UUklFUyIsIklFX1dPUktBUk9VTkQiLCIkdmFsdWVzIiwiZW50cmllcyIsInZhbHVlcyIsImFycmF5U2xpY2VTaW1wbGUiLCJtZXJnZVNvcnQiLCJjb21wYXJlZm4iLCJtaWRkbGUiLCJpbnNlcnRpb25Tb3J0IiwibWVyZ2UiLCJlbGVtZW50IiwibGVmdCIsInJpZ2h0IiwibGxlbmd0aCIsInJsZW5ndGgiLCJsaW5kZXgiLCJyaW5kZXgiLCJhcnJheVNvcnQiLCJmaXJlZm94IiwiZW5naW5lRmZWZXJzaW9uIiwiZW5naW5lSXNJZU9yRWRnZSIsIndlYmtpdCIsImVuZ2luZVdlYmtpdFZlcnNpb24iLCJkZWxldGVQcm9wZXJ0eU9yVGhyb3ciLCJpbnRlcm5hbFNvcnQiLCJGRiIsIklFX09SX0VER0UiLCJWOCIsInJlcXVpcmUkJDEyIiwiV0VCS0lUIiwibmF0aXZlU29ydCIsInNvcnQiLCJGQUlMU19PTl9VTkRFRklORUQiLCJGQUlMU19PTl9OVUxMIiwiU1RSSUNUX01FVEhPRCIsIlNUQUJMRV9TT1JUIiwiY29kZSIsImNociIsImZyb21DaGFyQ29kZSIsInYiLCJiIiwiaXRlbXNMZW5ndGgiLCJpdGVtcyIsImFycmF5TGVuZ3RoIiwieSIsImdldFNvcnRDb21wYXJlIiwiJG1hcCIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwid2luZG93TmFtZXMiLCJvYmplY3RHZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwiLCJnZXRXaW5kb3dOYW1lcyIsImRlZmluZUJ1aWx0SW5BY2Nlc3NvciIsIndlbGxLbm93blN5bWJvbFdyYXBwZWQiLCJwYXRoIiwid3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSIsIiR0b1N0cmluZyIsInJlcXVpcmUkJDE0IiwibmF0aXZlT2JqZWN0Q3JlYXRlIiwicmVxdWlyZSQkMTUiLCJyZXF1aXJlJCQxNyIsImdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCIsInJlcXVpcmUkJDE4IiwicmVxdWlyZSQkMTkiLCJyZXF1aXJlJCQyMCIsInJlcXVpcmUkJDIxIiwicmVxdWlyZSQkMjIiLCJyZXF1aXJlJCQyMyIsInJlcXVpcmUkJDI0IiwicmVxdWlyZSQkMjUiLCJyZXF1aXJlJCQyNiIsInJlcXVpcmUkJDI4IiwicmVxdWlyZSQkMjkiLCJyZXF1aXJlJCQzMCIsInJlcXVpcmUkJDMxIiwiZGVmaW5lV2VsbEtub3duU3ltYm9sIiwiTkFNRSIsImRlZmluZVN5bWJvbFRvUHJpbWl0aXZlIiwiU3ltYm9sUHJvdG90eXBlIiwiaGludCIsInNldFRvU3RyaW5nVGFnIiwiVEFHIiwiSW50ZXJuYWxTdGF0ZU1vZHVsZSIsInJlcXVpcmUkJDM1IiwiJGZvckVhY2giLCJyZXF1aXJlJCQzNiIsIkhJRERFTiIsInJlcXVpcmUkJDI3Iiwic2V0SW50ZXJuYWxTdGF0ZSIsIlJhbmdlRXJyb3IiLCJRT2JqZWN0IiwibmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzIiwibmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUiLCJBbGxTeW1ib2xzIiwiT2JqZWN0UHJvdG90eXBlU3ltYm9scyIsIlVTRV9TRVRURVIiLCJmaW5kQ2hpbGQiLCJmYWxsYmFja0RlZmluZVByb3BlcnR5IiwiT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciIsInNldFN5bWJvbERlc2NyaXB0b3IiLCJ3cmFwIiwiZGVzY3JpcHRpb24iLCIkZGVmaW5lUHJvcGVydGllcyIsInByb3BlcnRpZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT0JKRUNUX1BST1RPVFlQRSIsIiQkNSIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsInN5bWJvbFJlZ2lzdHJ5RGV0ZWN0aW9uIiwia2V5Rm9yIiwiTkFUSVZFX1NZTUJPTF9SRUdJU1RSWSIsIlN0cmluZ1RvU3ltYm9sUmVnaXN0cnkiLCJTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5IiwiZm9yIiwic3ltIiwiZ2V0UmVwbGFjZXJGdW5jdGlvbiIsInJhd0xlbmd0aCIsImtleXNMZW5ndGgiLCJyb290IiwiJHN0cmluZ2lmeSIsIm51bWJlclRvU3RyaW5nIiwidGVzdGVyIiwibG93IiwiaGkiLCJXUk9OR19TWU1CT0xTX0NPTlZFUlNJT04iLCJJTExfRk9STUVEX1VOSUNPREUiLCJzdHJpbmdpZnlXaXRoU3ltYm9sc0ZpeCIsImFyZ3MiLCIkcmVwbGFjZXIiLCJmaXhJbGxGb3JtZWQiLCJvZmZzZXQiLCJwcmV2IiwibmV4dCIsInN0cmluZ2lmeSIsInNwYWNlIiwiQ3VzdG9taXplQnVpbGRlclYxIiwiTmF0aXZlU3ltYm9sIiwiRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlIiwiU3ltYm9sV3JhcHBlciIsInRoaXNTeW1ib2xWYWx1ZSIsInN5bWJvbERlc2NyaXB0aXZlU3RyaW5nIiwiZGVzYyIsIiRkb2N1bWVudCIsIndwY3VzdG9taXplIiwid3AiLCJjdXN0b21pemUiLCJpc1JUTCIsIkhGR19MYXlvdXRfQnVpbGRlciIsIkJ1aWxkZXIiLCJjb250cm9sSWQiLCJjb2xzIiwiY2VsbEhlaWdodCIsImNvbnRhaW5lciIsIndpZGdldHNTaWRlYmFyIiwicmVhZHkiLCJkZXZpY2VzIiwiZGVza3RvcCIsIm1vYmlsZSIsImFjdGl2ZVBhbmVsIiwicGFuZWxzIiwiYWN0aXZlUm93IiwiZHJhZ2dpbmdJdGVtIiwiaW5zZXJ0UG9pbnQiLCJpbnNlcnRSb3ciLCJnZXRUZW1wbGF0ZSIsIm1lbW9pemUiLCJjb250cm9sIiwiZXZhbHVhdGUiLCJpbnRlcnBvbGF0ZSIsImVzY2FwZSIsInZhcmlhYmxlIiwiZGF0YUxldGlhYmxlTmFtZSIsImlzVW5kZWZpbmVkIiwiaXNTdHJpbmciLCJ0ZW1wbGF0ZSIsImNvbXBpbGVkIiwiZHJhZ19kcm9wIiwiZWFjaCIsInBhbmVsIiwiZGV2aWNlIiwiZGF0YU5hbWUiLCJhdHRyIiwiX2lkIiwiZHJvcHBhYmxlIiwib3V0IiwiZXZlbnQiLCJ1aSIsIm92ZXIiLCJkcm9wIiwiJHdyYXBwZXIiLCJncmlkc3RlciIsInNhdmUiLCJzaWRlYmFyIiwic2lkZWJhcklkIiwiZHJhZ2dhYmxlIiwicmV2ZXJ0IiwiY29ubmVjdFRvU29ydGFibGUiLCJhZGRDbGFzcyIsImNzcyIsImhlbHBlciIsInBhcmVudCIsInN0b3AiLCJyZW1vdmVDbGFzcyIsInNvcnRhYmxlIiwiY2hhbmdlIiwicmVjZWl2ZSIsInJlbW92ZUF0dHIiLCJzb3J0R3JpZCIsInBhcnNlSW50IiwibngiLCJpbnNlcnRBZnRlciIsImdldFgiLCIkaXRlbSIsImdldFciLCJkZiIsInciLCJncmlkR2V0SXRlbUluZm8iLCJmbGFnIiwic2xvdEJlZm9yZSIsInNsb3RBZnRlciIsImJyIiwiaXRlbSIsImJlZm9yZSIsImFmdGVyIiwid3JhcHBlciIsInVwZGF0ZUl0ZW1zUG9zaXRpb25zIiwibWF4Q29sIiwiX3R5cGVvZiIsImFkZEl0ZW1Ub0ZsYWciLCJub2RlIiwicmVtb3ZlTm9kZSIsImdldFJpZ2h0RW1wdHlTbG90RnJvbVgiLCJzdG9wV2hlbk5vdEVtcHR5IiwiZW1wdHlTbG90cyIsImdldExlZnRFbXB0eVNsb3RGcm9tWCIsImlzRW1wdHlYIiwiY2hlY2tFbm91Z2hTcGFjZUZyb21YIiwiZ2V0UHJldkJsb2NrIiwiX3h3IiwiZm91bmQiLCJfeCIsImdldE5leHRCbG9jayIsIm1vdmVBbGxJdGVtc0Zyb21YVG9MZWZ0IiwiYmFja3VwRmxhZyIsIm1heE51bWJlciIsIm5ld1giLCJuTW92ZSIsInhFIiwiYyIsImZsYWdOb0VtcHR5IiwibW92ZUFsbEl0ZW1zRnJvbVhUb1JpZ2h0IiwiaW5zZXJ0VG9GbGFnIiwic3dhcCIsIl9yZSIsIl9sZSIsIl93IiwiZ2V0RW1wdHlTbG90cyIsImNvbnNvbGUiLCJsb2ciLCJfYmxvY2tQcmV2IiwiX2Jsb2NrTmV4dCIsIl9lbXB0eVNsb3RzIiwib3giLCJfbW92ZVRvU3dhcCIsImNsb25lIiwibGUiLCJnZXRGbGFnIiwid09mZnNldCIsImN3IiwiaXRlbVdpZHRoIiwiaW5UaGlzUm93Iiwid2lkdGgiLCJjb2xXaWR0aCIsImlPZmZzZXQiLCJfaSIsInhjIiwieGkiLCJpcyIsInJvdW5kIiwiY2xpZW50WCIsIm93IiwiZGlkIiwiYmxvY2syIiwiYmxvY2syUmlnaHQiLCJibG9jazMiLCJfbmV3WCIsImFwcGVuZCIsInVwZGF0ZUFsbEdyaWRzIiwicm93Iiwicm93SWQiLCJ1cGRhdGVHcmlkRmxhZyIsInNldEdyaWRXaWR0aCIsImlzU2hpZnRMZWZ0IiwiaXNTaGlmdFJpZ2h0Iiwib3JpZ2luYWxFbGVtZW50V2lkdGgiLCJvcmlnaW5hbFNpemUiLCJvcmlnaW5hbFBvc2l0aW9uIiwiYWRkVyIsIm5ld1ciLCJvcmlnaW5hbEVsZW1lbnQiLCJpdGVtSW5mbyIsInhDIiwiJHJvdyIsImlzRW1wdHkiLCJyb3dGbGFnIiwiYWRkTmV3V2lkZ2V0IiwiZWxJdGVtIiwiYXBwZW5kVG8iLCJzY3JvbGwiLCJ6SW5kZXgiLCJoYW5kbGUiLCJkcmFnIiwicmVzaXphYmxlIiwiaGFuZGxlcyIsImRhdGFzZXQiLCJzZWN0aW9uIiwiYWRkUGFuZWwiLCJ0ZW1wbGF0ZUlkIiwicm93cyIsImFkZERldmljZVBhbmVscyIsImRldmljZU5hbWUiLCJwYW5lbEhUTUwiLCJ3aWRnZXRTaWRlYmFyQ29udGFpbmVyIiwidG1wbFVwc2VsbCIsImFkZEl0ZW0iLCJhZGRBdmFpbGFibGVJdGVtcyIsIl9kIiwiX2hhc0QiLCJfdiIsInByZXBlbmQiLCJzd2l0Y2hUb0RldmljZSIsInRvZ2dsZUJ1dHRvbiIsInRyaWdnZXIiLCJhZGRFeGlzdGluZ1Jvd3NJdGVtcyIsInNldHRpbmciLCJKU09OIiwicGFyc2UiLCIkcm93cyIsImRldmljZURhdGEiLCJoaWRlRHVwbGljYXRlcyIsImZvY3VzIiwib24iLCJlIiwicHJldmVudERlZmF1bHQiLCJ3aWRnZXQiLCJjbG9zZUNvbXBvbmVudHNTaWRlYmFyIiwiaW5pdENvbXBvbmVudHNTaWRlYmFyIiwiY2xvc2VzdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImhhc0NsYXNzIiwib3V0ZXJXaWR0aCIsImhlaWdodCIsIm91dGVySGVpZ2h0IiwicG9zaXRpb25TdHlsZSIsInRvcCIsImdldEF0dHJpYnV0ZSIsInF1ZXJ5IiwidG9nZ2xlIiwidGV4dCIsIml0ZW1JZCIsImRhdGFJblJvdyIsIm5ld0l0ZW0iLCJzZXRUaW1lb3V0IiwicmVtb3ZlIiwicmVtb3ZlQWxsSXRlbXMiLCJzbHVnIiwiY29tcG9uZW50cyIsImNvbXBvbmVudCIsImVuY29kZVZhbHVlIiwibGlzdGVuRm9yTGF5b3V0U2lkZWxvYWRpbmciLCJhZGRFdmVudExpc3RlbmVyIiwiZGV0YWlsIiwiZGVjb2RlVmFsdWUiLCJzaG93UGFuZWwiLCJoIiwiYm90dG9tIiwiaGlkZVBhbmVsIiwidG9nZ2xlUGFuZWwiLCJwYW5lVmlzaWJsZSIsImV4cGFuZGVkIiwiX2N1cnJlbnRfYnVpbGRlcl9wYW5lbCIsInRvZ2dsZUNsYXNzIiwicGFuZWxMYXlvdXRDU1MiLCJzaWRlYmFyV2lkdGgiLCJwb3B1bGF0ZUNvbXBvbmVudFByZXZpZXdzIiwiY29tcG9uZW50UHJldmlldyIsImluaXQiLCJwcmV2aWV3ZWREZXZpY2UiLCJuZXdEZXZpY2UiLCJyZXNpemUiLCJ0aHJvdHRsZSIsImNvbnRyb2xfaWQiLCJqUXVlcnkiLCJ0b2dnbGVNb2JpbGVNZW51IiwicHJldmlld2VyIiwic2VuZCIsImJ1aWxkZXJzIiwib3B0cyIsImZvb3Rlcl9tb3ZlZF93aWRnZXRzX3RleHQiLCJpbm5lcldpZHRoIiwiaXNFeHBhbmRpbmciLCJpblNpZGViYXIiLCJzdG9wUHJvcGFnYXRpb24iLCJjbGljayIsImhhc2hDb2RlIiwiaGFzaCIsInNlY3Rpb25Db25zdHJ1Y3RvciIsIlNlY3Rpb24iLCJleHRlbmQiLCJhdHRhY2hFdmVudHMiLCJpc0NvbnRleHR1YWxseUFjdGl2ZSJdLCJtYXBwaW5ncyI6Im9aQUNJQSxFQUFRLFNBQVVDLEdBQ3BCLE9BQU9BLEdBQU1BLEVBQUdDLE9BQVNBLE1BQVFELENBQ25DLEVBR0FFLEVBRUVILEVBQTJCLGlCQUFkSSxZQUEwQkEsYUFDdkNKLEVBQXVCLGlCQUFWSyxRQUFzQkEsU0FFbkNMLEVBQXFCLGlCQUFSTSxNQUFvQkEsT0FDakNOLEVBQXVCLGlCQUFWRyxHQUFzQkEsSUFFbkMsV0FBZSxPQUFPSSxJQUFPLENBQTdCLElBQW9DQSxHQUFRQyxTQUFT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SXRPLEtBQUtxRSxPQUFRaUssSUFFNUJ3cEIsR0FBV0EsR0FBUSxHQUFNQSxFQURuQjkzQixLQUFLaWEsV0FBWTNMLEdBRXZCd3BCLEdBQVEsRUFFVixPQUFPQSxDQUNULEVBRUFyUSxHQUFHQyxVQUFVcVEsbUJBQXFDLGlCQUFJdFEsR0FBR0MsVUFBVXNRLFFBQVFDLE9BQ3pFLENBR0VDLGFBQWMsV0FDYixFQUdEQyxxQkFBc0IsV0FDcEIsT0FBTyxDQUNUIiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzAsMSwyLDMsNCw1LDYsNyw4LDksMTAsMTEsMTIsMTMsMTQsMTUsMTYsMTcsMTgsMTksMjAsMjEsMjIsMjMsMjQsMjUsMjYsMjcsMjgsMjksMzAsMzEsMzIsMzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsNDEsNDIsNDMsNDQsNDUsNDYsNDcsNDgsNDksNTAsNTEsNTIsNTMsNTQsNTUsNTYsNTcsNTgsNTksNjAsNjEsNjIsNjMsNjQsNjUsNjYsNjcsNjgsNjksNzAsNzEsNzIsNzMsNzQsNzUsNzYsNzcsNzgsNzksODAsODEsODIsODMsODQsODUsODYsODcsODgsODksOTAsOTEsOTIsOTMsOTQsOTUsOTYsOTcsOTgsOTksMTAwLDEwMSwxMDIsMTAzLDEwNCwxMDUsMTA2LDEwNywxMDgsMTA5LDExMCwxMTEsMTEyLDExMywxMTQsMTE1LDExNiwxMTcsMTE4LDExOSwxMjAsMTIxLDEyMiwxMjMsMTI0LDEyNSwxMjYsMTI3LDEyOCwxMjksMTMwXX0=
